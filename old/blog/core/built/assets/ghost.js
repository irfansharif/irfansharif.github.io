"use strict";
/* jshint ignore:start */

/* jshint ignore:end */

define('ghost/adapters/application', ['exports', 'ghost/adapters/embedded-relation-adapter'], function (exports, _ghostAdaptersEmbeddedRelationAdapter) {
    exports['default'] = _ghostAdaptersEmbeddedRelationAdapter['default'].extend({

        shouldBackgroundReloadRecord: function shouldBackgroundReloadRecord() {
            return false;
        }

    });
});
define('ghost/adapters/base', ['exports', 'ember', 'ember-data', 'ghost/utils/ghost-paths'], function (exports, _ember, _emberData, _ghostUtilsGhostPaths) {
    var inject = _ember['default'].inject;
    var RESTAdapter = _emberData['default'].RESTAdapter;
    exports['default'] = RESTAdapter.extend({
        host: window.location.origin,
        namespace: (0, _ghostUtilsGhostPaths['default'])().apiRoot.slice(1),

        session: inject.service('session'),

        shouldBackgroundReloadRecord: function shouldBackgroundReloadRecord() {
            return false;
        },

        query: function query(store, type, _query) {
            var id = undefined;

            if (_query.id) {
                id = _query.id;
                delete _query.id;
            }

            return this.ajax(this.buildURL(type.modelName, id), 'GET', { data: _query });
        },

        buildURL: function buildURL(type, id) {
            // Ensure trailing slashes
            var url = this._super(type, id);

            if (url.slice(-1) !== '/') {
                url += '/';
            }

            return url;
        },

        // Override deleteRecord to disregard the response body on 2xx responses.
        // This is currently needed because the API is returning status 200 along
        // with the JSON object for the deleted entity and Ember expects an empty
        // response body for successful DELETEs.
        // Non-2xx (failure) responses will still work correctly as Ember will turn
        // them into rejected promises.
        deleteRecord: function deleteRecord() {
            var response = this._super.apply(this, arguments);

            return response.then(function () {
                return null;
            });
        },

        handleResponse: function handleResponse(status) {
            if (status === 401) {
                if (this.get('session.isAuthenticated')) {
                    this.get('session').invalidate();
                    return; // prevent error from bubbling because invalidate is async
                }
            }

            return this._super.apply(this, arguments);
        }
    });
});
define('ghost/adapters/embedded-relation-adapter', ['exports', 'ember', 'ghost/adapters/base'], function (exports, _ember, _ghostAdaptersBase) {
    var get = _ember['default'].get;
    var isNone = _ember['default'].isNone;

    // EmbeddedRelationAdapter will augment the query object in calls made to
    // DS.Store#findRecord, findAll, query, and queryRecord with the correct "includes"
    // (?include=relatedType) by introspecting on the provided subclass of the DS.Model.
    // In cases where there is no query object (DS.Model#save, or simple finds) the URL
    // that is built will be augmented with ?include=... where appropriate.
    //
    // Example:
    // If a model has an embedded hasMany relation, the related type will be included:
    // roles: DS.hasMany('role', { embedded: 'always' }) => ?include=roles

    exports['default'] = _ghostAdaptersBase['default'].extend({
        find: function find(store, type, id, snapshot) {
            return this.ajax(this.buildIncludeURL(store, type.modelName, id, snapshot, 'find'), 'GET');
        },

        findRecord: function findRecord(store, type, id, snapshot) {
            return this.ajax(this.buildIncludeURL(store, type.modelName, id, snapshot, 'findRecord'), 'GET');
        },

        findAll: function findAll(store, type, sinceToken) {
            var query = undefined,
                url = undefined;

            if (sinceToken) {
                query = { since: sinceToken };
            }

            url = this.buildIncludeURL(store, type.modelName, null, null, 'findAll');

            return this.ajax(url, 'GET', { data: query });
        },

        query: function query(store, type, _query) {
            return this._super(store, type, this.buildQuery(store, type.modelName, _query));
        },

        queryRecord: function queryRecord(store, type, query) {
            return this._super(store, type, this.buildQuery(store, type.modelName, query));
        },

        createRecord: function createRecord(store, type, snapshot) {
            return this.saveRecord(store, type, snapshot, { method: 'POST' });
        },

        updateRecord: function updateRecord(store, type, snapshot) {
            var options = {
                method: 'PUT',
                id: get(snapshot, 'id')
            };

            return this.saveRecord(store, type, snapshot, options);
        },

        saveRecord: function saveRecord(store, type, snapshot, options) {
            var _options = options || {};
            var url = this.buildIncludeURL(store, type.modelName, _options.id, snapshot, 'createRecord');
            var payload = this.preparePayload(store, type, snapshot);

            return this.ajax(url, _options.method, payload);
        },

        preparePayload: function preparePayload(store, type, snapshot) {
            var serializer = store.serializerFor(type.modelName);
            var payload = {};

            serializer.serializeIntoHash(payload, type, snapshot);

            return { data: payload };
        },

        buildIncludeURL: function buildIncludeURL(store, modelName, id, snapshot, requestType, query) {
            var includes = this.getEmbeddedRelations(store, modelName);
            var url = this.buildURL(modelName, id, snapshot, requestType, query);

            if (includes.length) {
                url += '?include=' + includes.join(',');
            }

            return url;
        },

        buildQuery: function buildQuery(store, modelName, options) {
            var deDupe = {};
            var toInclude = this.getEmbeddedRelations(store, modelName);
            var query = options || {};

            if (toInclude.length) {
                // If this is a find by id, build a query object and attach the includes
                if (typeof options === 'string' || typeof options === 'number') {
                    query = {};
                    query.id = options;
                    query.include = toInclude.join(',');
                } else if (typeof options === 'object' || isNone(options)) {
                    // If this is a find all (no existing query object) build one and attach
                    // the includes.
                    // If this is a find with an existing query object then merge the includes
                    // into the existing object. Existing properties and includes are preserved.
                    query = query || {};
                    toInclude = toInclude.concat(query.include ? query.include.split(',') : []);

                    toInclude.forEach(function (include) {
                        deDupe[include] = true;
                    });

                    query.include = Object.keys(deDupe).join(',');
                }
            }

            return query;
        },

        getEmbeddedRelations: function getEmbeddedRelations(store, modelName) {
            var model = store.modelFor(modelName);
            var ret = [];

            // Iterate through the model's relationships and build a list
            // of those that need to be pulled in via "include" from the API
            model.eachRelationship(function (name, meta) {
                if (meta.kind === 'hasMany' && Object.prototype.hasOwnProperty.call(meta.options, 'embedded') && meta.options.embedded === 'always') {
                    ret.push(name);
                }
            });

            return ret;
        }
    });
});
define('ghost/adapters/setting', ['exports', 'ghost/adapters/application'], function (exports, _ghostAdaptersApplication) {
    exports['default'] = _ghostAdaptersApplication['default'].extend({
        updateRecord: function updateRecord(store, type, record) {
            var data = {};
            var serializer = store.serializerFor(type.modelName);

            // remove the fake id that we added onto the model.
            delete record.id;

            // use the SettingSerializer to transform the model back into
            // an array of settings objects like the API expects
            serializer.serializeIntoHash(data, type, record);

            // use the ApplicationAdapter's buildURL method but do not
            // pass in an id.
            return this.ajax(this.buildURL(type.modelName), 'PUT', { data: data });
        }
    });
});
define('ghost/adapters/tag', ['exports', 'ghost/adapters/application', 'ghost/mixins/slug-url'], function (exports, _ghostAdaptersApplication, _ghostMixinsSlugUrl) {
  exports['default'] = _ghostAdaptersApplication['default'].extend(_ghostMixinsSlugUrl['default']);
});
define('ghost/adapters/user', ['exports', 'ghost/adapters/application', 'ghost/mixins/slug-url'], function (exports, _ghostAdaptersApplication, _ghostMixinsSlugUrl) {
    exports['default'] = _ghostAdaptersApplication['default'].extend(_ghostMixinsSlugUrl['default'], {
        find: function find(store, type, id) {
            return this.findQuery(store, type, { id: id, status: 'all' });
        },

        // TODO: This is needed because the API currently expects you to know the
        // status of the record before retrieving by ID. Quick fix is to always
        // include status=all in the query
        findRecord: function findRecord(store, type, id, snapshot) {
            var url = this.buildIncludeURL(store, type.modelName, id, snapshot, 'findRecord');

            url += '&status=all';

            return this.ajax(url, 'GET');
        },

        findAll: function findAll(store, type, id) {
            return this.query(store, type, { id: id, status: 'all' });
        }
    });
});
define('ghost/app', ['exports', 'ember', 'ember-resolver', 'ember/load-initializers', 'ghost/utils/link-component', 'ghost/utils/text-field', 'ghost/config/environment'], function (exports, _ember, _emberResolver, _emberLoadInitializers, _ghostUtilsLinkComponent, _ghostUtilsTextField, _ghostConfigEnvironment) {
    var Application = _ember['default'].Application;

    _ember['default'].MODEL_FACTORY_INJECTIONS = true;

    var App = Application.extend({
        Resolver: _emberResolver['default'],
        modulePrefix: _ghostConfigEnvironment['default'].modulePrefix,
        podModulePrefix: _ghostConfigEnvironment['default'].podModulePrefix
    });

    (0, _emberLoadInitializers['default'])(App, _ghostConfigEnvironment['default'].modulePrefix);

    exports['default'] = App;
});
define('ghost/assets/lib/uploader', ['exports', 'ember', 'ghost/utils/ghost-paths'], function (exports, _ember, _ghostUtilsGhostPaths) {
    var $ = _ember['default'].$;

    var Ghost = (0, _ghostUtilsGhostPaths['default'])();

    var UploadUi = function UploadUi($dropzone, settings) {
        var _this = this;

        var $url = '<div class="js-url"><input class="url js-upload-url gh-input" type="url" placeholder="http://"/></div>';
        var $cancel = '<a class="image-cancel icon-trash js-cancel" title="Delete"><span class="hidden">Delete</span></a>';
        var $progress = $('<div />', {
            'class': 'js-upload-progress progress progress-success active',
            role: 'progressbar',
            'aria-valuemin': '0',
            'aria-valuemax': '100'
        }).append($('<div />', {
            'class': 'js-upload-progress-bar bar',
            style: 'width:0%'
        }));

        $.extend(this, {
            complete: function complete(result) {
                var showImage = function showImage(width, height) {
                    $dropzone.find('img.js-upload-target').attr({ width: width, height: height }).css({ display: 'block' });
                    $dropzone.find('.fileupload-loading').remove();
                    $dropzone.css({ height: 'auto' });
                    $dropzone.delay(250).animate({ opacity: 100 }, 1000, function () {
                        $('.js-button-accept').prop('disabled', false);
                        _this.init();
                    });
                };

                var animateDropzone = function animateDropzone($img) {
                    $dropzone.animate({ opacity: 0 }, 250, function () {
                        $dropzone.removeClass('image-uploader').addClass('pre-image-uploader');
                        _this.removeExtras();
                        $dropzone.animate({ height: $img.height() }, 250, function () {
                            showImage($img.width(), $img.height());
                        });
                    });
                };

                var preLoadImage = function preLoadImage() {
                    var $img = $dropzone.find('img.js-upload-target').attr({ src: '', width: 'auto', height: 'auto' });

                    $progress.animate({ opacity: 0 }, 250, function () {
                        $dropzone.find('span.media').after('<img class="fileupload-loading" src="' + Ghost.subdir + '/ghost/img/loadingcat.gif" />');
                    });
                    $img.one('load', function () {
                        $dropzone.trigger('uploadsuccess', [result]);
                        animateDropzone($img);
                    }).attr('src', result);
                };
                preLoadImage();
            },

            bindFileUpload: function bindFileUpload() {
                var _this2 = this;

                $dropzone.find('.js-fileupload').fileupload().fileupload('option', {
                    url: Ghost.apiRoot + '/uploads/',
                    add: function add(e, data) {
                        /*jshint unused:false*/
                        $('.js-button-accept').prop('disabled', true);
                        $dropzone.find('.js-fileupload').removeClass('right');
                        $dropzone.find('.js-url').remove();
                        $progress.find('.js-upload-progress-bar').removeClass('fail');
                        $dropzone.trigger('uploadstart', [$dropzone.attr('id')]);
                        $dropzone.find('span.media, div.description, a.image-url, a.image-webcam').animate({ opacity: 0 }, 250, function () {
                            $dropzone.find('div.description').hide().css({ opacity: 100 });
                            if (settings.progressbar) {
                                $dropzone.find('div.js-fail').after($progress);
                                $progress.animate({ opacity: 100 }, 250);
                            }
                            data.submit();
                        });
                    },
                    dropZone: settings.fileStorage ? $dropzone : null,
                    progressall: function progressall(e, data) {
                        /*jshint unused:false*/
                        var progress = parseInt(data.loaded / data.total * 100, 10);
                        if (settings.progressbar) {
                            $dropzone.trigger('uploadprogress', [progress, data]);
                            $progress.find('.js-upload-progress-bar').css('width', progress + '%');
                        }
                    },
                    fail: function fail(e, data) {
                        /*jshint unused:false*/
                        $('.js-button-accept').prop('disabled', false);
                        $dropzone.trigger('uploadfailure', [data.result]);
                        $dropzone.find('.js-upload-progress-bar').addClass('fail');
                        if (data.jqXHR.status === 413) {
                            $dropzone.find('div.js-fail').text('The image you uploaded was larger than the maximum file size your server allows.');
                        } else if (data.jqXHR.status === 415) {
                            $dropzone.find('div.js-fail').text('The image type you uploaded is not supported. Please use .PNG, .JPG, .GIF, .SVG.');
                        } else {
                            $dropzone.find('div.js-fail').text('Something went wrong :(');
                        }
                        $dropzone.find('div.js-fail, button.js-fail').fadeIn(1500);
                        $dropzone.find('button.js-fail').on('click', function () {
                            $dropzone.css({ minHeight: 0 });
                            $dropzone.find('div.description').show();
                            _this2.removeExtras();
                            _this2.init();
                        });
                    },
                    done: function done(e, data) {
                        /*jshint unused:false*/
                        _this2.complete(data.result);
                    }
                });
            },

            buildExtras: function buildExtras() {
                if (!$dropzone.find('span.media')[0]) {
                    $dropzone.prepend('<span class="media"><span class="hidden">Image Upload</span></span>');
                }
                if (!$dropzone.find('div.description')[0]) {
                    $dropzone.append('<div class="description">Add image</div>');
                }
                if (!$dropzone.find('div.js-fail')[0]) {
                    $dropzone.append('<div class="js-fail failed" style="display: none">Something went wrong :(</div>');
                }
                if (!$dropzone.find('button.js-fail')[0]) {
                    $dropzone.append('<button class="js-fail btn btn-green" style="display: none">Try Again</button>');
                }
                if (!$dropzone.find('a.image-url')[0]) {
                    $dropzone.append('<a class="image-url" title="Add image from URL"><i class="icon-link"><span class="hidden">URL</span></i></a>');
                }
                // if (!$dropzone.find('a.image-webcam')[0]) {
                //     $dropzone.append('<a class="image-webcam" title="Add image from webcam"><span class="hidden">Webcam</span></a>');
                // }
            },

            removeExtras: function removeExtras() {
                $dropzone.find('span.media, div.js-upload-progress, a.image-url, a.image-upload, a.image-webcam, div.js-fail, button.js-fail, a.js-cancel, button.js-button-accept').remove();
            },

            initWithDropzone: function initWithDropzone() {
                var _this3 = this;

                // This is the start point if no image exists
                $dropzone.find('img.js-upload-target').css({ display: 'none' });
                $dropzone.find('div.description').show();
                $dropzone.removeClass('pre-image-uploader image-uploader-url').addClass('image-uploader');
                this.removeExtras();
                this.buildExtras();
                this.bindFileUpload();
                if (!settings.fileStorage) {
                    this.initUrl();
                    return;
                }
                $dropzone.find('a.image-url').on('click', function () {
                    _this3.initUrl();
                });
            },
            initUrl: function initUrl() {
                var _this4 = this;

                this.removeExtras();
                $dropzone.addClass('image-uploader-url').removeClass('pre-image-uploader');
                $dropzone.find('.js-fileupload').addClass('right');
                $dropzone.find('.js-cancel').on('click', function () {
                    $dropzone.find('.js-url').remove();
                    $dropzone.find('.js-fileupload').removeClass('right');
                    $dropzone.trigger('imagecleared');
                    _this4.removeExtras();
                    _this4.initWithDropzone();
                });

                if (!$dropzone.find('.js-url')[0]) {
                    $dropzone.find('div.description').before($url);
                }

                if (settings.editor) {
                    $dropzone.find('div.js-url').append('<button class="btn btn-blue js-button-accept gh-input">Save</button>');
                    $dropzone.find('div.description').hide();
                }

                $dropzone.find('.js-button-accept').on('click', function () {
                    var val = $dropzone.find('.js-upload-url').val();

                    $dropzone.find('div.description').hide();
                    $dropzone.find('.js-fileupload').removeClass('right');
                    $dropzone.find('.js-url').remove();
                    if (val === '') {
                        $dropzone.trigger('uploadsuccess', 'http://');
                        _this4.initWithDropzone();
                    } else {
                        _this4.complete(val);
                    }
                });

                // Only show the toggle icon if there is a dropzone mode to go back to
                if (settings.fileStorage !== false) {
                    $dropzone.append('<a class="image-upload icon-photos" title="Add image"><span class="hidden">Upload</span></a>');
                }

                $dropzone.find('a.image-upload').on('click', function () {
                    $dropzone.find('.js-url').remove();
                    $dropzone.find('.js-fileupload').removeClass('right');
                    _this4.initWithDropzone();
                });
            },

            initWithImage: function initWithImage() {
                var _this5 = this;

                // This is the start point if an image already exists
                this.removeExtras();
                $dropzone.removeClass('image-uploader image-uploader-url').addClass('pre-image-uploader');
                $dropzone.find('div.description').hide();
                $dropzone.find('img.js-upload-target').show();
                $dropzone.append($cancel);
                $dropzone.find('.js-cancel').on('click', function () {
                    $dropzone.find('img.js-upload-target').attr({ src: '' });
                    $dropzone.find('div.description').show();
                    $dropzone.trigger('imagecleared');

                    $dropzone.trigger('uploadsuccess', 'http://');
                    _this5.initWithDropzone();
                });
            },

            init: function init() {
                var imageTarget = $dropzone.find('img.js-upload-target');
                // First check if field image is defined by checking for js-upload-target class
                if (!imageTarget[0]) {
                    // This ensures there is an image we can hook into to display uploaded image
                    $dropzone.prepend('<img class="js-upload-target" style="display: none"  src="" />');
                }
                $('.js-button-accept').prop('disabled', false);
                if (imageTarget.attr('src') === '' || imageTarget.attr('src') === undefined) {
                    this.initWithDropzone();
                } else {
                    this.initWithImage();
                }
            },

            reset: function reset() {
                $dropzone.find('.js-url').remove();
                $dropzone.find('.js-fileupload').removeClass('right');
                this.removeExtras();
                this.initWithDropzone();
            }
        });
    };

    exports['default'] = function (options) {
        var settings = $.extend({
            progressbar: true,
            editor: false,
            fileStorage: true
        }, options);

        return this.each(function () {
            var $dropzone = $(this);
            var ui = new UploadUi($dropzone, settings);
            $(this).attr('data-uploaderui', true);
            this.uploaderUi = ui;
            ui.init();
        });
    };
});
define('ghost/authenticators/oauth2', ['exports', 'ember', 'ember-simple-auth/authenticators/oauth2-password-grant'], function (exports, _ember, _emberSimpleAuthAuthenticatorsOauth2PasswordGrant) {
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    exports['default'] = _emberSimpleAuthAuthenticatorsOauth2PasswordGrant['default'].extend({
        config: inject.service(),
        ghostPaths: inject.service('ghost-paths'),

        serverTokenEndpoint: computed('ghostPaths.apiRoot', function () {
            return this.get('ghostPaths.apiRoot') + '/authentication/token';
        }),

        serverTokenRevocationEndpoint: computed('ghostPaths.apiRoot', function () {
            return this.get('ghostPaths.apiRoot') + '/authentication/revoke';
        }),

        makeRequest: function makeRequest(url, data) {
            /* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
            data.client_id = this.get('config.clientId');
            data.client_secret = this.get('config.clientSecret');
            /* jscs:enable requireCamelCaseOrUpperCaseIdentifiers */
            return this._super(url, data);
        }
    });
});
define('ghost/authorizers/oauth2', ['exports', 'ember-simple-auth/authorizers/oauth2-bearer'], function (exports, _emberSimpleAuthAuthorizersOauth2Bearer) {
  exports['default'] = _emberSimpleAuthAuthorizersOauth2Bearer['default'];
});
define('ghost/components/app-version', ['exports', 'ember-cli-app-version/components/app-version', 'ghost/config/environment'], function (exports, _emberCliAppVersionComponentsAppVersion, _ghostConfigEnvironment) {

  var name = _ghostConfigEnvironment['default'].APP.name;
  var version = _ghostConfigEnvironment['default'].APP.version;

  exports['default'] = _emberCliAppVersionComponentsAppVersion['default'].extend({
    version: version,
    name: name
  });
});
define('ghost/components/ember-selectize', ['exports', 'ember-cli-selectize/components/ember-selectize'], function (exports, _emberCliSelectizeComponentsEmberSelectize) {
  exports['default'] = _emberCliSelectizeComponentsEmberSelectize['default'];
});
define('ghost/components/gh-activating-list-item', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var on = _ember['default'].on;
    var run = _ember['default'].run;
    exports['default'] = Component.extend({
        tagName: 'li',
        classNameBindings: ['active'],
        active: false,
        linkClasses: null,

        unfocusLink: on('click', function () {
            this.$('a').blur();
        }),

        actions: {
            setActive: function setActive(value) {
                run.schedule('afterRender', this, function () {
                    this.set('active', value);
                });
            }
        }
    });
});
define('ghost/components/gh-alert', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    exports['default'] = Component.extend({
        tagName: 'article',
        classNames: ['gh-alert'],
        classNameBindings: ['typeClass'],

        notifications: inject.service(),

        typeClass: computed('message.type', function () {
            var type = this.get('message.type');
            var classes = '';
            var typeMapping = undefined;

            typeMapping = {
                success: 'green',
                error: 'red',
                warn: 'yellow',
                info: 'blue'
            };

            if (typeMapping[type] !== undefined) {
                classes += 'gh-alert-' + typeMapping[type];
            }

            return classes;
        }),

        actions: {
            closeNotification: function closeNotification() {
                this.get('notifications').closeNotification(this.get('message'));
            }
        }
    });
});
define('ghost/components/gh-alerts', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    var observer = _ember['default'].observer;
    var alias = computed.alias;
    exports['default'] = Component.extend({
        tagName: 'aside',
        classNames: 'gh-alerts',

        notifications: inject.service(),

        messages: alias('notifications.alerts'),

        messageCountObserver: observer('messages.[]', function () {
            this.sendAction('notify', this.get('messages').length);
        })
    });
});
define('ghost/components/gh-app', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var observer = _ember['default'].observer;
    exports['default'] = Component.extend({
        classNames: ['gh-app'],

        showSettingsMenu: false,

        toggleSettingsMenuBodyClass: observer('showSettingsMenu', function () {
            var showSettingsMenu = this.get('showSettingsMenu');

            _ember['default'].$('body').toggleClass('settings-menu-expanded', showSettingsMenu);
        })
    });
});
define('ghost/components/gh-blog-url', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var inject = _ember['default'].inject;
    exports['default'] = Component.extend({
        tagName: '',

        config: inject.service()
    });
});
define('ghost/components/gh-cm-editor', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    exports['default'] = Component.extend({
        classNameBindings: ['isFocused:focused'],

        value: '', // make sure a value exists
        isFocused: false,

        // options for the editor
        lineNumbers: true,
        indentUnit: 4,
        mode: 'htmlmixed',
        theme: 'xq-light',

        _editor: null, // reference to CodeMirror editor

        didInsertElement: function didInsertElement() {
            var _this = this;

            this._super.apply(this, arguments);

            var options = this.getProperties('lineNumbers', 'indentUnit', 'mode', 'theme');
            var editor = new CodeMirror(this.get('element'), options);

            editor.getDoc().setValue(this.get('value'));

            // events
            editor.on('focus', _ember['default'].run.bind(this, 'set', 'isFocused', true));
            editor.on('blur', _ember['default'].run.bind(this, 'set', 'isFocused', false));
            editor.on('change', function () {
                _ember['default'].run(_this, function () {
                    this.set('value', editor.getDoc().getValue());
                });
            });

            this._editor = editor;
        },

        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);

            var editor = this._editor.getWrapperElement();
            editor.parentNode.removeChild(editor);
            this._editor = null;
        }
    });
});
/* global CodeMirror */
define('ghost/components/gh-content-cover', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    exports['default'] = Component.extend({
        classNames: ['content-cover'],

        onClick: null,
        onMouseEnter: null,

        click: function click() {
            this.sendAction('onClick');
        },

        mouseEnter: function mouseEnter() {
            this.sendAction('onMouseEnter');
        }
    });
});
/*

Implements a div for covering the page content
when in a menu context that, for example,
should be closed when the user clicks elsewhere.

Example:
```
{{gh-content-cover onClick="closeMenus" onMouseEnter="closeAutoNav"}}
```
**/
define('ghost/components/gh-content-preview-content', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    exports['default'] = Component.extend({
        classNames: ['content-preview-content'],

        content: null,

        didReceiveAttrs: function didReceiveAttrs(options) {
            this._super.apply(this, arguments);

            // adjust when didReceiveAttrs gets both newAttrs and oldAttrs
            if (options.newAttrs.content && this.get('content') !== options.newAttrs.content.value) {
                var el = this.$();

                if (el) {
                    el.closest('.content-preview').scrollTop(0);
                }
            }
        }
    });
});
define('ghost/components/gh-content-view-container', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    exports['default'] = Component.extend({
        tagName: 'section',
        classNames: ['gh-view', 'content-view-container'],

        mediaQueries: inject.service(),
        previewIsHidden: computed.reads('mediaQueries.maxWidth900')
    });
});
define('ghost/components/gh-datetime-input', ['exports', 'ember', 'ghost/mixins/text-input', 'ghost/utils/bound-one-way', 'ghost/utils/date-formatting'], function (exports, _ember, _ghostMixinsTextInput, _ghostUtilsBoundOneWay, _ghostUtilsDateFormatting) {
    var Component = _ember['default'].Component;
    exports['default'] = Component.extend(_ghostMixinsTextInput['default'], {
        tagName: 'span',
        classNames: 'input-icon icon-calendar',

        datetime: (0, _ghostUtilsBoundOneWay['default'])('value'),
        inputClass: null,
        inputId: null,
        inputName: null,

        didReceiveAttrs: function didReceiveAttrs() {
            var datetime = this.get('datetime') || moment();

            if (!this.attrs.update) {
                throw new Error('You must provide an `update` action to `{{' + this.templateName + '}}`.');
            }

            this.set('datetime', (0, _ghostUtilsDateFormatting.formatDate)(datetime));
        },

        focusOut: function focusOut() {
            var datetime = this.get('datetime');

            this.attrs.update(datetime);
        }
    });
});
define('ghost/components/gh-dropdown-button', ['exports', 'ember', 'ghost/mixins/dropdown-mixin'], function (exports, _ember, _ghostMixinsDropdownMixin) {
    var Component = _ember['default'].Component;
    var inject = _ember['default'].inject;
    exports['default'] = Component.extend(_ghostMixinsDropdownMixin['default'], {
        tagName: 'button',
        attributeBindings: 'role',
        role: 'button',

        // matches with the dropdown this button toggles
        dropdownName: null,

        dropdown: inject.service(),

        // Notify dropdown service this dropdown should be toggled
        click: function click(event) {
            this._super(event);
            this.get('dropdown').toggleDropdown(this.get('dropdownName'), this);
        }
    });
});
define('ghost/components/gh-dropdown', ['exports', 'ember', 'ghost/mixins/dropdown-mixin'], function (exports, _ember, _ghostMixinsDropdownMixin) {
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    exports['default'] = Component.extend(_ghostMixinsDropdownMixin['default'], {
        classNames: 'dropdown',
        classNameBindings: ['fadeIn:fade-in-scale:fade-out', 'isOpen:open:closed'],

        name: null,
        closeOnClick: false,

        // Helps track the user re-opening the menu while it's fading out.
        closing: false,

        // Helps track whether the dropdown is open or closes, or in a transition to either
        isOpen: false,

        // Managed the toggle between the fade-in and fade-out classes
        fadeIn: computed('isOpen', 'closing', function () {
            return this.get('isOpen') && !this.get('closing');
        }),

        dropdown: inject.service(),

        open: function open() {
            this.set('isOpen', true);
            this.set('closing', false);
            this.set('button.isOpen', true);
        },

        close: function close() {
            var _this = this;

            this.set('closing', true);

            if (this.get('button')) {
                this.set('button.isOpen', false);
            }

            this.$().on('animationend webkitAnimationEnd oanimationend MSAnimationEnd', function (event) {
                if (event.originalEvent.animationName === 'fade-out') {
                    _ember['default'].run(_this, function () {
                        if (this.get('closing')) {
                            this.set('isOpen', false);
                            this.set('closing', false);
                        }
                    });
                }
            });
        },

        // Called by the dropdown service when any dropdown button is clicked.
        toggle: function toggle(options) {
            var isClosing = this.get('closing');
            var isOpen = this.get('isOpen');
            var name = this.get('name');
            var targetDropdownName = options.target;
            var button = this.get('button');

            if (name === targetDropdownName && (!isOpen || isClosing)) {
                if (!button) {
                    button = options.button;
                    this.set('button', button);
                }
                this.open();
            } else if (isOpen) {
                this.close();
            }
        },

        click: function click(event) {
            this._super(event);

            if (this.get('closeOnClick')) {
                return this.close();
            }
        },

        didInsertElement: function didInsertElement() {
            var dropdownService = this.get('dropdown');

            this._super.apply(this, arguments);

            dropdownService.on('close', this, this.close);
            dropdownService.on('toggle', this, this.toggle);
        },

        willDestroyElement: function willDestroyElement() {
            var dropdownService = this.get('dropdown');

            this._super.apply(this, arguments);

            dropdownService.off('close', this, this.close);
            dropdownService.off('toggle', this, this.toggle);
        }
    });
});
define('ghost/components/gh-ed-editor', ['exports', 'ember', 'ghost/mixins/ed-editor-api', 'ghost/mixins/ed-editor-shortcuts', 'ghost/mixins/ed-editor-scroll'], function (exports, _ember, _ghostMixinsEdEditorApi, _ghostMixinsEdEditorShortcuts, _ghostMixinsEdEditorScroll) {
    var TextArea = _ember['default'].TextArea;
    var run = _ember['default'].run;
    exports['default'] = TextArea.extend(_ghostMixinsEdEditorApi['default'], _ghostMixinsEdEditorShortcuts['default'], _ghostMixinsEdEditorScroll['default'], {
        focus: false,

        /**
         * Tell the controller about focusIn events, will trigger an autosave on a new document
         */
        focusIn: function focusIn() {
            this.sendAction('onFocusIn');
        },

        /**
         * Sets the focus of the textarea if needed
         */
        setFocus: function setFocus() {
            if (this.get('focus')) {
                this.$().val(this.$().val()).focus();
            }
        },

        /**
         * Sets up properties at render time
         */
        didInsertElement: function didInsertElement() {
            this._super.apply(this, arguments);

            this.setFocus();

            this.sendAction('setEditor', this);

            run.scheduleOnce('afterRender', this, this.afterRenderEvent);
        },

        afterRenderEvent: function afterRenderEvent() {
            if (this.get('focus') && this.get('focusCursorAtEnd')) {
                this.setSelection('end');
            }
        },

        /**
         * Disable editing in the textarea (used while an upload is in progress)
         */
        disable: function disable() {
            var textarea = this.get('element');
            textarea.setAttribute('readonly', 'readonly');
        },

        /**
         * Reenable editing in the textarea
         */
        enable: function enable() {
            var textarea = this.get('element');
            textarea.removeAttribute('readonly');
        }
    });
});
define('ghost/components/gh-ed-preview', ['exports', 'ember', 'ghost/assets/lib/uploader'], function (exports, _ember, _ghostAssetsLibUploader) {
    var $ = _ember['default'].$;
    var Component = _ember['default'].Component;
    var inject = _ember['default'].inject;
    var run = _ember['default'].run;
    exports['default'] = Component.extend({
        config: inject.service(),

        _scrollWrapper: null,

        didInsertElement: function didInsertElement() {
            this._super.apply(this, arguments);
            this._scrollWrapper = this.$().closest('.entry-preview-content');
            this.adjustScrollPosition(this.get('scrollPosition'));
            run.scheduleOnce('afterRender', this, this.dropzoneHandler);
        },

        didReceiveAttrs: function didReceiveAttrs(attrs) {
            this._super.apply(this, arguments);

            if (!attrs.oldAttrs) {
                return;
            }

            if (attrs.newAttrs.scrollPosition && attrs.newAttrs.scrollPosition.value !== attrs.oldAttrs.scrollPosition.value) {
                this.adjustScrollPosition(attrs.newAttrs.scrollPosition.value);
            }

            if (attrs.newAttrs.markdown.value !== attrs.oldAttrs.markdown.value) {
                run.scheduleOnce('afterRender', this, this.dropzoneHandler);
            }
        },

        adjustScrollPosition: function adjustScrollPosition(scrollPosition) {
            var scrollWrapper = this._scrollWrapper;

            if (scrollWrapper) {
                scrollWrapper.scrollTop(scrollPosition);
            }
        },

        dropzoneHandler: function dropzoneHandler() {
            var dropzones = $('.js-drop-zone[data-uploaderui!="true"]');

            if (dropzones.length) {
                _ghostAssetsLibUploader['default'].call(dropzones, {
                    editor: true,
                    fileStorage: this.get('config.fileStorage')
                });

                dropzones.on('uploadstart', run.bind(this, 'sendAction', 'uploadStarted'));
                dropzones.on('uploadfailure', run.bind(this, 'sendAction', 'uploadFinished'));
                dropzones.on('uploadsuccess', run.bind(this, 'sendAction', 'uploadFinished'));
                dropzones.on('uploadsuccess', run.bind(this, 'sendAction', 'uploadSuccess'));

                // Set the current height so we can listen
                this.sendAction('updateHeight', this.$().height());
            }
        }
    });
});
define('ghost/components/gh-editor-save-button', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;
    exports['default'] = Component.extend({
        tagName: 'section',
        classNames: ['splitbtn', 'js-publish-splitbutton'],
        classNameBindings: ['isNew:unsaved'],

        isNew: null,
        isPublished: null,
        willPublish: null,
        postOrPage: null,
        submitting: false,

        // Tracks whether we're going to change the state of the post on save
        isDangerous: computed('isPublished', 'willPublish', function () {
            return this.get('isPublished') !== this.get('willPublish');
        }),

        publishText: computed('isPublished', 'postOrPage', function () {
            return this.get('isPublished') ? 'Update ' + this.get('postOrPage') : 'Publish Now';
        }),

        draftText: computed('isPublished', function () {
            return this.get('isPublished') ? 'Unpublish' : 'Save Draft';
        }),

        deleteText: computed('postOrPage', function () {
            return 'Delete ' + this.get('postOrPage');
        }),

        saveText: computed('willPublish', 'publishText', 'draftText', function () {
            return this.get('willPublish') ? this.get('publishText') : this.get('draftText');
        }),

        actions: {
            save: function save() {
                this.sendAction('save');
            },

            setSaveType: function setSaveType(saveType) {
                this.sendAction('setSaveType', saveType);
            },

            'delete': function _delete() {
                this.sendAction('delete');
            }
        }
    });
});
define('ghost/components/gh-editor', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;
    var run = _ember['default'].run;
    var equal = computed.equal;
    exports['default'] = Component.extend({
        tagName: 'section',
        classNames: ['gh-view'],

        // updated when gh-ed-editor component scrolls
        editorScrollInfo: null,
        // updated when markdown is rendered
        height: null,
        activeTab: 'markdown',

        markdownActive: equal('activeTab', 'markdown'),
        previewActive: equal('activeTab', 'preview'),

        // HTML Preview listens to scrollPosition and updates its scrollTop value
        // This property receives scrollInfo from the textEditor, and height from the preview pane, and will update the
        // scrollPosition value such that when either scrolling or typing-at-the-end of the text editor the preview pane
        // stays in sync
        scrollPosition: computed('editorScrollInfo', 'height', function () {
            var scrollInfo = this.get('editorScrollInfo');
            var $previewContent = this.get('$previewContent');
            var $previewViewPort = this.get('$previewViewPort');

            if (!scrollInfo || !$previewContent || !$previewViewPort) {
                return 0;
            }

            var previewHeight = $previewContent.height() - $previewViewPort.height();
            var previewPosition = undefined,
                ratio = undefined;

            ratio = previewHeight / scrollInfo.diff;
            previewPosition = scrollInfo.top * ratio;

            return previewPosition;
        }),

        scheduleAfterRender: function scheduleAfterRender() {
            run.scheduleOnce('afterRender', this, this.afterRenderEvent);
        },

        didInsertElement: function didInsertElement() {
            this._super.apply(this, arguments);
            this.scheduleAfterRender();
        },

        afterRenderEvent: function afterRenderEvent() {
            var $previewViewPort = this.$('.js-entry-preview-content');

            // cache these elements for use in other methods
            this.set('$previewViewPort', $previewViewPort);
            this.set('$previewContent', this.$('.js-rendered-markdown'));
        },

        actions: {
            selectTab: function selectTab(tab) {
                this.set('activeTab', tab);
            }
        }
    });
});
define('ghost/components/gh-error-message', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;
    var isEmpty = _ember['default'].isEmpty;

    /**
     * Renders one random error message when passed a DS.Errors object
     * and a property name. The message will be one of the ones associated with
     * that specific property. If there are no errors associated with the property,
     * nothing will be rendered.
     * @param  {DS.Errors} errors   The DS.Errors object
     * @param  {string} property    The property name
     */
    exports['default'] = Component.extend({
        tagName: 'p',
        classNames: ['response'],

        errors: null,
        property: '',

        isVisible: computed.notEmpty('errors'),

        message: computed('errors.[]', 'property', function () {
            var property = this.get('property');
            var errors = this.get('errors');
            var messages = [];
            var index = undefined;

            if (!isEmpty(errors) && errors.get(property)) {
                errors.get(property).forEach(function (error) {
                    messages.push(error);
                });
                index = Math.floor(Math.random() * messages.length);
                return messages[index].message;
            }
        })
    });
});
define('ghost/components/gh-file-upload', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    exports['default'] = Component.extend({
        _file: null,

        uploadButtonText: 'Text',
        uploadButtonDisabled: true,

        onUpload: null,
        onAdd: null,

        shouldResetForm: true,

        change: function change(event) {
            this.set('uploadButtonDisabled', false);
            this.sendAction('onAdd');
            this._file = event.target.files[0];
        },

        actions: {
            upload: function upload() {
                if (!this.get('uploadButtonDisabled') && this._file) {
                    this.sendAction('onUpload', this._file);
                }

                // Prevent double post by disabling the button.
                this.set('uploadButtonDisabled', true);

                // Reset form
                if (this.get('shouldResetForm')) {
                    this.$().closest('form')[0].reset();
                }
            }
        }
    });
});
define('ghost/components/gh-form-group', ['exports', 'ghost/components/gh-validation-status-container'], function (exports, _ghostComponentsGhValidationStatusContainer) {
    exports['default'] = _ghostComponentsGhValidationStatusContainer['default'].extend({
        classNames: 'form-group'
    });
});
define('ghost/components/gh-infinite-scroll-box', ['exports', 'ember', 'ghost/mixins/infinite-scroll'], function (exports, _ember, _ghostMixinsInfiniteScroll) {
  var Component = _ember['default'].Component;
  exports['default'] = Component.extend(_ghostMixinsInfiniteScroll['default'], {});
});
define('ghost/components/gh-infinite-scroll', ['exports', 'ember', 'ghost/mixins/infinite-scroll'], function (exports, _ember, _ghostMixinsInfiniteScroll) {
  var Component = _ember['default'].Component;
  exports['default'] = Component.extend(_ghostMixinsInfiniteScroll['default']);
});
define('ghost/components/gh-input', ['exports', 'ember', 'ghost/mixins/text-input'], function (exports, _ember, _ghostMixinsTextInput) {
    var TextField = _ember['default'].TextField;
    exports['default'] = TextField.extend(_ghostMixinsTextInput['default'], {
        classNames: 'gh-input'
    });
});
define('ghost/components/gh-main', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    exports['default'] = Component.extend({
        tagName: 'main',
        classNames: ['gh-main'],
        ariaRole: 'main',

        mouseEnter: function mouseEnter() {
            this.sendAction('onMouseEnter');
        }
    });
});
define('ghost/components/gh-menu-toggle', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;

    /*
        This cute little component has two jobs.
    
        On desktop, it toggles autoNav behaviour. It tracks
        that state via the maximise property, and uses the
        state to render the appropriate icon.
    
        On mobile, it renders a closing icon, and clicking it
        closes the mobile menu
    */
    exports['default'] = Component.extend({
        classNames: ['gh-menu-toggle'],

        mediaQueries: inject.service(),
        isMobile: computed.reads('mediaQueries.isMobile'),
        maximise: false,

        iconClass: computed('maximise', 'isMobile', function () {
            if (this.get('maximise') && !this.get('isMobile')) {
                return 'icon-maximise';
            } else {
                return 'icon-minimise';
            }
        }),

        click: function click() {
            if (this.get('isMobile')) {
                this.sendAction('mobileAction');
            } else {
                this.toggleProperty('maximise');
                this.sendAction('desktopAction');
            }
        }
    });
});
define('ghost/components/gh-modal-dialog', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;

    function K() {
        return this;
    }

    exports['default'] = Component.extend({

        confirmaccept: 'confirmAccept',
        confirmreject: 'confirmReject',

        klass: computed('type', 'style', function () {
            var classNames = [];

            classNames.push(this.get('type') ? 'modal-' + this.get('type') : 'modal');

            if (this.get('style')) {
                this.get('style').split(',').forEach(function (style) {
                    classNames.push('modal-style-' + style);
                });
            }

            return classNames.join(' ');
        }),

        acceptButtonClass: computed('confirm.accept.buttonClass', function () {
            return this.get('confirm.accept.buttonClass') ? this.get('confirm.accept.buttonClass') : 'btn btn-green';
        }),

        rejectButtonClass: computed('confirm.reject.buttonClass', function () {
            return this.get('confirm.reject.buttonClass') ? this.get('confirm.reject.buttonClass') : 'btn btn-red';
        }),

        didInsertElement: function didInsertElement() {
            this._super.apply(this, arguments);
            this.$('.js-modal-container, .js-modal-background').addClass('fade-in open');
            this.$('.js-modal').addClass('open');
        },

        close: function close() {
            var _this = this;

            this.$('.js-modal, .js-modal-background').removeClass('fade-in').addClass('fade-out');

            // The background should always be the last thing to fade out, so check on that instead of the content
            this.$('.js-modal-background').on('animationend webkitAnimationEnd oanimationend MSAnimationEnd', function (event) {
                if (event.originalEvent.animationName === 'fade-out') {
                    _this.$('.js-modal, .js-modal-background').removeClass('open');
                }
            });

            this.sendAction();
        },

        actions: {
            closeModal: function closeModal() {
                this.close();
            },

            confirm: function confirm(type) {
                this.sendAction('confirm' + type);
                this.close();
            },

            noBubble: K
        }
    });
});
define('ghost/components/gh-nav-menu', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var inject = _ember['default'].inject;
    exports['default'] = Component.extend({
        tagName: 'nav',
        classNames: ['gh-nav'],
        classNameBindings: ['open'],

        open: false,

        config: inject.service(),
        session: inject.service(),

        mouseEnter: function mouseEnter() {
            this.sendAction('onMouseEnter');
        },

        actions: {
            toggleAutoNav: function toggleAutoNav() {
                this.sendAction('toggleMaximise');
            },

            openModal: function openModal(modal) {
                this.sendAction('openModal', modal);
            },

            closeMobileMenu: function closeMobileMenu() {
                this.sendAction('closeMobileMenu');
            },

            openAutoNav: function openAutoNav() {
                this.sendAction('openAutoNav');
            }
        }
    });
});
define('ghost/components/gh-navigation', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var run = _ember['default'].run;
    exports['default'] = Component.extend({
        tagName: 'section',
        classNames: 'gh-view',

        didInsertElement: function didInsertElement() {
            var navContainer = this.$('.js-gh-blognav');
            var navElements = '.gh-blognav-item:not(.gh-blognav-item:last-child)';

            this._super.apply(this, arguments);

            navContainer.sortable({
                handle: '.gh-blognav-grab',
                items: navElements,

                start: function start(event, ui) {
                    run(function () {
                        ui.item.data('start-index', ui.item.index());
                    });
                },

                update: function update(event, ui) {
                    var _this = this;

                    run(function () {
                        _this.sendAction('moveItem', ui.item.data('start-index'), ui.item.index());
                    });
                }
            });
        },

        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);
            this.$('.ui-sortable').sortable('destroy');
        }
    });
});
define('ghost/components/gh-navitem-url-input', ['exports', 'ember'], function (exports, _ember) {
    var TextField = _ember['default'].TextField;
    var computed = _ember['default'].computed;
    var run = _ember['default'].run;

    var joinUrlParts = function joinUrlParts(url, path) {
        if (path[0] !== '/' && url.slice(-1) !== '/') {
            path = '/' + path;
        } else if (path[0] === '/' && url.slice(-1) === '/') {
            path = path.slice(1);
        }

        return url + path;
    };

    var isRelative = function isRelative(url) {
        // "protocol://", "//example.com", "scheme:", "#anchor", & invalid paths
        // should all be treated as absolute
        return !url.match(/\s/) && !validator.isURL(url) && !url.match(/^(\/\/|#|[a-zA-Z0-9\-]+:)/);
    };

    exports['default'] = TextField.extend({
        classNames: 'gh-input',
        classNameBindings: ['fakePlaceholder'],

        isBaseUrl: computed('baseUrl', 'value', function () {
            return this.get('baseUrl') === this.get('value');
        }),

        fakePlaceholder: computed('isBaseUrl', 'hasFocus', function () {
            return this.get('isBaseUrl') && this.get('last') && !this.get('hasFocus');
        }),

        didReceiveAttrs: function didReceiveAttrs() {
            this._super.apply(this, arguments);

            var baseUrl = this.get('baseUrl');
            var url = this.get('url');

            // if we have a relative url, create the absolute url to be displayed in the input
            if (isRelative(url)) {
                url = joinUrlParts(baseUrl, url);
            }

            this.set('value', url);
        },

        focusIn: function focusIn(event) {
            this.set('hasFocus', true);

            if (this.get('isBaseUrl')) {
                // position the cursor at the end of the input
                run.next(function (el) {
                    var length = el.value.length;

                    el.setSelectionRange(length, length);
                }, event.target);
            }
        },

        keyDown: function keyDown(event) {
            // delete the "placeholder" value all at once
            if (this.get('isBaseUrl') && (event.keyCode === 8 || event.keyCode === 46)) {
                this.set('value', '');

                event.preventDefault();
            }

            // CMD-S
            if (event.keyCode === 83 && event.metaKey) {
                this.notifyUrlChanged();
            }
        },

        keyPress: function keyPress(event) {
            // enter key
            if (event.keyCode === 13) {
                event.preventDefault();
                this.notifyUrlChanged();
            }

            return true;
        },

        focusOut: function focusOut() {
            this.set('hasFocus', false);

            this.notifyUrlChanged();
        },

        notifyUrlChanged: function notifyUrlChanged() {
            var url = this.get('value').trim();
            var urlParts = document.createElement('a');
            var baseUrl = this.get('baseUrl');
            var baseUrlParts = document.createElement('a');

            // ensure value property is trimmed
            this.set('value', url);

            // leverage the browser's native URI parsing
            urlParts.href = url;
            baseUrlParts.href = baseUrl;

            // if we have an email address, add the mailto:
            if (validator.isEmail(url)) {
                url = 'mailto:' + url;
                this.set('value', url);
            }

            // if we have a relative url, create the absolute url to be displayed in the input
            if (isRelative(url)) {
                url = joinUrlParts(baseUrl, url);
                this.set('value', url);
            }

            // get our baseUrl relativity checks in order
            var isOnSameHost = urlParts.host === baseUrlParts.host;
            var isAnchorLink = url.match(/^#/);
            var isRelativeToBasePath = urlParts.pathname.indexOf(baseUrlParts.pathname) === 0;

            // if our pathname is only missing a trailing / mark it as relative
            if (urlParts.pathname + '/' === baseUrlParts.pathname) {
                isRelativeToBasePath = true;
            }

            // if relative to baseUrl, remove the base url before sending to action
            if (!isAnchorLink && isOnSameHost && isRelativeToBasePath) {
                url = url.replace(/^[a-zA-Z0-9\-]+:/, '');
                url = url.replace(/^\/\//, '');
                url = url.replace(baseUrlParts.host, '');
                url = url.replace(baseUrlParts.pathname, '');

                // handle case where url path is same as baseUrl path but missing trailing slash
                if (urlParts.pathname.slice(-1) !== '/') {
                    url = url.replace(baseUrlParts.pathname.slice(0, -1), '');
                }

                if (!url.match(/^\//)) {
                    url = '/' + url;
                }
            }

            this.sendAction('change', url);
        }
    });
});
define('ghost/components/gh-navitem', ['exports', 'ember', 'ghost/mixins/validation-state'], function (exports, _ember, _ghostMixinsValidationState) {
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;
    exports['default'] = Component.extend(_ghostMixinsValidationState['default'], {
        classNames: 'gh-blognav-item',
        classNameBindings: ['errorClass'],

        attributeBindings: ['order:data-order'],
        order: computed.readOnly('navItem.order'),
        errors: computed.readOnly('navItem.errors'),

        errorClass: computed('hasError', function () {
            if (this.get('hasError')) {
                return 'gh-blognav-item--error';
            }
        }),

        keyPress: function keyPress(event) {
            // enter key
            if (event.keyCode === 13) {
                event.preventDefault();
                this.send('addItem');
            }

            this.get('navItem.errors').clear();
        },

        actions: {
            addItem: function addItem() {
                this.sendAction('addItem');
            },

            deleteItem: function deleteItem(item) {
                this.sendAction('deleteItem', item);
            },

            updateUrl: function updateUrl(value) {
                this.sendAction('updateUrl', value, this.get('navItem'));
            }
        }
    });
});
define('ghost/components/gh-notification', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    exports['default'] = Component.extend({
        tagName: 'article',
        classNames: ['gh-notification', 'gh-notification-passive'],
        classNameBindings: ['typeClass'],

        message: null,

        notifications: inject.service(),

        typeClass: computed('message.type', function () {
            var type = this.get('message.type');
            var classes = '';
            var typeMapping = undefined;

            typeMapping = {
                success: 'green',
                error: 'red',
                warn: 'yellow'
            };

            if (typeMapping[type] !== undefined) {
                classes += 'gh-notification-' + typeMapping[type];
            }

            return classes;
        }),

        didInsertElement: function didInsertElement() {
            var _this = this;

            this._super.apply(this, arguments);

            this.$().on('animationend webkitAnimationEnd oanimationend MSAnimationEnd', function (event) {
                if (event.originalEvent.animationName === 'fade-out') {
                    _this.get('notifications').closeNotification(_this.get('message'));
                }
            });
        },

        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);
            this.$().off('animationend webkitAnimationEnd oanimationend MSAnimationEnd');
        },

        actions: {
            closeNotification: function closeNotification() {
                this.get('notifications').closeNotification(this.get('message'));
            }
        }
    });
});
define('ghost/components/gh-notifications', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    var alias = computed.alias;
    exports['default'] = Component.extend({
        tagName: 'aside',
        classNames: 'gh-notifications',

        notifications: inject.service(),

        messages: alias('notifications.notifications')
    });
});
define('ghost/components/gh-popover-button', ['exports', 'ember', 'ghost/components/gh-dropdown-button'], function (exports, _ember, _ghostComponentsGhDropdownButton) {
    var inject = _ember['default'].inject;

    function K() {
        return this;
    }

    exports['default'] = _ghostComponentsGhDropdownButton['default'].extend({
        dropdown: inject.service(),

        click: K,

        mouseEnter: function mouseEnter() {
            this._super.apply(this, arguments);
            this.get('dropdown').toggleDropdown(this.get('popoverName'), this);
        },

        mouseLeave: function mouseLeave() {
            this._super.apply(this, arguments);
            this.get('dropdown').toggleDropdown(this.get('popoverName'), this);
        }
    });
});
define('ghost/components/gh-popover', ['exports', 'ember', 'ghost/components/gh-dropdown'], function (exports, _ember, _ghostComponentsGhDropdown) {
    var inject = _ember['default'].inject;
    exports['default'] = _ghostComponentsGhDropdown['default'].extend({
        classNames: 'ghost-popover',
        dropdown: inject.service()
    });
});
define('ghost/components/gh-posts-list-item', ['exports', 'ember'], function (exports, _ember) {
    var $ = _ember['default'].$;
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    var alias = computed.alias;
    var equal = computed.equal;
    exports['default'] = Component.extend({
        tagName: 'li',
        classNameBindings: ['active', 'isFeatured:featured', 'isPage:page'],

        post: null,
        active: false,
        previewIsHidden: false,

        isFeatured: alias('post.featured'),
        isPage: alias('post.page'),
        isPublished: equal('post.status', 'published'),

        ghostPaths: inject.service('ghost-paths'),

        authorName: computed('post.author.name', 'post.author.email', function () {
            return this.get('post.author.name') || this.get('post.author.email');
        }),

        authorAvatar: computed('post.author.image', function () {
            return this.get('post.author.image') || this.get('ghostPaths.url').asset('/shared/img/user-image.png');
        }),

        authorAvatarBackground: computed('authorAvatar', function () {
            return _ember['default'].String.htmlSafe('background-image: url(' + this.get('authorAvatar') + ')');
        }),

        viewOrEdit: computed('previewIsHidden', function () {
            return this.get('previewIsHidden') ? 'editor.edit' : 'posts.post';
        }),

        click: function click() {
            this.sendAction('onClick', this.get('post'));
        },

        doubleClick: function doubleClick() {
            this.sendAction('onDoubleClick', this.get('post'));
        },

        didInsertElement: function didInsertElement() {
            this._super.apply(this, arguments);
            this.addObserver('active', this, this.scrollIntoView);
        },

        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);
            this.removeObserver('active', this, this.scrollIntoView);
        },

        scrollIntoView: function scrollIntoView() {
            if (!this.get('active')) {
                return;
            }

            var element = this.$();
            var offset = element.offset().top;
            var elementHeight = element.height();
            var container = $('.js-content-scrollbox');
            var containerHeight = container.height();
            var currentScroll = container.scrollTop();
            var isBelowTop = undefined,
                isAboveBottom = undefined,
                isOnScreen = undefined;

            isAboveBottom = offset < containerHeight;
            isBelowTop = offset > elementHeight;

            isOnScreen = isBelowTop && isAboveBottom;

            if (!isOnScreen) {
                // Scroll so that element is centered in container
                // 40 is the amount of padding on the container
                container.clearQueue().animate({
                    scrollTop: currentScroll + offset - 40 - containerHeight / 2
                });
            }
        }
    });
});
define('ghost/components/gh-profile-image', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    var run = _ember['default'].run;
    var notEmpty = computed.notEmpty;

    /**
     * A component to manage a user profile image. By default it just handles picture uploads,
     * but if passed a bound 'email' property it will render the user's gravatar image
     *
     * Example: {{gh-profile-image email=controllerEmailProperty setImage="controllerActionName" debounce=500}}
     *
     * @param  {int}            size              The size of the image to render
     * @param  {String}         email             Reference to a bound email object if gravatar image behavior is desired.
     * @param  {String|action}  setImage          The string name of the action on the controller to be called when an image is added.
     * @param  {int}            debounce          Period to wait after changes to email before attempting to load gravatar
     * @property  {Boolean}     hasUploadedImage  Whether or not the user has uploaded an image (whether or not to show the default image/gravatar image)
     * @property  {String}      defaultImage      String containing the background-image css property of the default user profile image
     * @property  {String}      imageBackground   String containing the background-image css property with the gravatar url
     */
    exports['default'] = Component.extend({
        email: '',
        size: 90,
        debounce: 300,

        validEmail: '',
        hasUploadedImage: false,
        fileStorage: true,

        ghostPaths: inject.service('ghost-paths'),
        displayGravatar: notEmpty('validEmail'),

        init: function init() {
            this._super.apply(this, arguments);
            // Fire this immediately in case we're initialized with a valid email
            this.trySetValidEmail();
        },

        defaultImage: computed('ghostPaths', function () {
            var url = this.get('ghostPaths.url').asset('/shared/img/user-image.png');
            return _ember['default'].String.htmlSafe('background-image: url(' + url + ')');
        }),

        trySetValidEmail: function trySetValidEmail() {
            if (!this.get('isDestroyed')) {
                var email = this.get('email');
                this.set('validEmail', validator.isEmail(email) ? email : '');
            }
        },

        didReceiveAttrs: function didReceiveAttrs(attrs) {
            this._super.apply(this, arguments);
            var timeout = parseInt(attrs.newAttrs.throttle || this.get('debounce'));
            run.debounce(this, 'trySetValidEmail', timeout);
        },

        imageBackground: computed('validEmail', 'size', function () {
            var email = this.get('validEmail');
            var size = this.get('size');

            var style = '';
            if (email) {
                var url = 'http://www.gravatar.com/avatar/' + window.md5(email) + '?s=' + size + '&d=blank';
                style = 'background-image: url(' + url + ')';
            }
            return _ember['default'].String.htmlSafe(style);
        }),

        didInsertElement: function didInsertElement() {
            var size = this.get('size');
            var uploadElement = this.$('.js-file-input');

            this._super.apply(this, arguments);

            // while theoretically the 'add' and 'processalways' functions could be
            // added as properties of the hash passed to fileupload(), for some reason
            // they needed to be placed in an on() call for the add method to work correctly
            uploadElement.fileupload({
                url: this.get('ghostPaths.url').api('uploads'),
                dropZone: this.$('.js-img-dropzone'),
                previewMaxHeight: size,
                previewMaxWidth: size,
                previewCrop: true,
                maxNumberOfFiles: 1,
                autoUpload: false
            }).on('fileuploadadd', run.bind(this, this.queueFile)).on('fileuploadprocessalways', run.bind(this, this.triggerPreview));
        },

        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);

            if (this.$('.js-file-input').data()['blueimp-fileupload']) {
                this.$('.js-file-input').fileupload('destroy');
            }
        },

        queueFile: function queueFile(e, data) {
            var fileName = data.files[0].name;

            if (/\.(gif|jpe?g|png|svg?z)$/i.test(fileName)) {
                this.sendAction('setImage', data);
            }
        },

        triggerPreview: function triggerPreview(e, data) {
            var file = data.files[data.index];

            if (file.preview) {
                this.set('hasUploadedImage', true);
                // necessary jQuery code because file.preview is a raw DOM object
                // potential todo: rename 'gravatar-img' class in the CSS to be something
                // that both the gravatar and the image preview can use that's not so confusing
                this.$('.js-img-preview').empty().append(this.$(file.preview).addClass('gravatar-img'));
            }
        }
    });
});
define('ghost/components/gh-search-input', ['exports', 'ember', 'ic-ajax'], function (exports, _ember, _icAjax) {
    var $ = _ember['default'].$;
    var Component = _ember['default'].Component;
    var RSVP = _ember['default'].RSVP;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    var observer = _ember['default'].observer;
    var filterBy = computed.filterBy;
    exports['default'] = Component.extend({

        selection: null,
        content: [],
        isLoading: false,
        contentExpiry: 10 * 1000,
        contentExpiresAt: false,

        posts: filterBy('content', 'category', 'Posts'),
        pages: filterBy('content', 'category', 'Pages'),
        users: filterBy('content', 'category', 'Users'),
        tags: filterBy('content', 'category', 'Tags'),

        _store: inject.service('store'),
        _routing: inject.service('-routing'),

        _selectize: computed(function () {
            return this.$('select')[0].selectize;
        }),

        refreshContent: function refreshContent() {
            var _this = this;

            var promises = [];
            var now = new Date();
            var contentExpiry = this.get('contentExpiry');
            var contentExpiresAt = this.get('contentExpiresAt');

            if (this.get('isLoading') || contentExpiresAt > now) {
                return;
            }

            this.set('isLoading', true);
            promises.pushObject(this._loadPosts());
            promises.pushObject(this._loadUsers());
            promises.pushObject(this._loadTags());

            RSVP.all(promises).then(function () {})['finally'](function () {
                _this.set('isLoading', false);
                _this.set('contentExpiresAt', new Date(now.getTime() + contentExpiry));
            });
        },

        _loadPosts: function _loadPosts() {
            var _this2 = this;

            var store = this.get('_store');
            var postsUrl = store.adapterFor('post').urlForQuery({}, 'post') + '/';
            var postsQuery = { fields: 'id,title,page', limit: 'all', status: 'all', staticPages: 'all' };
            var content = this.get('content');

            return (0, _icAjax.request)(postsUrl, { data: postsQuery }).then(function (posts) {
                content.removeObjects(_this2.get('posts'));
                content.removeObjects(_this2.get('pages'));
                content.pushObjects(posts.posts.map(function (post) {
                    return {
                        id: 'post.' + post.id,
                        title: post.title,
                        category: post.page ? 'Pages' : 'Posts'
                    };
                }));
            });
        },

        _loadUsers: function _loadUsers() {
            var _this3 = this;

            var store = this.get('_store');
            var usersUrl = store.adapterFor('user').urlForQuery({}, 'user') + '/';
            var usersQuery = { fields: 'name,slug', limit: 'all' };
            var content = this.get('content');

            return (0, _icAjax.request)(usersUrl, { data: usersQuery }).then(function (users) {
                content.removeObjects(_this3.get('users'));
                content.pushObjects(users.users.map(function (user) {
                    return {
                        id: 'user.' + user.slug,
                        title: user.name,
                        category: 'Users'
                    };
                }));
            });
        },

        _loadTags: function _loadTags() {
            var _this4 = this;

            var store = this.get('_store');
            var tagsUrl = store.adapterFor('tag').urlForQuery({}, 'tag') + '/';
            var tagsQuery = { fields: 'name,slug', limit: 'all' };
            var content = this.get('content');

            return (0, _icAjax.request)(tagsUrl, { data: tagsQuery }).then(function (tags) {
                content.removeObjects(_this4.get('tags'));
                content.pushObjects(tags.tags.map(function (tag) {
                    return {
                        id: 'tag.' + tag.slug,
                        title: tag.name,
                        category: 'Tags'
                    };
                }));
            });
        },

        _keepSelectionClear: observer('selection', function () {
            if (this.get('selection') !== null) {
                this.set('selection', null);
            }
        }),

        _setKeymasterScope: function _setKeymasterScope() {
            key.setScope('search-input');
        },

        _resetKeymasterScope: function _resetKeymasterScope() {
            key.setScope('default');
        },

        willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            this._resetKeymasterScope();
        },

        actions: {
            openSelected: function openSelected(selected) {
                var _this5 = this;

                var transition = null;

                if (!selected) {
                    return;
                }

                if (selected.category === 'Posts' || selected.category === 'Pages') {
                    var id = selected.id.replace('post.', '');
                    transition = this.get('_routing.router').transitionTo('editor.edit', id);
                }

                if (selected.category === 'Users') {
                    var id = selected.id.replace('user.', '');
                    transition = this.get('_routing.router').transitionTo('team.user', id);
                }

                if (selected.category === 'Tags') {
                    var id = selected.id.replace('tag.', '');
                    transition = this.get('_routing.router').transitionTo('settings.tags.tag', id);
                }

                transition.then(function () {
                    if (_this5.get('_selectize').$control_input.is(':focus')) {
                        _this5._setKeymasterScope();
                    }
                });
            },

            focusInput: function focusInput() {
                this.get('_selectize').focus();
            },

            onInit: function onInit() {
                var selectize = this.get('_selectize');
                var html = '<div class="dropdown-empty-message">Nothing found&hellip;</div>';

                selectize.$empty_results_container = $(html);
                selectize.$empty_results_container.hide();
                selectize.$dropdown.append(selectize.$empty_results_container);
            },

            onFocus: function onFocus() {
                this._setKeymasterScope();
                this.refreshContent();
            },

            onBlur: function onBlur() {
                var selectize = this.get('_selectize');

                this._resetKeymasterScope();
                selectize.$empty_results_container.hide();
            },

            onType: function onType() {
                var selectize = this.get('_selectize');

                if (!selectize.hasOptions) {
                    selectize.open();
                    selectize.$empty_results_container.show();
                } else {
                    selectize.$empty_results_container.hide();
                }
            }
        }

    });
});
/* global key */
/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
define('ghost/components/gh-select-native', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;
    var reads = computed.reads;

    function K() {
        return this;
    }

    exports['default'] = Component.extend({
        content: null,
        prompt: null,
        optionValuePath: 'id',
        optionLabelPath: 'title',
        selection: null,
        action: K, // action to fire on change

        // shadow the passed-in `selection` to avoid
        // leaking changes to it via a 2-way binding
        _selection: reads('selection'),

        actions: {
            change: function change() {
                // jscs:disable requireArrayDestructuring
                var selectEl = this.$('select')[0];
                // jscs:enable requireArrayDestructuring
                var selectedIndex = selectEl.selectedIndex;

                // decrement index by 1 if we have a prompt
                var hasPrompt = !!this.get('prompt');
                var contentIndex = hasPrompt ? selectedIndex - 1 : selectedIndex;

                var selection = this.get('content').objectAt(contentIndex);

                // set the local, shadowed selection to avoid leaking
                // changes to `selection` out via 2-way binding
                this.set('_selection', selection);

                this.sendAction('action', selection);
            }
        }
    });
});
define('ghost/components/gh-selectize', ['exports', 'ember', 'ember-cli-selectize/components/ember-selectize'], function (exports, _ember, _emberCliSelectizeComponentsEmberSelectize) {
    var computed = _ember['default'].computed;
    var isBlank = _ember['default'].isBlank;
    var get = _ember['default'].get;
    var on = _ember['default'].on;
    var run = _ember['default'].run;

    var emberA = _ember['default'].A;

    exports['default'] = _emberCliSelectizeComponentsEmberSelectize['default'].extend({

        selectizeOptions: computed(function () {
            var options = this._super.apply(this, arguments);

            options.onChange = run.bind(this, '_onChange');

            return options;
        }),

        _dontOpenWhenBlank: on('didInsertElement', function () {
            var openOnFocus = this.get('openOnFocus');

            if (!openOnFocus) {
                run.schedule('afterRender', this, function () {
                    var selectize = this._selectize;
                    if (selectize) {
                        selectize.on('dropdown_open', function () {
                            if (isBlank(selectize.$control_input.val())) {
                                selectize.close();
                            }
                        });
                        selectize.on('type', function (filter) {
                            if (isBlank(filter)) {
                                selectize.close();
                            }
                        });
                    }
                });
            }
        }),

        /**
        * Event callback that is triggered when user creates a tag
        * - modified to pass the caret position to the action
        */
        _create: function _create(input, callback) {
            var caret = this._selectize.caretPos;

            // Delete user entered text
            this._selectize.setTextboxValue('');
            // Send create action

            // allow the observers and computed properties to run first
            run.schedule('actions', this, function () {
                this.sendAction('create-item', input, caret);
            });
            // We cancel the creation here, so it's up to you to include the created element
            // in the content and selection property
            callback(null);
        },

        _addSelection: function _addSelection(obj) {
            var _valuePath = this.get('_valuePath');
            var val = get(obj, _valuePath);
            var caret = this._selectize.caretPos;

            // caret position is always 1 more than the desired index as this method
            // is called after selectize has inserted the item and the caret has moved
            // to the right
            caret = caret - 1;

            this.get('selection').insertAt(caret, obj);

            run.schedule('actions', this, function () {
                this.sendAction('add-item', obj);
                this.sendAction('add-value', val);
            });
        },

        _onChange: function _onChange(args) {
            var selection = _ember['default'].get(this, 'selection');
            var valuePath = _ember['default'].get(this, '_valuePath');

            if (!args || !selection || !_ember['default'].isArray(selection) || args.length !== selection.length) {
                return;
            }

            var hasNoChanges = selection.every(function (obj, idx) {
                return _ember['default'].get(obj, valuePath) === args[idx];
            });

            if (hasNoChanges) {
                return;
            }

            var reorderedSelection = emberA([]);

            args.forEach(function (value) {
                var obj = selection.find(function (item) {
                    // jscs:disable
                    return get(item, valuePath) + '' === value;
                    // jscs:enable
                });

                if (obj) {
                    reorderedSelection.addObject(obj);
                }
            });

            this.set('selection', reorderedSelection);
        }

    });
});
/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
define('ghost/components/gh-skip-link', ['exports', 'ember'], function (exports, _ember) {
    var $ = _ember['default'].$;
    var Component = _ember['default'].Component;
    var on = _ember['default'].on;
    exports['default'] = Component.extend({
        tagName: 'a',
        anchor: '',
        classNames: ['sr-only', 'sr-only-focusable'],
        // Add attributes to component for href
        // href should be set to retain anchor properties
        // such as pointer cursor and text underline
        attributeBindings: ['href'],
        // Used so that upon clicking on the link
        // anchor behaviors or ignored
        href: _ember['default'].String.htmlSafe('javascript:;'),

        scrollTo: on('click', function () {
            var anchor = this.get('anchor');
            var $el = _ember['default'].$(anchor);

            if ($el) {
                // Scrolls to the top of main content or whatever
                // is passed to the anchor attribute
                _ember['default'].$('body').scrollTop($el.offset().top);

                // This sets focus on the content which was skipped to
                // upon losing focus, the tabindex should be removed
                // so that normal keyboard navigation picks up from focused
                // element
                _ember['default'].$($el).attr('tabindex', -1).on('blur focusout', function () {
                    $(this).removeAttr('tabindex');
                }).focus();
            }
        })
    });
});
/*jshint scripturl:true*/
define('ghost/components/gh-spin-button', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;
    var observer = _ember['default'].observer;
    var run = _ember['default'].run;
    var equal = computed.equal;
    exports['default'] = Component.extend({
        tagName: 'button',
        buttonText: '',
        submitting: false,
        showSpinner: false,
        showSpinnerTimeout: null,
        autoWidth: true,

        // Disable Button when isLoading equals true
        attributeBindings: ['disabled', 'type', 'tabindex'],

        // Must be set on the controller
        disabled: equal('showSpinner', true),

        click: function click() {
            if (this.get('action')) {
                this.sendAction('action');
                return false;
            }
            return true;
        },

        toggleSpinner: observer('submitting', function () {
            var submitting = this.get('submitting');
            var timeout = this.get('showSpinnerTimeout');

            if (submitting) {
                this.set('showSpinner', true);
                this.set('showSpinnerTimeout', run.later(this, function () {
                    if (!this.get('submitting')) {
                        this.set('showSpinner', false);
                    }
                    this.set('showSpinnerTimeout', null);
                }, 1000));
            } else if (!submitting && timeout === null) {
                this.set('showSpinner', false);
            }
        }),

        setSize: observer('showSpinner', function () {
            if (this.get('showSpinner') && this.get('autoWidth')) {
                this.$().width(this.$().width());
                this.$().height(this.$().height());
            } else {
                this.$().width('');
                this.$().height('');
            }
        }),

        willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            run.cancel(this.get('showSpinnerTimeout'));
        }
    });
});
define('ghost/components/gh-tab-pane', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;
    var alias = computed.alias;

    // See gh-tabs-manager.js for use
    exports['default'] = Component.extend({
        classNameBindings: ['active'],

        tabsManager: computed(function () {
            return this.nearestWithProperty('isTabsManager');
        }),

        tab: computed('tabsManager.tabs.[]', 'tabsManager.tabPanes.[]', function () {
            var index = this.get('tabsManager.tabPanes').indexOf(this);
            var tabs = this.get('tabsManager.tabs');

            return tabs && tabs.objectAt(index);
        }),

        active: alias('tab.active'),

        willRender: function willRender() {
            this._super.apply(this, arguments);
            // Register with the tabs manager
            this.get('tabsManager').registerTabPane(this);
        },

        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);
            // Deregister with the tabs manager
            this.get('tabsManager').unregisterTabPane(this);
        }
    });
});
define('ghost/components/gh-tab', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;

    // See gh-tabs-manager.js for use
    exports['default'] = Component.extend({
        tabsManager: computed(function () {
            return this.nearestWithProperty('isTabsManager');
        }),

        active: computed('tabsManager.activeTab', function () {
            return this.get('tabsManager.activeTab') === this;
        }),

        index: computed('tabsManager.tabs.[]', function () {
            return this.get('tabsManager.tabs').indexOf(this);
        }),

        // Select on click
        click: function click() {
            this.get('tabsManager').select(this);
        },

        willRender: function willRender() {
            this._super.apply(this, arguments);
            // register the tabs with the tab manager
            this.get('tabsManager').registerTab(this);
        },

        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);
            // unregister the tabs with the tab manager
            this.get('tabsManager').unregisterTab(this);
        }
    });
});
define('ghost/components/gh-tabs-manager', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;

    /**
    Heavily inspired by ic-tabs (https://github.com/instructure/ic-tabs)
    
    Three components work together for smooth tabbing.
    1. tabs-manager (gh-tabs)
    2. tab (gh-tab)
    3. tab-pane (gh-tab-pane)
    
    ## Usage:
    The tabs-manager must wrap all tab and tab-pane components,
    but they can be nested at any level.
    
    A tab and its pane are tied together via their order.
    So, the second tab within a tab manager will activate
    the second pane within that manager.
    
    ```hbs
    {{#gh-tabs-manager}}
      {{#gh-tab}}
        First tab
      {{/gh-tab}}
      {{#gh-tab}}
        Second tab
      {{/gh-tab}}
    
      ....
      {{#gh-tab-pane}}
        First pane
      {{/gh-tab-pane}}
      {{#gh-tab-pane}}
        Second pane
      {{/gh-tab-pane}}
    {{/gh-tabs-manager}}
    ```
    ## Options:
    
    the tabs-manager will send a "selected" action whenever one of its
    tabs is clicked.
    ```hbs
    {{#gh-tabs-manager selected="myAction"}}
        ....
    {{/gh-tabs-manager}}
    ```
    
    ## Styling:
    Both tab and tab-pane elements have an "active"
    class applied when they are active.
    
    */
    exports['default'] = Component.extend({
        activeTab: null,
        tabs: [],
        tabPanes: [],

        // Used by children to find this tabsManager
        isTabsManager: true,

        // Called when a gh-tab is clicked.
        select: function select(tab) {
            this.set('activeTab', tab);
            this.sendAction('selected');
        },

        // Register tabs and their panes to allow for
        // interaction between components.
        registerTab: function registerTab(tab) {
            this.get('tabs').addObject(tab);
        },

        unregisterTab: function unregisterTab(tab) {
            this.get('tabs').removeObject(tab);
        },

        registerTabPane: function registerTabPane(tabPane) {
            this.get('tabPanes').addObject(tabPane);
        },

        unregisterTabPane: function unregisterTabPane(tabPane) {
            this.get('tabPanes').removeObject(tabPane);
        }
    });
});
define('ghost/components/gh-tag-settings-form', ['exports', 'ember', 'ghost/utils/bound-one-way'], function (exports, _ember, _ghostUtilsBoundOneWay) {
    var Component = _ember['default'].Component;
    var Handlebars = _ember['default'].Handlebars;
    var computed = _ember['default'].computed;
    var get = _ember['default'].get;
    var inject = _ember['default'].inject;
    exports['default'] = Component.extend({

        tag: null,

        scratchName: (0, _ghostUtilsBoundOneWay['default'])('tag.name'),
        scratchSlug: (0, _ghostUtilsBoundOneWay['default'])('tag.slug'),
        scratchDescription: (0, _ghostUtilsBoundOneWay['default'])('tag.description'),
        scratchMetaTitle: (0, _ghostUtilsBoundOneWay['default'])('tag.meta_title'),
        scratchMetaDescription: (0, _ghostUtilsBoundOneWay['default'])('tag.meta_description'),

        isViewingSubview: false,

        config: inject.service(),

        mediaQueries: _ember['default'].inject.service(),
        isMobile: _ember['default'].computed.reads('mediaQueries.maxWidth600'),

        title: computed('tag.isNew', function () {
            if (this.get('tag.isNew')) {
                return 'New Tag';
            } else {
                return 'Tag Settings';
            }
        }),

        seoTitle: computed('scratchName', 'scratchMetaTitle', function () {
            var metaTitle = this.get('scratchMetaTitle') || '';

            metaTitle = metaTitle.length > 0 ? metaTitle : this.get('scratchName');

            if (metaTitle && metaTitle.length > 70) {
                metaTitle = metaTitle.substring(0, 70).trim();
                metaTitle = Handlebars.Utils.escapeExpression(metaTitle);
                metaTitle = _ember['default'].String.htmlSafe(metaTitle + '&hellip;');
            }

            return metaTitle;
        }),

        seoURL: computed('scratchSlug', function () {
            var blogUrl = this.get('config.blogUrl');
            var seoSlug = this.get('scratchSlug') || '';

            var seoURL = blogUrl + '/tag/' + seoSlug;

            // only append a slash to the URL if the slug exists
            if (seoSlug) {
                seoURL += '/';
            }

            if (seoURL.length > 70) {
                seoURL = seoURL.substring(0, 70).trim();
                seoURL = _ember['default'].String.htmlSafe(seoURL + '&hellip;');
            }

            return seoURL;
        }),

        seoDescription: computed('scratchDescription', 'scratchMetaDescription', function () {
            var metaDescription = this.get('scratchMetaDescription') || '';

            metaDescription = metaDescription.length > 0 ? metaDescription : this.get('scratchDescription');

            if (metaDescription && metaDescription.length > 156) {
                metaDescription = metaDescription.substring(0, 156).trim();
                metaDescription = Handlebars.Utils.escapeExpression(metaDescription);
                metaDescription = _ember['default'].String.htmlSafe(metaDescription + '&hellip;');
            }

            return metaDescription;
        }),

        didReceiveAttrs: function didReceiveAttrs(attrs) {
            this._super.apply(this, arguments);

            if (get(attrs, 'newAttrs.tag.value.id') !== get(attrs, 'oldAttrs.tag.value.id')) {
                this.reset();
            }
        },

        reset: function reset() {
            this.set('isViewingSubview', false);
            if (this.$()) {
                this.$('.settings-menu-pane').scrollTop(0);
            }
        },

        focusIn: function focusIn() {
            key.setScope('tag-settings-form');
        },

        focusOut: function focusOut() {
            key.setScope('default');
        },

        actions: {
            setProperty: function setProperty(property, value) {
                this.attrs.setProperty(property, value);
            },

            setCoverImage: function setCoverImage(image) {
                this.attrs.setProperty('image', image);
            },

            clearCoverImage: function clearCoverImage() {
                this.attrs.setProperty('image', '');
            },

            setUploaderReference: function setUploaderReference() {
                // noop
            },

            openMeta: function openMeta() {
                this.set('isViewingSubview', true);
            },

            closeMeta: function closeMeta() {
                this.set('isViewingSubview', false);
            },

            deleteTag: function deleteTag() {
                this.sendAction('openModal', 'delete-tag', this.get('tag'));
            }
        }

    });
});
/* global key */
define('ghost/components/gh-tags-management-container', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    var isBlank = _ember['default'].isBlank;
    var observer = _ember['default'].observer;
    var run = _ember['default'].run;
    var equal = computed.equal;
    var reads = computed.reads;
    exports['default'] = Component.extend({
        classNames: ['view-container'],
        classNameBindings: ['isMobile'],

        mediaQueries: inject.service(),

        tags: null,
        selectedTag: null,

        isMobile: reads('mediaQueries.maxWidth600'),
        isEmpty: equal('tags.length', 0),

        init: function init() {
            this._super.apply(this, arguments);
            run.schedule('actions', this, this.fireMobileChangeActions);
        },

        displaySettingsPane: computed('isEmpty', 'selectedTag', 'isMobile', function () {
            var isEmpty = this.get('isEmpty');
            var selectedTag = this.get('selectedTag');
            var isMobile = this.get('isMobile');

            // always display settings pane for blank-slate on mobile
            if (isMobile && isEmpty) {
                return true;
            }

            // display list if no tag is selected on mobile
            if (isMobile && isBlank(selectedTag)) {
                return false;
            }

            // default to displaying settings pane
            return true;
        }),

        fireMobileChangeActions: observer('isMobile', function () {
            if (!this.get('isMobile')) {
                this.sendAction('leftMobile');
            }
        })
    });
});
define('ghost/components/gh-textarea', ['exports', 'ember', 'ghost/mixins/text-input'], function (exports, _ember, _ghostMixinsTextInput) {
    var TextArea = _ember['default'].TextArea;
    exports['default'] = TextArea.extend(_ghostMixinsTextInput['default'], {
        classNames: 'gh-input'
    });
});
define('ghost/components/gh-trim-focus-input', ['exports', 'ember'], function (exports, _ember) {
    var TextField = _ember['default'].TextField;
    var computed = _ember['default'].computed;
    var on = _ember['default'].on;
    exports['default'] = TextField.extend({
        focus: true,
        classNames: 'gh-input',
        attributeBindings: ['autofocus'],

        autofocus: computed(function () {
            if (this.get('focus')) {
                return device.ios() ? false : 'autofocus';
            }

            return false;
        }),

        focusField: on('didInsertElement', function () {
            // This fix is required until Mobile Safari has reliable
            // autofocus, select() or focus() support
            if (this.get('focus') && !device.ios()) {
                this.$().val(this.$().val()).focus();
            }
        }),

        trimValue: on('focusOut', function () {
            var text = this.$().val();
            this.$().val(text.trim());
        })
    });
});
/*global device*/
define('ghost/components/gh-upload-modal', ['exports', 'ember', 'ghost/components/gh-modal-dialog', 'ghost/assets/lib/uploader', 'ghost/utils/caja-sanitizers'], function (exports, _ember, _ghostComponentsGhModalDialog, _ghostAssetsLibUploader, _ghostUtilsCajaSanitizers) {
    var inject = _ember['default'].inject;
    var isEmpty = _ember['default'].isEmpty;
    exports['default'] = _ghostComponentsGhModalDialog['default'].extend({
        layoutName: 'components/gh-modal-dialog',

        config: inject.service(),

        didInsertElement: function didInsertElement() {
            this._super.apply(this, arguments);
            _ghostAssetsLibUploader['default'].call(this.$('.js-drop-zone'), { fileStorage: this.get('config.fileStorage') });
        },

        keyDown: function keyDown() {
            this.setErrorState(false);
        },

        setErrorState: function setErrorState(state) {
            if (state) {
                this.$('.js-upload-url').addClass('error');
            } else {
                this.$('.js-upload-url').removeClass('error');
            }
        },

        confirm: {
            reject: {
                buttonClass: 'btn btn-default',
                text: 'Cancel', // The reject button text
                func: function func() {
                    // The function called on rejection
                    return true;
                }
            },

            accept: {
                buttonClass: 'btn btn-blue right',
                text: 'Save', // The accept button text: 'Save'
                func: function func() {
                    var imageType = 'model.' + this.get('imageType');
                    var value = undefined;

                    if (this.$('.js-upload-url').val()) {
                        value = this.$('.js-upload-url').val();

                        if (!isEmpty(value) && !_ghostUtilsCajaSanitizers['default'].url(value)) {
                            this.setErrorState(true);
                            return { message: 'Image URI is not valid' };
                        }
                    } else {
                        value = this.$('.js-upload-target').attr('src');
                    }

                    this.set(imageType, value);
                    return true;
                }
            }
        },

        actions: {
            closeModal: function closeModal() {
                this.sendAction();
            },

            confirm: function confirm(type) {
                var func = this.get('confirm.' + type + '.func');
                var result = undefined;

                if (typeof func === 'function') {
                    result = func.apply(this);
                }

                if (!result.message) {
                    this.sendAction();
                    this.sendAction('confirm' + type);
                }
            }
        }
    });
});
define('ghost/components/gh-uploader', ['exports', 'ember', 'ghost/assets/lib/uploader'], function (exports, _ember, _ghostAssetsLibUploader) {
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;
    var get = _ember['default'].get;
    var inject = _ember['default'].inject;
    var isEmpty = _ember['default'].isEmpty;
    var run = _ember['default'].run;
    exports['default'] = Component.extend({
        classNames: ['image-uploader', 'js-post-image-upload'],

        config: inject.service(),

        imageSource: computed('image', function () {
            return this.get('image') || '';
        }),

        // removes event listeners from the uploader
        removeListeners: function removeListeners() {
            var $this = this.$();

            $this.off();
            $this.find('.js-cancel').off();
        },

        // NOTE: because the uploader is sometimes in the same place in the DOM
        // between transitions Glimmer will re-use the existing elements including
        // those that arealready decorated by jQuery. The following works around
        // situations where the image is changed without a full teardown/rebuild
        didReceiveAttrs: function didReceiveAttrs(attrs) {
            var oldValue = attrs.oldAttrs && get(attrs.oldAttrs, 'image.value');
            var newValue = attrs.newAttrs && get(attrs.newAttrs, 'image.value');

            this._super.apply(this, arguments);

            // always reset when we receive a blank image
            // - handles navigating to populated image from blank image
            if (isEmpty(newValue) && !isEmpty(oldValue)) {
                this.$()[0].uploaderUi.reset();
            }

            // re-init if we receive a new image but the uploader is blank
            // - handles back button navigating from blank image to populated image
            if (!isEmpty(newValue) && this.$()) {
                if (this.$('.js-upload-target').attr('src') === '') {
                    this.$()[0].uploaderUi.reset();
                    this.$()[0].uploaderUi.initWithImage();
                }
            }
        },

        didInsertElement: function didInsertElement() {
            this._super.apply(this, arguments);
            this.send('initUploader');
        },

        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);
            this.removeListeners();
        },

        actions: {
            initUploader: function initUploader() {
                var _this = this;

                var el = this.$();
                var ref = _ghostAssetsLibUploader['default'].call(el, {
                    editor: true,
                    fileStorage: this.get('config.fileStorage')
                });

                el.on('uploadsuccess', function (event, result) {
                    if (result && result !== '' && result !== 'http://') {
                        run(_this, function () {
                            this.sendAction('uploaded', result);
                        });
                    }
                });

                el.on('imagecleared', run.bind(this, 'sendAction', 'canceled'));

                this.sendAction('initUploader', ref);
            }
        }
    });
});
define('ghost/components/gh-url-preview', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;

    /*
    Example usage:
    {{gh-url-preview prefix="tag" slug=theSlugValue tagName="p" classNames="description"}}
    */
    exports['default'] = Component.extend({
        classNames: 'ghost-url-preview',
        prefix: null,
        slug: null,

        config: inject.service(),

        url: computed('slug', function () {
            // Get the blog URL and strip the scheme
            var blogUrl = this.get('config.blogUrl');
            // Remove `http[s]://`
            var noSchemeBlogUrl = blogUrl.substr(blogUrl.indexOf('://') + 3);

            // Get the prefix and slug values
            var prefix = this.get('prefix') ? this.get('prefix') + '/' : '';
            var slug = this.get('slug') ? this.get('slug') + '/' : '';

            // Join parts of the URL together with slashes
            var theUrl = noSchemeBlogUrl + '/' + prefix + slug;

            return theUrl;
        })
    });
});
define('ghost/components/gh-user-active', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    exports['default'] = Component.extend({
        tagName: '',

        user: null,

        ghostPaths: inject.service('ghost-paths'),

        userDefault: computed('ghostPaths', function () {
            return this.get('ghostPaths.url').asset('/shared/img/user-image.png');
        }),

        userImageBackground: computed('user.image', 'userDefault', function () {
            var url = this.get('user.image') || this.get('userDefault');

            return _ember['default'].String.htmlSafe('background-image: url(' + url + ')');
        }),

        lastLogin: computed('user.last_login', function () {
            var lastLogin = this.get('user.last_login');

            return lastLogin ? lastLogin.fromNow() : '(Never)';
        })
    });
});
define('ghost/components/gh-user-invited', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    exports['default'] = Component.extend({
        tagName: '',

        user: null,
        isSending: false,

        notifications: inject.service(),

        createdAt: computed('user.created_at', function () {
            var createdAt = this.get('user.created_at');

            return createdAt ? createdAt.fromNow() : '';
        }),

        actions: {
            resend: function resend() {
                var _this = this;

                var user = this.get('user');
                var notifications = this.get('notifications');

                this.set('isSending', true);
                user.resendInvite().then(function (result) {
                    var notificationText = 'Invitation resent! (' + user.get('email') + ')';

                    // If sending the invitation email fails, the API will still return a status of 201
                    // but the user's status in the response object will be 'invited-pending'.
                    if (result.users[0].status === 'invited-pending') {
                        notifications.showAlert('Invitation email was not sent.  Please try resending.', { type: 'error', key: 'invite.resend.not-sent' });
                    } else {
                        user.set('status', result.users[0].status);
                        notifications.showNotification(notificationText);
                        notifications.closeAlerts('invite.resend');
                    }
                })['catch'](function (error) {
                    notifications.showAPIError(error, { key: 'invite.resend' });
                })['finally'](function () {
                    _this.set('isSending', false);
                });
            },

            revoke: function revoke() {
                var _this2 = this;

                var user = this.get('user');
                var email = user.get('email');
                var notifications = this.get('notifications');

                // reload the user to get the most up-to-date information
                user.reload().then(function () {
                    if (user.get('invited')) {
                        user.destroyRecord().then(function () {
                            var notificationText = 'Invitation revoked. (' + email + ')';
                            notifications.showNotification(notificationText);
                            notifications.closeAlerts('invite.revoke');
                        })['catch'](function (error) {
                            notifications.showAPIError(error, { key: 'invite.revoke' });
                        });
                    } else {
                        // if the user is no longer marked as "invited", then show a warning and reload the route
                        _this2.sendAction('reload');
                        notifications.showAlert('This user has already accepted the invitation.', { type: 'error', delayed: true, key: 'invite.revoke.already-accepted' });
                    }
                });
            }
        }
    });
});
define('ghost/components/gh-validation-status-container', ['exports', 'ember', 'ghost/mixins/validation-state'], function (exports, _ember, _ghostMixinsValidationState) {
    var Component = _ember['default'].Component;
    var computed = _ember['default'].computed;

    /**
     * Handles the CSS necessary to show a specific property state. When passed a
     * DS.Errors object and a property name, if the DS.Errors object has errors for
     * the specified property, it will change the CSS to reflect the error state
     * @param  {DS.Errors} errors   The DS.Errors object
     * @param  {string} property    Name of the property
     */
    exports['default'] = Component.extend(_ghostMixinsValidationState['default'], {
        classNameBindings: ['errorClass'],

        errorClass: computed('property', 'hasError', 'hasValidated.[]', function () {
            var hasValidated = this.get('hasValidated');
            var property = this.get('property');

            if (hasValidated && hasValidated.contains(property)) {
                return this.get('hasError') ? 'error' : 'success';
            } else {
                return '';
            }
        })
    });
});
define('ghost/components/gh-view-title', ['exports', 'ember'], function (exports, _ember) {
    var Component = _ember['default'].Component;
    exports['default'] = Component.extend({
        tagName: 'h2',
        classNames: ['view-title'],

        actions: {
            openMobileMenu: function openMobileMenu() {
                this.sendAction('openMobileMenu');
            }
        }
    });
});
define('ghost/controllers/about', ['exports', 'ember'], function (exports, _ember) {
    var Controller = _ember['default'].Controller;
    exports['default'] = Controller.extend({
        updateNotificationCount: 0,

        actions: {
            updateNotificationChange: function updateNotificationChange(count) {
                this.set('updateNotificationCount', count);
            }
        }
    });
});
define('ghost/controllers/application', ['exports', 'ember'], function (exports, _ember) {
    var Controller = _ember['default'].Controller;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    exports['default'] = Controller.extend({
        dropdown: inject.service(),

        signedOut: computed.match('currentPath', /(signin|signup|setup|reset)/),

        topNotificationCount: 0,
        showMobileMenu: false,
        showSettingsMenu: false,

        autoNav: false,
        autoNavOpen: computed('autoNav', {
            get: function get() {
                return false;
            },
            set: function set(key, value) {
                if (this.get('autoNav')) {
                    return value;
                }
                return false;
            }
        }),

        actions: {
            topNotificationChange: function topNotificationChange(count) {
                this.set('topNotificationCount', count);
            },

            toggleAutoNav: function toggleAutoNav() {
                this.toggleProperty('autoNav');
            },

            openAutoNav: function openAutoNav() {
                this.set('autoNavOpen', true);
            },

            closeAutoNav: function closeAutoNav() {
                this.set('autoNavOpen', false);
            },

            closeMobileMenu: function closeMobileMenu() {
                this.set('showMobileMenu', false);
            }
        }
    });
});
define('ghost/controllers/array', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller;
});
define('ghost/controllers/editor/edit', ['exports', 'ember', 'ghost/mixins/editor-base-controller'], function (exports, _ember, _ghostMixinsEditorBaseController) {
    var Controller = _ember['default'].Controller;
    exports['default'] = Controller.extend(_ghostMixinsEditorBaseController['default'], {
        actions: {
            openDeleteModal: function openDeleteModal() {
                this.send('openModal', 'delete-post', this.get('model'));
            }
        }
    });
});
define('ghost/controllers/editor/new', ['exports', 'ember', 'ghost/mixins/editor-base-controller'], function (exports, _ember, _ghostMixinsEditorBaseController) {
    var Controller = _ember['default'].Controller;

    function K() {
        return this;
    }

    exports['default'] = Controller.extend(_ghostMixinsEditorBaseController['default'], {
        // Overriding autoSave on the base controller, as the new controller shouldn't be autosaving
        autoSave: K,
        actions: {
            /**
              * Redirect to editor after the first save
              */
            save: function save(options) {
                var _this = this;

                return this._super(options).then(function (model) {
                    if (model.get('id')) {
                        _this.replaceRoute('editor.edit', model);
                    }
                });
            }
        }
    });
});
define('ghost/controllers/error', ['exports', 'ember'], function (exports, _ember) {
    var Controller = _ember['default'].Controller;
    var computed = _ember['default'].computed;
    exports['default'] = Controller.extend({

        stack: false,

        code: computed('content.status', function () {
            return this.get('content.status') > 200 ? this.get('content.status') : 500;
        }),

        message: computed('content.statusText', function () {
            if (this.get('code') === 404) {
                return 'Page not found';
            }

            return this.get('content.statusText') !== 'error' ? this.get('content.statusText') : 'Internal Server Error';
        })
    });
});
define('ghost/controllers/feature', ['exports', 'ember'], function (exports, _ember) {
    var Controller = _ember['default'].Controller;
    var PromiseProxyMixin = _ember['default'].PromiseProxyMixin;
    var computed = _ember['default'].computed;
    var alias = computed.alias;
    exports['default'] = Controller.extend(PromiseProxyMixin, {

        setting: alias('content'),

        labs: computed('isSettled', 'setting.labs', function () {
            var value = {};

            if (this.get('isFulfilled')) {
                try {
                    value = JSON.parse(this.get('setting.labs') || {});
                } catch (err) {
                    value = {};
                }
            }

            return value;
        }),

        publicAPI: computed('config.publicAPI', 'labs.publicAPI', function () {
            return this.get('config.publicAPI') || this.get('labs.publicAPI');
        }),

        init: function init() {
            this._super.apply(this, arguments);

            var promise = this.store.query('setting', { type: 'blog,theme' }).then(function (settings) {
                return settings.get('firstObject');
            });

            this.set('promise', promise);
        }
    });
});
define('ghost/controllers/modals/copy-html', ['exports', 'ember'], function (exports, _ember) {
    var Controller = _ember['default'].Controller;
    var computed = _ember['default'].computed;
    var alias = computed.alias;
    exports['default'] = Controller.extend({
        generatedHTML: alias('model.generatedHTML')
    });
});
define('ghost/controllers/modals/delete-all', ['exports', 'ember', 'ic-ajax'], function (exports, _ember, _icAjax) {
    var Controller = _ember['default'].Controller;
    var inject = _ember['default'].inject;
    exports['default'] = Controller.extend({
        ghostPaths: inject.service('ghost-paths'),
        notifications: inject.service(),

        confirm: {
            accept: {
                text: 'Delete',
                buttonClass: 'btn btn-red'
            },
            reject: {
                text: 'Cancel',
                buttonClass: 'btn btn-default btn-minor'
            }
        },

        actions: {
            confirmAccept: function confirmAccept() {
                var _this = this;

                (0, _icAjax.request)(this.get('ghostPaths.url').api('db'), {
                    type: 'DELETE'
                }).then(function () {
                    _this.get('notifications').showAlert('All content deleted from database.', { type: 'success', key: 'all-content.delete.success' });
                    _this.store.unloadAll('post');
                    _this.store.unloadAll('tag');
                })['catch'](function (response) {
                    _this.get('notifications').showAPIError(response, { key: 'all-content.delete' });
                });
            },

            confirmReject: function confirmReject() {
                return false;
            }
        }
    });
});
define('ghost/controllers/modals/delete-post', ['exports', 'ember'], function (exports, _ember) {
    var Controller = _ember['default'].Controller;
    var inject = _ember['default'].inject;
    exports['default'] = Controller.extend({
        dropdown: inject.service(),
        notifications: inject.service(),

        confirm: {
            accept: {
                text: 'Delete',
                buttonClass: 'btn btn-red'
            },
            reject: {
                text: 'Cancel',
                buttonClass: 'btn btn-default btn-minor'
            }
        },

        actions: {
            confirmAccept: function confirmAccept() {
                var _this = this;

                var model = this.get('model');

                // definitely want to clear the data store and post of any unsaved, client-generated tags
                model.updateTags();

                model.destroyRecord().then(function () {
                    _this.get('dropdown').closeDropdowns();
                    _this.get('notifications').closeAlerts('post.delete');
                    _this.transitionToRoute('posts.index');
                }, function () {
                    _this.get('notifications').showAlert('Your post could not be deleted. Please try again.', { type: 'error', key: 'post.delete.failed' });
                });
            },

            confirmReject: function confirmReject() {
                return false;
            }
        }
    });
});
define('ghost/controllers/modals/delete-tag', ['exports', 'ember'], function (exports, _ember) {
    var Controller = _ember['default'].Controller;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    exports['default'] = Controller.extend({
        application: inject.controller(),
        notifications: inject.service(),

        postInflection: computed('model.count.posts', function () {
            return this.get('model.count.posts') > 1 ? 'posts' : 'post';
        }),

        actions: {
            confirmAccept: function confirmAccept() {
                var _this = this;

                var tag = this.get('model');

                this.send('closeMenus');

                tag.destroyRecord().then(function () {
                    var currentRoute = _this.get('application.currentRouteName') || '';

                    if (currentRoute.match(/^settings\.tags/)) {
                        _this.transitionToRoute('settings.tags.index');
                    }
                })['catch'](function (error) {
                    _this.get('notifications').showAPIError(error, { key: 'tag.delete' });
                });
            },

            confirmReject: function confirmReject() {
                return false;
            }
        },

        confirm: {
            accept: {
                text: 'Delete',
                buttonClass: 'btn btn-red'
            },
            reject: {
                text: 'Cancel',
                buttonClass: 'btn btn-default btn-minor'
            }
        }
    });
});
define('ghost/controllers/modals/delete-user', ['exports', 'ember'], function (exports, _ember) {
    var Controller = _ember['default'].Controller;
    var PromiseProxyMixin = _ember['default'].PromiseProxyMixin;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    var alias = computed.alias;
    exports['default'] = Controller.extend({
        notifications: inject.service(),

        userPostCount: computed('model.id', function () {
            var query = {
                filter: 'author:' + this.get('model.slug'),
                status: 'all'
            };

            var promise = this.store.query('post', query).then(function (results) {
                return results.meta.pagination.total;
            });

            return _ember['default'].Object.extend(PromiseProxyMixin, {
                count: alias('content'),

                inflection: computed('count', function () {
                    return this.get('count') > 1 ? 'posts' : 'post';
                })
            }).create({ promise: promise });
        }),

        confirm: {
            accept: {
                text: 'Delete User',
                buttonClass: 'btn btn-red'
            },
            reject: {
                text: 'Cancel',
                buttonClass: 'btn btn-default btn-minor'
            }
        },

        actions: {
            confirmAccept: function confirmAccept() {
                var _this = this;

                var user = this.get('model');

                user.destroyRecord().then(function () {
                    _this.get('notifications').closeAlerts('user.delete');
                    _this.store.unloadAll('post');
                    _this.transitionToRoute('team');
                }, function () {
                    _this.get('notifications').showAlert('The user could not be deleted. Please try again.', { type: 'error', key: 'user.delete.failed' });
                });
            },

            confirmReject: function confirmReject() {
                return false;
            }
        }
    });
});
define('ghost/controllers/modals/invite-new-user', ['exports', 'ember', 'ghost/mixins/validation-engine'], function (exports, _ember, _ghostMixinsValidationEngine) {
    var Controller = _ember['default'].Controller;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    var observer = _ember['default'].observer;
    exports['default'] = Controller.extend(_ghostMixinsValidationEngine['default'], {
        notifications: inject.service(),

        validationType: 'signup',

        role: null,
        authorRole: null,

        roles: computed(function () {
            return this.store.query('role', { permissions: 'assign' });
        }),

        // Used to set the initial value for the dropdown
        authorRoleObserver: observer('roles.@each.role', function () {
            var _this = this;

            this.get('roles').then(function (roles) {
                var authorRole = roles.findBy('name', 'Author');

                _this.set('authorRole', authorRole);

                if (!_this.get('role')) {
                    _this.set('role', authorRole);
                }
            });
        }),

        confirm: {
            accept: {
                text: 'send invitation now'
            },
            reject: {
                buttonClass: 'hidden'
            }
        },

        confirmReject: function confirmReject() {
            return false;
        },

        actions: {
            setRole: function setRole(role) {
                this.set('role', role);
            },

            confirmAccept: function confirmAccept() {
                var _this2 = this;

                var email = this.get('email');
                var role = this.get('role');
                var validationErrors = this.get('errors.messages');
                var newUser = undefined;

                // reset the form and close the modal
                this.set('email', '');
                this.set('role', this.get('authorRole'));

                this.store.findAll('user', { reload: true }).then(function (result) {
                    var invitedUser = result.findBy('email', email);

                    if (invitedUser) {
                        if (invitedUser.get('status') === 'invited' || invitedUser.get('status') === 'invited-pending') {
                            _this2.get('notifications').showAlert('A user with that email address was already invited.', { type: 'warn', key: 'invite.send.already-invited' });
                        } else {
                            _this2.get('notifications').showAlert('A user with that email address already exists.', { type: 'warn', key: 'invite.send.user-exists' });
                        }
                    } else {
                        newUser = _this2.store.createRecord('user', {
                            email: email,
                            role: role,
                            status: 'invited'
                        });

                        newUser.save().then(function () {
                            var notificationText = 'Invitation sent! (' + email + ')';

                            // If sending the invitation email fails, the API will still return a status of 201
                            // but the user's status in the response object will be 'invited-pending'.
                            if (newUser.get('status') === 'invited-pending') {
                                _this2.get('notifications').showAlert('Invitation email was not sent.  Please try resending.', { type: 'error', key: 'invite.send.failed' });
                            } else {
                                _this2.get('notifications').closeAlerts('invite.send');
                                _this2.get('notifications').showNotification(notificationText);
                            }
                        })['catch'](function (errors) {
                            newUser.deleteRecord();
                            // TODO: user model includes ValidationEngine mixin so
                            // save is overridden in order to validate, we probably
                            // want to use inline-validations here and only show an
                            // alert if we have an actual error
                            if (errors) {
                                _this2.get('notifications').showErrors(errors, { key: 'invite.send' });
                            } else if (validationErrors) {
                                _this2.get('notifications').showAlert(validationErrors.toString(), { type: 'error', key: 'invite.send.validation-error' });
                            }
                        })['finally'](function () {
                            _this2.get('errors').clear();
                        });
                    }
                });
            }
        }
    });
});
define('ghost/controllers/modals/leave-editor', ['exports', 'ember'], function (exports, _ember) {
    var Controller = _ember['default'].Controller;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    var isArray = _ember['default'].isArray;
    var alias = computed.alias;
    exports['default'] = Controller.extend({
        notifications: inject.service(),

        args: alias('model'),

        confirm: {
            accept: {
                text: 'Leave',
                buttonClass: 'btn btn-red'
            },
            reject: {
                text: 'Stay',
                buttonClass: 'btn btn-default btn-minor'
            }
        },

        actions: {
            confirmAccept: function confirmAccept() {
                var args = this.get('args');
                var editorController = undefined,
                    model = undefined,
                    transition = undefined;

                if (isArray(args)) {
                    editorController = args[0];
                    transition = args[1];
                    model = editorController.get('model');
                }

                if (!transition || !editorController) {
                    this.get('notifications').showNotification('Sorry, there was an error in the application. Please let the Ghost team know what happened.', { type: 'error' });

                    return true;
                }

                // definitely want to clear the data store and post of any unsaved, client-generated tags
                model.updateTags();

                if (model.get('isNew')) {
                    // the user doesn't want to save the new, unsaved post, so delete it.
                    model.deleteRecord();
                } else {
                    // roll back changes on model props
                    model.rollbackAttributes();
                }

                // setting hasDirtyAttributes to false here allows willTransition on the editor route to succeed
                editorController.set('hasDirtyAttributes', false);

                // since the transition is now certain to complete, we can unset window.onbeforeunload here
                window.onbeforeunload = null;

                transition.retry();
            },

            confirmReject: function confirmReject() {}
        }
    });
});
define('ghost/controllers/modals/signin', ['exports', 'ember', 'ghost/mixins/validation-engine'], function (exports, _ember, _ghostMixinsValidationEngine) {
    var $ = _ember['default'].$;
    var Controller = _ember['default'].Controller;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    exports['default'] = Controller.extend(_ghostMixinsValidationEngine['default'], {
        validationType: 'signin',
        submitting: false,

        application: inject.controller(),
        notifications: inject.service(),
        session: inject.service(),

        identification: computed('session.user.email', function () {
            return this.get('session.user.email');
        }),

        actions: {
            authenticate: function authenticate() {
                var _this = this;

                var appController = this.get('application');
                var authStrategy = 'authenticator:oauth2';

                appController.set('skipAuthSuccessHandler', true);

                this.get('session').authenticate(authStrategy, this.get('identification'), this.get('password')).then(function () {
                    _this.send('closeModal');
                    _this.set('password', '');
                    _this.get('notifications').closeAlerts('post.save');
                })['catch'](function () {
                    // if authentication fails a rejected promise will be returned.
                    // it needs to be caught so it doesn't generate an exception in the console,
                    // but it's actually "handled" by the sessionAuthenticationFailed action handler.
                })['finally'](function () {
                    _this.toggleProperty('submitting');
                    appController.set('skipAuthSuccessHandler', undefined);
                });
            },

            validateAndAuthenticate: function validateAndAuthenticate() {
                var _this2 = this;

                this.toggleProperty('submitting');

                // Manually trigger events for input fields, ensuring legacy compatibility with
                // browsers and password managers that don't send proper events on autofill
                $('#login').find('input').trigger('change');

                this.validate({ format: false }).then(function () {
                    _this2.send('authenticate');
                })['catch'](function (errors) {
                    _this2.get('notifications').showErrors(errors);
                });
            },

            confirmAccept: function confirmAccept() {
                this.send('validateAndAuthenticate');
            }
        }
    });
});
define('ghost/controllers/modals/transfer-owner', ['exports', 'ember', 'ic-ajax'], function (exports, _ember, _icAjax) {
    var Controller = _ember['default'].Controller;
    var inject = _ember['default'].inject;
    var isArray = _ember['default'].isArray;
    exports['default'] = Controller.extend({
        dropdown: inject.service(),
        ghostPaths: inject.service('ghost-paths'),
        notifications: inject.service(),

        confirm: {
            accept: {
                text: 'Yep - I\'m sure',
                buttonClass: 'btn btn-red'
            },
            reject: {
                text: 'Cancel',
                buttonClass: 'btn btn-default btn-minor'
            }
        },

        actions: {
            confirmAccept: function confirmAccept() {
                var _this = this;

                var user = this.get('model');
                var url = this.get('ghostPaths.url').api('users', 'owner');

                this.get('dropdown').closeDropdowns();

                (0, _icAjax.request)(url, {
                    type: 'PUT',
                    data: {
                        owner: [{
                            id: user.get('id')
                        }]
                    }
                }).then(function (response) {
                    // manually update the roles for the users that just changed roles
                    // because store.pushPayload is not working with embedded relations
                    if (response && isArray(response.users)) {
                        response.users.forEach(function (userJSON) {
                            var user = _this.store.peekRecord('user', userJSON.id);
                            var role = _this.store.peekRecord('role', userJSON.roles[0].id);

                            user.set('role', role);
                        });
                    }

                    _this.get('notifications').showAlert('Ownership successfully transferred to ' + user.get('name'), { type: 'success', key: 'owner.transfer.success' });
                })['catch'](function (error) {
                    _this.get('notifications').showAPIError(error, { key: 'owner.transfer' });
                });
            },

            confirmReject: function confirmReject() {
                return false;
            }
        }
    });
});
define('ghost/controllers/modals/upload', ['exports', 'ember'], function (exports, _ember) {
    var Controller = _ember['default'].Controller;
    var inject = _ember['default'].inject;
    exports['default'] = Controller.extend({
        notifications: inject.service(),

        acceptEncoding: 'image/*',

        actions: {
            confirmAccept: function confirmAccept() {
                var notifications = this.get('notifications');

                this.get('model').save().then(function (model) {
                    return model;
                })['catch'](function (err) {
                    notifications.showAPIError(err, { key: 'image.upload' });
                });
            },

            confirmReject: function confirmReject() {
                return false;
            }
        }
    });
});
define('ghost/controllers/object', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller;
});
define('ghost/controllers/post-settings-menu', ['exports', 'ember', 'ghost/utils/date-formatting', 'ghost/mixins/settings-menu-controller', 'ghost/models/slug-generator', 'ghost/utils/bound-one-way', 'ghost/utils/isNumber'], function (exports, _ember, _ghostUtilsDateFormatting, _ghostMixinsSettingsMenuController, _ghostModelsSlugGenerator, _ghostUtilsBoundOneWay, _ghostUtilsIsNumber) {
    var $ = _ember['default'].$;
    var ArrayProxy = _ember['default'].ArrayProxy;
    var Controller = _ember['default'].Controller;
    var Handlebars = _ember['default'].Handlebars;
    var PromiseProxyMixin = _ember['default'].PromiseProxyMixin;
    var RSVP = _ember['default'].RSVP;
    var computed = _ember['default'].computed;
    var guidFor = _ember['default'].guidFor;
    var inject = _ember['default'].inject;
    var isArray = _ember['default'].isArray;
    var observer = _ember['default'].observer;
    var run = _ember['default'].run;
    exports['default'] = Controller.extend(_ghostMixinsSettingsMenuController['default'], {
        debounceId: null,
        lastPromise: null,
        selectedAuthor: null,
        uploaderReference: null,

        application: inject.controller(),
        config: inject.service(),
        ghostPaths: inject.service('ghost-paths'),
        notifications: inject.service(),
        session: inject.service(),

        initializeSelectedAuthor: observer('model', function () {
            var _this = this;

            return this.get('model.author').then(function (author) {
                _this.set('selectedAuthor', author);
                return author;
            });
        }),

        authors: computed(function () {
            // Loaded asynchronously, so must use promise proxies.
            var deferred = {};

            deferred.promise = this.store.query('user', { limit: 'all' }).then(function (users) {
                return users.rejectBy('id', 'me').sortBy('name');
            }).then(function (users) {
                return users.filter(function (user) {
                    return user.get('active');
                });
            });

            return ArrayProxy.extend(PromiseProxyMixin).create(deferred);
        }),

        slugValue: (0, _ghostUtilsBoundOneWay['default'])('model.slug'),

        // Lazy load the slug generator
        slugGenerator: computed(function () {
            return _ghostModelsSlugGenerator['default'].create({
                ghostPaths: this.get('ghostPaths'),
                slugType: 'post'
            });
        }),

        // Requests slug from title
        generateAndSetSlug: function generateAndSetSlug(destination) {
            var _this2 = this;

            var title = this.get('model.titleScratch');
            var afterSave = this.get('lastPromise');
            var promise = undefined;

            // Only set an "untitled" slug once per post
            if (title === '(Untitled)' && this.get('model.slug')) {
                return;
            }

            promise = RSVP.resolve(afterSave).then(function () {
                return _this2.get('slugGenerator').generateSlug(title).then(function (slug) {
                    _this2.set(destination, slug);
                })['catch'](function () {
                    // Nothing to do (would be nice to log this somewhere though),
                    // but a rejected promise needs to be handled here so that a resolved
                    // promise is returned.
                });
            });

            this.set('lastPromise', promise);
        },

        metaTitleScratch: (0, _ghostUtilsBoundOneWay['default'])('model.meta_title'),
        metaDescriptionScratch: (0, _ghostUtilsBoundOneWay['default'])('model.meta_description'),

        seoTitle: computed('model.titleScratch', 'metaTitleScratch', function () {
            var metaTitle = this.get('metaTitleScratch') || '';

            metaTitle = metaTitle.length > 0 ? metaTitle : this.get('model.titleScratch');

            if (metaTitle.length > 70) {
                metaTitle = metaTitle.substring(0, 70).trim();
                metaTitle = Handlebars.Utils.escapeExpression(metaTitle);
                metaTitle = _ember['default'].String.htmlSafe(metaTitle + '&hellip;');
            }

            return metaTitle;
        }),

        seoDescription: computed('model.scratch', 'metaDescriptionScratch', function () {
            var metaDescription = this.get('metaDescriptionScratch') || '';
            var html = '';
            var el = undefined,
                placeholder = undefined;

            if (metaDescription.length > 0) {
                placeholder = metaDescription;
            } else {
                el = $('.rendered-markdown');

                // Get rendered markdown
                if (el !== undefined && el.length > 0) {
                    html = el.clone();
                    html.find('.js-drop-zone').remove();
                    html = html[0].innerHTML;
                }

                // Strip HTML
                placeholder = $('<div />', { html: html }).text();
                // Replace new lines and trim
                placeholder = placeholder.replace(/\n+/g, ' ').trim();
            }

            if (placeholder.length > 156) {
                // Limit to 156 characters
                placeholder = placeholder.substring(0, 156).trim();
                placeholder = Handlebars.Utils.escapeExpression(placeholder);
                placeholder = _ember['default'].String.htmlSafe(placeholder + '&hellip;');
            }

            return placeholder;
        }),

        seoURL: computed('model.slug', 'config.blogUrl', function () {
            var blogUrl = this.get('config.blogUrl');
            var seoSlug = this.get('model.slug') ? this.get('model.slug') : '';
            var seoURL = blogUrl + '/' + seoSlug;

            // only append a slash to the URL if the slug exists
            if (seoSlug) {
                seoURL += '/';
            }

            if (seoURL.length > 70) {
                seoURL = seoURL.substring(0, 70).trim();
                seoURL = _ember['default'].String.htmlSafe(seoURL + '&hellip;');
            }

            return seoURL;
        }),

        // observe titleScratch, keeping the post's slug in sync
        // with it until saved for the first time.
        addTitleObserver: observer('model', function () {
            if (this.get('model.isNew') || this.get('model.title') === '(Untitled)') {
                this.addObserver('model.titleScratch', this, 'titleObserver');
            }
        }),

        titleObserver: function titleObserver() {
            var title = this.get('model.title');
            var debounceId = undefined;

            // generate a slug if a post is new and doesn't have a title yet or
            // if the title is still '(Untitled)' and the slug is unaltered.
            if (this.get('model.isNew') && !title || title === '(Untitled)') {
                debounceId = run.debounce(this, 'generateAndSetSlug', 'model.slug', 700);
            }

            this.set('debounceId', debounceId);
        },

        // live-query of all tags for tag input autocomplete
        availableTags: computed(function () {
            return this.get('store').filter('tag', { limit: 'all' }, function () {
                return true;
            });
        }),

        showErrors: function showErrors(errors) {
            errors = isArray(errors) ? errors : [errors];
            this.get('notifications').showErrors(errors);
        },

        actions: {
            discardEnter: function discardEnter() {
                return false;
            },

            togglePage: function togglePage() {
                var _this3 = this;

                this.toggleProperty('model.page');

                // If this is a new post.  Don't save the model.  Defer the save
                // to the user pressing the save button
                if (this.get('model.isNew')) {
                    return;
                }

                this.get('model').save()['catch'](function (errors) {
                    _this3.showErrors(errors);
                    _this3.get('model').rollbackAttributes();
                });
            },

            toggleFeatured: function toggleFeatured() {
                var _this4 = this;

                this.toggleProperty('model.featured');

                // If this is a new post.  Don't save the model.  Defer the save
                // to the user pressing the save button
                if (this.get('model.isNew')) {
                    return;
                }

                this.get('model').save(this.get('saveOptions'))['catch'](function (errors) {
                    _this4.showErrors(errors);
                    _this4.get('model').rollbackAttributes();
                });
            },

            /**
             * triggered by user manually changing slug
             */
            updateSlug: function updateSlug(newSlug) {
                var _this5 = this;

                var slug = this.get('model.slug');

                newSlug = newSlug || slug;
                newSlug = newSlug && newSlug.trim();

                // Ignore unchanged slugs or candidate slugs that are empty
                if (!newSlug || slug === newSlug) {
                    // reset the input to its previous state
                    this.set('slugValue', slug);

                    return;
                }

                this.get('slugGenerator').generateSlug(newSlug).then(function (serverSlug) {
                    // If after getting the sanitized and unique slug back from the API
                    // we end up with a slug that matches the existing slug, abort the change
                    if (serverSlug === slug) {
                        return;
                    }

                    // Because the server transforms the candidate slug by stripping
                    // certain characters and appending a number onto the end of slugs
                    // to enforce uniqueness, there are cases where we can get back a
                    // candidate slug that is a duplicate of the original except for
                    // the trailing incrementor (e.g., this-is-a-slug and this-is-a-slug-2)

                    // get the last token out of the slug candidate and see if it's a number
                    var slugTokens = serverSlug.split('-');
                    var check = Number(slugTokens.pop());

                    // if the candidate slug is the same as the existing slug except
                    // for the incrementor then the existing slug should be used
                    if ((0, _ghostUtilsIsNumber['default'])(check) && check > 0) {
                        if (slug === slugTokens.join('-') && serverSlug !== newSlug) {
                            _this5.set('slugValue', slug);

                            return;
                        }
                    }

                    _this5.set('model.slug', serverSlug);

                    if (_this5.hasObserverFor('model.titleScratch')) {
                        _this5.removeObserver('model.titleScratch', _this5, 'titleObserver');
                    }

                    // If this is a new post.  Don't save the model.  Defer the save
                    // to the user pressing the save button
                    if (_this5.get('model.isNew')) {
                        return;
                    }

                    return _this5.get('model').save();
                })['catch'](function (errors) {
                    _this5.showErrors(errors);
                    _this5.get('model').rollbackAttributes();
                });
            },

            /**
             * Parse user's set published date.
             * Action sent by post settings menu view.
             * (#1351)
             */
            setPublishedAt: function setPublishedAt(userInput) {
                var _this6 = this;

                var newPublishedAt = (0, _ghostUtilsDateFormatting.parseDateString)(userInput);
                var publishedAt = moment(this.get('model.published_at'));
                var errMessage = '';

                if (!userInput) {
                    // Clear out the published_at field for a draft
                    if (this.get('model.isDraft')) {
                        this.set('model.published_at', null);
                    }

                    return;
                }

                // Validate new Published date
                if (!newPublishedAt.isValid()) {
                    errMessage = 'Published Date must be a valid date with format: ' + 'DD MMM YY @ HH:mm (e.g. 6 Dec 14 @ 15:00)';
                }
                if (newPublishedAt.diff(new Date(), 'h') > 0) {
                    errMessage = 'Published Date cannot currently be in the future.';
                }

                // If errors, notify and exit.
                if (errMessage) {
                    this.get('model.errors').add('post-setting-date', errMessage);
                    return;
                }

                // Do nothing if the user didn't actually change the date
                if (publishedAt && publishedAt.isSame(newPublishedAt)) {
                    return;
                }

                // Validation complete
                this.set('model.published_at', newPublishedAt);

                // If this is a new post.  Don't save the model.  Defer the save
                // to the user pressing the save button
                if (this.get('model.isNew')) {
                    return;
                }

                this.get('model').save()['catch'](function (errors) {
                    _this6.showErrors(errors);
                    _this6.get('model').rollbackAttributes();
                });
            },

            setMetaTitle: function setMetaTitle(metaTitle) {
                var property = 'meta_title';
                var model = this.get('model');
                var currentTitle = model.get(property) || '';

                // Only update if the title has changed
                if (currentTitle === metaTitle) {
                    return;
                }

                model.set(property, metaTitle);

                // If this is a new post.  Don't save the model.  Defer the save
                // to the user pressing the save button
                if (model.get('isNew')) {
                    return;
                }

                model.save();
            },

            setMetaDescription: function setMetaDescription(metaDescription) {
                var property = 'meta_description';
                var model = this.get('model');
                var currentDescription = model.get(property) || '';

                // Only update if the description has changed
                if (currentDescription === metaDescription) {
                    return;
                }

                model.set(property, metaDescription);

                // If this is a new post.  Don't save the model.  Defer the save
                // to the user pressing the save button
                if (model.get('isNew')) {
                    return;
                }

                model.save();
            },

            setCoverImage: function setCoverImage(image) {
                var _this7 = this;

                this.set('model.image', image);

                if (this.get('model.isNew')) {
                    return;
                }

                this.get('model').save()['catch'](function (errors) {
                    _this7.showErrors(errors);
                    _this7.get('model').rollbackAttributes();
                });
            },

            clearCoverImage: function clearCoverImage() {
                var _this8 = this;

                this.set('model.image', '');

                if (this.get('model.isNew')) {
                    return;
                }

                this.get('model').save()['catch'](function (errors) {
                    _this8.showErrors(errors);
                    _this8.get('model').rollbackAttributes();
                });
            },

            resetUploader: function resetUploader() {
                var uploader = this.get('uploaderReference');

                if (uploader && uploader[0]) {
                    uploader[0].uploaderUi.reset();
                }
            },

            resetPubDate: function resetPubDate() {
                this.set('publishedAtValue', '');
            },

            closeNavMenu: function closeNavMenu() {
                this.get('application').send('closeNavMenu');
            },

            changeAuthor: function changeAuthor(newAuthor) {
                var _this9 = this;

                var author = this.get('model.author');
                var model = this.get('model');

                // return if nothing changed
                if (newAuthor.get('id') === author.get('id')) {
                    return;
                }

                model.set('author', newAuthor);

                // if this is a new post (never been saved before), don't try to save it
                if (this.get('model.isNew')) {
                    return;
                }

                model.save()['catch'](function (errors) {
                    _this9.showErrors(errors);
                    _this9.set('selectedAuthor', author);
                    model.rollbackAttributes();
                });
            },

            addTag: function addTag(tagName, index) {
                var _this10 = this;

                var currentTags = this.get('model.tags');
                var currentTagNames = currentTags.map(function (tag) {
                    return tag.get('name').toLowerCase();
                });
                var availableTagNames = undefined,
                    tagToAdd = undefined;

                tagName = tagName.trim();

                // abort if tag is already selected
                if (currentTagNames.contains(tagName.toLowerCase())) {
                    return;
                }

                this.get('availableTags').then(function (availableTags) {
                    availableTagNames = availableTags.map(function (tag) {
                        return tag.get('name').toLowerCase();
                    });

                    // find existing tag or create new
                    if (availableTagNames.contains(tagName.toLowerCase())) {
                        tagToAdd = availableTags.find(function (tag) {
                            return tag.get('name').toLowerCase() === tagName.toLowerCase();
                        });
                    } else {
                        tagToAdd = _this10.get('store').createRecord('tag', {
                            name: tagName
                        });

                        // we need to set a UUID so that selectize has a unique value
                        // it will be ignored when sent to the server
                        tagToAdd.set('uuid', guidFor(tagToAdd));
                    }

                    // push tag onto post relationship
                    if (tagToAdd) {
                        _this10.get('model.tags').insertAt(index, tagToAdd);
                    }
                });
            },

            removeTag: function removeTag(tag) {
                this.get('model.tags').removeObject(tag);

                if (tag.get('isNew')) {
                    tag.destroyRecord();
                }
            }
        }
    });
});
define('ghost/controllers/posts', ['exports', 'ember'], function (exports, _ember) {
    var Controller = _ember['default'].Controller;
    var compare = _ember['default'].compare;
    var computed = _ember['default'].computed;
    var equal = computed.equal;

    // a custom sort function is needed in order to sort the posts list the same way the server would:
    //     status: ASC
    //     published_at: DESC
    //     updated_at: DESC
    //     id: DESC
    function comparator(item1, item2) {
        var updated1 = item1.get('updated_at');
        var updated2 = item2.get('updated_at');
        var idResult = undefined,
            publishedAtResult = undefined,
            statusResult = undefined,
            updatedAtResult = undefined;

        // when `updated_at` is undefined, the model is still
        // being written to with the results from the server
        if (item1.get('isNew') || !updated1) {
            return -1;
        }

        if (item2.get('isNew') || !updated2) {
            return 1;
        }

        idResult = compare(parseInt(item1.get('id')), parseInt(item2.get('id')));
        statusResult = compare(item1.get('status'), item2.get('status'));
        updatedAtResult = compare(updated1.valueOf(), updated2.valueOf());
        publishedAtResult = publishedAtCompare(item1, item2);

        if (statusResult === 0) {
            if (publishedAtResult === 0) {
                if (updatedAtResult === 0) {
                    // This should be DESC
                    return idResult * -1;
                }
                // This should be DESC
                return updatedAtResult * -1;
            }
            // This should be DESC
            return publishedAtResult * -1;
        }

        return statusResult;
    }

    function publishedAtCompare(item1, item2) {
        var published1 = item1.get('published_at');
        var published2 = item2.get('published_at');

        if (!published1 && !published2) {
            return 0;
        }

        if (!published1 && published2) {
            return -1;
        }

        if (!published2 && published1) {
            return 1;
        }

        return compare(published1.valueOf(), published2.valueOf());
    }

    exports['default'] = Controller.extend({

        // See PostsRoute's shortcuts
        postListFocused: equal('keyboardFocus', 'postList'),
        postContentFocused: equal('keyboardFocus', 'postContent'),

        sortedPosts: computed('model.@each.status', 'model.@each.published_at', 'model.@each.isNew', 'model.@each.updated_at', function () {
            var postsArray = this.get('model').toArray();

            return postsArray.sort(comparator);
        }),

        actions: {
            showPostContent: function showPostContent(post) {
                if (!post) {
                    return;
                }

                this.transitionToRoute('posts.post', post);
            }
        }
    });
});
define('ghost/controllers/reset', ['exports', 'ember', 'ic-ajax', 'ghost/mixins/validation-engine'], function (exports, _ember, _icAjax, _ghostMixinsValidationEngine) {
    var Controller = _ember['default'].Controller;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    exports['default'] = Controller.extend(_ghostMixinsValidationEngine['default'], {
        newPassword: '',
        ne2Password: '',
        token: '',
        submitting: false,
        flowErrors: '',

        validationType: 'reset',

        ghostPaths: inject.service('ghost-paths'),
        notifications: inject.service(),
        session: inject.service(),

        email: computed('token', function () {
            // The token base64 encodes the email (and some other stuff),
            // each section is divided by a '|'. Email comes second.
            return atob(this.get('token')).split('|')[1];
        }),

        // Used to clear sensitive information
        clearData: function clearData() {
            this.setProperties({
                newPassword: '',
                ne2Password: '',
                token: ''
            });
        },

        actions: {
            submit: function submit() {
                var _this = this;

                var credentials = this.getProperties('newPassword', 'ne2Password', 'token');

                this.set('flowErrors', '');
                this.get('hasValidated').addObjects(['newPassword', 'ne2Password']);
                this.validate().then(function () {
                    _this.toggleProperty('submitting');
                    (0, _icAjax.request)({
                        url: _this.get('ghostPaths.url').api('authentication', 'passwordreset'),
                        type: 'PUT',
                        data: {
                            passwordreset: [credentials]
                        }
                    }).then(function (resp) {
                        _this.toggleProperty('submitting');
                        _this.get('notifications').showAlert(resp.passwordreset[0].message, { type: 'warn', delayed: true, key: 'password.reset' });
                        _this.get('session').authenticate('authenticator:oauth2', _this.get('email'), credentials.newPassword);
                    })['catch'](function (response) {
                        _this.get('notifications').showAPIError(response, { key: 'password.reset' });
                        _this.toggleProperty('submitting');
                    });
                })['catch'](function (error) {
                    if (_this.get('errors.newPassword')) {
                        _this.set('flowErrors', _this.get('errors.newPassword')[0].message);
                    }

                    if (_this.get('errors.ne2Password')) {
                        _this.set('flowErrors', _this.get('errors.ne2Password')[0].message);
                    }

                    if (_this.get('errors.length') === 0) {
                        throw error;
                    }
                });
            }
        }
    });
});
define('ghost/controllers/settings/code-injection', ['exports', 'ember', 'ghost/mixins/settings-save'], function (exports, _ember, _ghostMixinsSettingsSave) {
    var Controller = _ember['default'].Controller;
    var inject = _ember['default'].inject;
    exports['default'] = Controller.extend(_ghostMixinsSettingsSave['default'], {
        notifications: inject.service(),

        save: function save() {
            var notifications = this.get('notifications');

            return this.get('model').save()['catch'](function (error) {
                notifications.showAPIError(error, { key: 'code-injection.save' });
            });
        }
    });
});
define('ghost/controllers/settings/general', ['exports', 'ember', 'ghost/mixins/settings-save', 'ghost/utils/random-password'], function (exports, _ember, _ghostMixinsSettingsSave, _ghostUtilsRandomPassword) {
    var Controller = _ember['default'].Controller;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    var observer = _ember['default'].observer;
    exports['default'] = Controller.extend(_ghostMixinsSettingsSave['default'], {
        notifications: inject.service(),
        config: inject.service(),

        selectedTheme: computed('model.activeTheme', 'themes', function () {
            var activeTheme = this.get('model.activeTheme');
            var themes = this.get('themes');
            var selectedTheme = undefined;

            themes.forEach(function (theme) {
                if (theme.name === activeTheme) {
                    selectedTheme = theme;
                }
            });

            return selectedTheme;
        }),

        logoImageSource: computed('model.logo', function () {
            return this.get('model.logo') || '';
        }),

        coverImageSource: computed('model.cover', function () {
            return this.get('model.cover') || '';
        }),

        isDatedPermalinks: computed('model.permalinks', {
            set: function set(key, value) {
                this.set('model.permalinks', value ? '/:year/:month/:day/:slug/' : '/:slug/');

                var slugForm = this.get('model.permalinks');
                return slugForm !== '/:slug/';
            },

            get: function get() {
                var slugForm = this.get('model.permalinks');

                return slugForm !== '/:slug/';
            }
        }),

        themes: computed(function () {
            return this.get('model.availableThemes').reduce(function (themes, t) {
                var theme = {};

                theme.name = t.name;
                theme.label = t['package'] ? t['package'].name + ' - ' + t['package'].version : t.name;
                theme['package'] = t['package'];
                theme.active = !!t.active;

                themes.push(theme);

                return themes;
            }, []);
        }).readOnly(),

        generatePassword: observer('model.isPrivate', function () {
            this.get('model.errors').remove('password');
            if (this.get('model.isPrivate') && this.get('model.hasDirtyAttributes')) {
                this.get('model').set('password', (0, _ghostUtilsRandomPassword['default'])());
            }
        }),

        save: function save() {
            var notifications = this.get('notifications');
            var config = this.get('config');

            return this.get('model').save().then(function (model) {
                config.set('blogTitle', model.get('title'));

                return model;
            })['catch'](function (error) {
                if (error) {
                    notifications.showAPIError(error, { key: 'settings.save' });
                }
            });
        },

        actions: {
            validate: function validate(property) {
                this.get('model').validate({ property: property });
            },

            checkPostsPerPage: function checkPostsPerPage() {
                var postsPerPage = this.get('model.postsPerPage');

                if (postsPerPage < 1 || postsPerPage > 1000 || isNaN(postsPerPage)) {
                    this.set('model.postsPerPage', 5);
                }
            },

            setTheme: function setTheme(theme) {
                this.set('model.activeTheme', theme.name);
            }
        }
    });
});
define('ghost/controllers/settings/labs', ['exports', 'ember', 'ic-ajax'], function (exports, _ember, _icAjax) {
    var $ = _ember['default'].$;
    var Controller = _ember['default'].Controller;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    exports['default'] = Controller.extend({
        uploadButtonText: 'Import',
        importErrors: '',
        submitting: false,

        ghostPaths: inject.service('ghost-paths'),
        notifications: inject.service(),
        session: inject.service(),
        feature: inject.controller(),

        labsJSON: computed('model.labs', function () {
            return JSON.parse(this.get('model.labs') || {});
        }),

        saveLabs: function saveLabs(optionName, optionValue) {
            var _this = this;

            var labsJSON = this.get('labsJSON');

            // Set new value in the JSON object
            labsJSON[optionName] = optionValue;

            this.set('model.labs', JSON.stringify(labsJSON));

            this.get('model').save()['catch'](function (errors) {
                _this.showErrors(errors);
                _this.get('model').rollbackAttributes();
            });
        },

        usePublicAPI: computed('feature.publicAPI', {
            get: function get() {
                return this.get('feature.publicAPI');
            },
            set: function set(key, value) {
                this.saveLabs('publicAPI', value);
                return value;
            }
        }),

        actions: {
            onUpload: function onUpload(file) {
                var _this2 = this;

                var formData = new FormData();
                var notifications = this.get('notifications');
                var currentUserId = this.get('session.user.id');

                this.set('uploadButtonText', 'Importing');
                this.set('importErrors', '');

                formData.append('importfile', file);

                (0, _icAjax.request)(this.get('ghostPaths.url').api('db'), {
                    type: 'POST',
                    data: formData,
                    dataType: 'json',
                    cache: false,
                    contentType: false,
                    processData: false
                }).then(function () {
                    // Clear the store, so that all the new data gets fetched correctly.
                    _this2.store.unloadAll();
                    // Reload currentUser and set session
                    _this2.set('session.user', _this2.store.findRecord('user', currentUserId));
                    // TODO: keep as notification, add link to view content
                    notifications.showNotification('Import successful.');
                    notifications.closeAlerts('import.upload');
                })['catch'](function (response) {
                    if (response && response.jqXHR && response.jqXHR.responseJSON && response.jqXHR.responseJSON.errors) {
                        _this2.set('importErrors', response.jqXHR.responseJSON.errors);
                    }

                    notifications.showAlert('Import Failed', { type: 'error', key: 'import.upload.failed' });
                })['finally'](function () {
                    _this2.set('uploadButtonText', 'Import');
                });
            },

            exportData: function exportData() {
                var dbUrl = this.get('ghostPaths.url').api('db');
                var accessToken = this.get('session.data.authenticated.access_token');
                var downloadURL = dbUrl + '?access_token=' + accessToken;
                var iframe = $('#iframeDownload');

                if (iframe.length === 0) {
                    iframe = $('<iframe>', { id: 'iframeDownload' }).hide().appendTo('body');
                }

                iframe.attr('src', downloadURL);
            },

            sendTestEmail: function sendTestEmail() {
                var _this3 = this;

                var notifications = this.get('notifications');

                this.toggleProperty('submitting');

                (0, _icAjax.request)(this.get('ghostPaths.url').api('mail', 'test'), {
                    type: 'POST'
                }).then(function () {
                    notifications.showAlert('Check your email for the test message.', { type: 'info', key: 'test-email.send.success' });
                    _this3.toggleProperty('submitting');
                })['catch'](function (error) {
                    if (typeof error.jqXHR !== 'undefined') {
                        notifications.showAPIError(error, { key: 'test-email.send' });
                    } else {
                        notifications.showErrors(error, { key: 'test-email.send' });
                    }
                    _this3.toggleProperty('submitting');
                });
            }
        }
    });
});
define('ghost/controllers/settings/navigation', ['exports', 'ember', 'ember-data', 'ghost/mixins/settings-save', 'ghost/mixins/validation-engine'], function (exports, _ember, _emberData, _ghostMixinsSettingsSave, _ghostMixinsValidationEngine) {
    var Controller = _ember['default'].Controller;
    var RSVP = _ember['default'].RSVP;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    var isBlank = _ember['default'].isBlank;
    var observer = _ember['default'].observer;
    var Errors = _emberData['default'].Errors;

    var emberA = _ember['default'].A;

    var NavItem = _ember['default'].Object.extend(_ghostMixinsValidationEngine['default'], {
        label: '',
        url: '',
        last: false,

        validationType: 'navItem',

        isComplete: computed('label', 'url', function () {
            return !(isBlank(this.get('label').trim()) || isBlank(this.get('url')));
        }),

        init: function init() {
            this._super.apply(this, arguments);
            this.set('errors', Errors.create());
            this.set('hasValidated', emberA());
        }
    });

    exports.NavItem = NavItem;
    exports['default'] = Controller.extend(_ghostMixinsSettingsSave['default'], {
        config: inject.service(),
        notifications: inject.service(),

        blogUrl: computed('config.blogUrl', function () {
            var url = this.get('config.blogUrl');

            return url.slice(-1) !== '/' ? url + '/' : url;
        }),

        navigationItems: computed('model.navigation', function () {
            var lastItem = undefined,
                navItems = undefined;

            try {
                navItems = JSON.parse(this.get('model.navigation') || [{}]);
            } catch (e) {
                navItems = [{}];
            }

            navItems = navItems.map(function (item) {
                return NavItem.create(item);
            });

            lastItem = navItems.get('lastObject');
            if (!lastItem || lastItem.get('isComplete')) {
                navItems.addObject(NavItem.create({ last: true }));
            }

            return navItems;
        }),

        updateLastNavItem: observer('navigationItems.[]', function () {
            var navItems = this.get('navigationItems');

            navItems.forEach(function (item, index, items) {
                if (index === items.length - 1) {
                    item.set('last', true);
                } else {
                    item.set('last', false);
                }
            });
        }),

        save: function save() {
            var _this = this;

            var navItems = this.get('navigationItems');
            var notifications = this.get('notifications');
            var navSetting = undefined,
                validationPromises = undefined;

            validationPromises = navItems.map(function (item) {
                return item.validate();
            });

            return RSVP.all(validationPromises).then(function () {
                navSetting = navItems.map(function (item) {
                    var label = item.get('label').trim();
                    var url = item.get('url').trim();

                    if (item.get('last') && !item.get('isComplete')) {
                        return null;
                    }

                    return { label: label, url: url };
                }).compact();

                _this.set('model.navigation', JSON.stringify(navSetting));

                // trigger change event because even if the final JSON is unchanged
                // we need to have navigationItems recomputed.
                _this.get('model').notifyPropertyChange('navigation');

                return _this.get('model').save()['catch'](function (err) {
                    notifications.showErrors(err);
                });
            })['catch'](function () {
                // TODO: noop - needed to satisfy spinner button
            });
        },

        actions: {
            addItem: function addItem() {
                var navItems = this.get('navigationItems');
                var lastItem = navItems.get('lastObject');

                if (lastItem && lastItem.get('isComplete')) {
                    // Add new blank navItem
                    navItems.addObject(NavItem.create({ last: true }));
                }
            },

            deleteItem: function deleteItem(item) {
                if (!item) {
                    return;
                }

                var navItems = this.get('navigationItems');

                navItems.removeObject(item);
            },

            moveItem: function moveItem(index, newIndex) {
                var navItems = this.get('navigationItems');
                var item = navItems.objectAt(index);

                navItems.removeAt(index);
                navItems.insertAt(newIndex, item);
            },

            updateUrl: function updateUrl(url, navItem) {
                if (!navItem) {
                    return;
                }

                navItem.set('url', url);
            }
        }
    });
});
define('ghost/controllers/settings/tags/tag', ['exports', 'ember'], function (exports, _ember) {
    var Controller = _ember['default'].Controller;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    var alias = computed.alias;
    exports['default'] = Controller.extend({

        tag: alias('model'),
        isMobile: alias('tagsController.isMobile'),

        tagsController: inject.controller('settings.tags'),
        notifications: inject.service(),

        saveTagProperty: function saveTagProperty(propKey, newValue) {
            var _this = this;

            var tag = this.get('tag');
            var currentValue = tag.get(propKey);

            newValue = newValue.trim();

            // Quit if there was no change
            if (newValue === currentValue) {
                return;
            }

            tag.set(propKey, newValue);
            // TODO: This is required until .validate/.save mark fields as validated
            tag.get('hasValidated').addObject(propKey);

            tag.save().then(function (savedTag) {
                // replace 'new' route with 'tag' route
                _this.replaceRoute('settings.tags.tag', savedTag);
            })['catch'](function (error) {
                if (error) {
                    _this.get('notifications').showAPIError(error, { key: 'tag.save' });
                }
            });
        },

        actions: {
            setProperty: function setProperty(propKey, value) {
                this.saveTagProperty(propKey, value);
            }
        }
    });
});
define('ghost/controllers/settings/tags', ['exports', 'ember'], function (exports, _ember) {
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    var alias = computed.alias;
    var equal = computed.equal;
    var sort = computed.sort;
    exports['default'] = _ember['default'].Controller.extend({

        tagController: inject.controller('settings.tags.tag'),

        selectedTag: alias('tagController.tag'),

        tagListFocused: equal('keyboardFocus', 'tagList'),
        tagContentFocused: equal('keyboardFocus', 'tagContent'),

        // TODO: replace with ordering by page count once supported by the API
        tags: sort('model', function (a, b) {
            var idA = +a.get('id');
            var idB = +b.get('id');

            if (idA > idB) {
                return 1;
            } else if (idA < idB) {
                return -1;
            }

            return 0;
        }),

        actions: {
            leftMobile: function leftMobile() {
                var firstTag = this.get('tags.firstObject');
                // redirect to first tag if possible so that you're not left with
                // tag settings blank slate when switching from portrait to landscape
                if (firstTag && !this.get('tagController.tag')) {
                    this.transitionToRoute('settings.tags.tag', firstTag);
                }
            }
        }

    });
});
define('ghost/controllers/setup/three', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
    var Controller = _ember['default'].Controller;
    var RSVP = _ember['default'].RSVP;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    var Errors = _emberData['default'].Errors;
    var alias = computed.alias;

    var emberA = _ember['default'].A;

    exports['default'] = Controller.extend({
        notifications: inject.service(),
        two: inject.controller('setup/two'),

        errors: Errors.create(),
        hasValidated: emberA(),
        users: '',
        ownerEmail: alias('two.email'),
        submitting: false,

        usersArray: computed('users', function () {
            var errors = this.get('errors');
            var users = this.get('users').split('\n').filter(function (email) {
                return email.trim().length > 0;
            });

            // remove "no users to invite" error if we have users
            if (users.uniq().length > 0 && errors.get('users.length') === 1) {
                if (errors.get('users.firstObject').message.match(/no users/i)) {
                    errors.remove('users');
                }
            }

            return users.uniq();
        }),

        validUsersArray: computed('usersArray', 'ownerEmail', function () {
            var ownerEmail = this.get('ownerEmail');

            return this.get('usersArray').filter(function (user) {
                return validator.isEmail(user) && user !== ownerEmail;
            });
        }),

        invalidUsersArray: computed('usersArray', 'ownerEmail', function () {
            var ownerEmail = this.get('ownerEmail');

            return this.get('usersArray').reject(function (user) {
                return validator.isEmail(user) || user === ownerEmail;
            });
        }),

        validationResult: computed('invalidUsersArray', function () {
            var errors = [];

            this.get('invalidUsersArray').forEach(function (user) {
                errors.push({
                    user: user,
                    error: 'email'
                });
            });

            if (errors.length === 0) {
                // ensure we aren't highlighting fields when everything is fine
                this.get('errors').clear();
                return true;
            } else {
                return errors;
            }
        }),

        validate: function validate() {
            var errors = this.get('errors');
            var validationResult = this.get('validationResult');
            var property = 'users';

            errors.clear();

            // If property isn't in the `hasValidated` array, add it to mark that this field can show a validation result
            this.get('hasValidated').addObject(property);

            if (validationResult === true) {
                return true;
            }

            validationResult.forEach(function (error) {
                // Only one error type here so far, but one day the errors might be more detailed
                switch (error.error) {
                    case 'email':
                        errors.add(property, error.user + ' is not a valid email.');
                }
            });

            return false;
        },

        buttonText: computed('errors.users', 'validUsersArray', 'invalidUsersArray', function () {
            var usersError = this.get('errors.users.firstObject.message');
            var validNum = this.get('validUsersArray').length;
            var invalidNum = this.get('invalidUsersArray').length;
            var userCount = undefined;

            if (usersError && usersError.match(/no users/i)) {
                return usersError;
            }

            if (invalidNum > 0) {
                userCount = invalidNum === 1 ? 'email address' : 'email addresses';
                return invalidNum + ' invalid ' + userCount;
            }

            if (validNum > 0) {
                userCount = validNum === 1 ? 'user' : 'users';
                userCount = validNum + ' ' + userCount;
            } else {
                userCount = 'some users';
            }

            return 'Invite ' + userCount;
        }),

        buttonClass: computed('validationResult', 'usersArray.length', function () {
            if (this.get('validationResult') === true && this.get('usersArray.length') > 0) {
                return 'btn-green';
            } else {
                return 'btn-minor';
            }
        }),

        authorRole: computed(function () {
            return this.store.findAll('role', { reload: true }).then(function (roles) {
                return roles.findBy('name', 'Author');
            });
        }),

        actions: {
            validate: function validate() {
                this.validate();
            },

            invite: function invite() {
                var _this = this;

                var users = this.get('usersArray');
                var notifications = this.get('notifications');
                var invitationsString = undefined;

                if (this.validate() && users.length > 0) {
                    this.toggleProperty('submitting');
                    this.get('authorRole').then(function (authorRole) {
                        RSVP.Promise.all(users.map(function (user) {
                            var newUser = _this.store.createRecord('user', {
                                email: user,
                                status: 'invited',
                                role: authorRole
                            });

                            return newUser.save().then(function () {
                                return {
                                    email: user,
                                    success: newUser.get('status') === 'invited'
                                };
                            })['catch'](function () {
                                return {
                                    email: user,
                                    success: false
                                };
                            });
                        })).then(function (invites) {
                            var erroredEmails = [];
                            var successCount = 0;
                            var message = undefined;

                            invites.forEach(function (invite) {
                                if (invite.success) {
                                    successCount++;
                                } else {
                                    erroredEmails.push(invite.email);
                                }
                            });

                            if (erroredEmails.length > 0) {
                                invitationsString = erroredEmails.length > 1 ? ' invitations: ' : ' invitation: ';
                                message = 'Failed to send ' + erroredEmails.length + ' ' + invitationsString;
                                message += erroredEmails.join(', ');
                                notifications.showAlert(message, { type: 'error', delayed: successCount > 0, key: 'signup.send-invitations.failed' });
                            }

                            if (successCount > 0) {
                                // pluralize
                                invitationsString = successCount > 1 ? 'invitations' : 'invitation';
                                notifications.showAlert(successCount + ' ' + invitationsString + ' sent!', { type: 'success', delayed: true, key: 'signup.send-invitations.success' });
                            }
                            _this.send('loadServerNotifications');
                            _this.toggleProperty('submitting');
                            _this.transitionToRoute('posts.index');
                        });
                    });
                } else if (users.length === 0) {
                    this.get('errors').add('users', 'No users to invite');
                }
            },

            skipInvite: function skipInvite() {
                this.send('loadServerNotifications');
                this.transitionToRoute('posts.index');
            }
        }
    });
});
define('ghost/controllers/setup/two', ['exports', 'ember', 'ic-ajax', 'ghost/mixins/validation-engine'], function (exports, _ember, _icAjax, _ghostMixinsValidationEngine) {
    var Controller = _ember['default'].Controller;
    var RSVP = _ember['default'].RSVP;
    var inject = _ember['default'].inject;
    exports['default'] = Controller.extend(_ghostMixinsValidationEngine['default'], {
        size: 90,
        blogTitle: null,
        name: null,
        email: '',
        password: null,
        image: null,
        blogCreated: false,
        submitting: false,
        flowErrors: '',

        ghostPaths: inject.service('ghost-paths'),
        notifications: inject.service(),
        application: inject.controller(),
        config: inject.service(),
        session: inject.service(),

        // ValidationEngine settings
        validationType: 'setup',

        /**
         * Uploads the given data image, then sends the changed user image property to the server
         * @param  {Object} user User object, returned from the 'setup' api call
         * @return {Ember.RSVP.Promise} A promise that takes care of both calls
         */
        sendImage: function sendImage(user) {
            var _this = this;

            var image = this.get('image');

            return new RSVP.Promise(function (resolve, reject) {
                image.formData = {};
                image.submit().success(function (response) {
                    user.image = response;
                    (0, _icAjax.request)({
                        url: _this.get('ghostPaths.url').api('users', user.id.toString()),
                        type: 'PUT',
                        data: {
                            users: [user]
                        }
                    }).then(resolve)['catch'](reject);
                }).error(reject);
            });
        },

        _handleSaveError: function _handleSaveError(resp) {
            this.toggleProperty('submitting');
            if (resp && resp.jqXHR && resp.jqXHR.responseJSON && resp.jqXHR.responseJSON.errors) {
                this.set('flowErrors', resp.jqXHR.responseJSON.errors[0].message);
            } else {
                this.get('notifications').showAPIError(resp, { key: 'setup.blog-details' });
            }
        },

        _handleAuthenticationError: function _handleAuthenticationError(error) {
            this.toggleProperty('submitting');
            if (error && error.errors) {
                this.set('flowErrors', error.errors[0].message);
            } else {
                // Connection errors don't return proper status message, only req.body
                this.get('notifications').showAlert('There was a problem on the server.', { type: 'error', key: 'setup.authenticate.failed' });
            }
        },

        afterAuthentication: function afterAuthentication(result) {
            var _this2 = this;

            if (this.get('image')) {
                this.sendImage(result.users[0]).then(function () {
                    _this2.toggleProperty('submitting');
                    _this2.transitionToRoute('setup.three');
                })['catch'](function (resp) {
                    _this2.toggleProperty('submitting');
                    _this2.get('notifications').showAPIError(resp, { key: 'setup.blog-details' });
                });
            } else {
                this.toggleProperty('submitting');
                this.transitionToRoute('setup.three');
            }
        },

        actions: {
            preValidate: function preValidate(model) {
                // Only triggers validation if a value has been entered, preventing empty errors on focusOut
                if (this.get(model)) {
                    this.validate({ property: model });
                }
            },

            setup: function setup() {
                var _this3 = this;

                var setupProperties = ['blogTitle', 'name', 'email', 'password'];
                var data = this.getProperties(setupProperties);
                var config = this.get('config');
                var method = this.get('blogCreated') ? 'PUT' : 'POST';

                this.toggleProperty('submitting');
                this.set('flowErrors', '');

                this.get('hasValidated').addObjects(setupProperties);
                this.validate().then(function () {
                    (0, _icAjax.request)({
                        url: _this3.get('ghostPaths.url').api('authentication', 'setup'),
                        type: method,
                        data: {
                            setup: [{
                                name: data.name,
                                email: data.email,
                                password: data.password,
                                blogTitle: data.blogTitle
                            }]
                        }
                    }).then(function (result) {
                        config.set('blogTitle', data.blogTitle);

                        // don't try to login again if we are already logged in
                        if (_this3.get('session.isAuthenticated')) {
                            return _this3.afterAuthentication(result);
                        }

                        // Don't call the success handler, otherwise we will be redirected to admin
                        _this3.get('application').set('skipAuthSuccessHandler', true);
                        _this3.get('session').authenticate('authenticator:oauth2', _this3.get('email'), _this3.get('password')).then(function () {
                            _this3.set('blogCreated', true);
                            return _this3.afterAuthentication(result);
                        })['catch'](function (error) {
                            _this3._handleAuthenticationError(error);
                        });
                    })['catch'](function (error) {
                        _this3._handleSaveError(error);
                    });
                })['catch'](function () {
                    _this3.toggleProperty('submitting');
                    _this3.set('flowErrors', 'Please fill out the form to setup your blog.');
                });
            },

            setImage: function setImage(image) {
                this.set('image', image);
            }
        }
    });
});
define('ghost/controllers/setup', ['exports', 'ember'], function (exports, _ember) {
    var Controller = _ember['default'].Controller;
    var computed = _ember['default'].computed;
    var get = _ember['default'].get;
    var inject = _ember['default'].inject;
    var match = computed.match;
    exports['default'] = Controller.extend({
        appController: inject.controller('application'),
        ghostPaths: inject.service('ghost-paths'),

        showBackLink: match('appController.currentRouteName', /^setup\.(two|three)$/),

        backRoute: computed('appController.currentRouteName', function () {
            var appController = this.get('appController');
            var currentRoute = get(appController, 'currentRouteName');

            return currentRoute === 'setup.two' ? 'setup.one' : 'setup.two';
        })
    });
});
define('ghost/controllers/signin', ['exports', 'ember', 'ghost/mixins/validation-engine', 'ic-ajax'], function (exports, _ember, _ghostMixinsValidationEngine, _icAjax) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    var $ = _ember['default'].$;
    var Controller = _ember['default'].Controller;
    var inject = _ember['default'].inject;
    exports['default'] = Controller.extend(_ghostMixinsValidationEngine['default'], {
        submitting: false,
        loggingIn: false,
        authProperties: ['identification', 'password'],

        ghostPaths: inject.service('ghost-paths'),
        notifications: inject.service(),
        session: inject.service(),
        application: inject.controller(),
        flowErrors: '',

        // ValidationEngine settings
        validationType: 'signin',

        actions: {
            authenticate: function authenticate() {
                var _this = this;

                var model = this.get('model');
                var authStrategy = 'authenticator:oauth2';

                // Authentication transitions to posts.index, we can leave spinner running unless there is an error
                this.get('session').authenticate(authStrategy, model.get('identification'), model.get('password'))['catch'](function (error) {
                    _this.toggleProperty('loggingIn');

                    if (error && error.errors) {
                        error.errors.forEach(function (err) {
                            err.message = err.message.htmlSafe();
                        });

                        _this.set('flowErrors', error.errors[0].message.string);

                        if (error.errors[0].message.string.match(/user with that email/)) {
                            _this.get('model.errors').add('identification', '');
                        }

                        if (error.errors[0].message.string.match(/password is incorrect/)) {
                            _this.get('model.errors').add('password', '');
                        }
                    } else {
                        // Connection errors don't return proper status message, only req.body
                        _this.get('notifications').showAlert('There was a problem on the server.', { type: 'error', key: 'session.authenticate.failed' });
                    }
                });
            },

            validateAndAuthenticate: function validateAndAuthenticate() {
                var _this2 = this;

                this.set('flowErrors', '');
                // Manually trigger events for input fields, ensuring legacy compatibility with
                // browsers and password managers that don't send proper events on autofill
                $('#login').find('input').trigger('change');

                // This is a bit dirty, but there's no other way to ensure the properties are set as well as 'signin'
                this.get('hasValidated').addObjects(this.authProperties);
                this.validate({ property: 'signin' }).then(function () {
                    _this2.toggleProperty('loggingIn');
                    _this2.send('authenticate');
                })['catch'](function (error) {
                    if (error) {
                        _this2.get('notifications').showAPIError(error, { key: 'signin.authenticate' });
                    } else {
                        _this2.set('flowErrors', 'Please fill out the form to sign in.');
                    }
                });
            },

            forgotten: function forgotten() {
                var _this3 = this;

                var email = this.get('model.identification');
                var notifications = this.get('notifications');

                this.set('flowErrors', '');
                // This is a bit dirty, but there's no other way to ensure the properties are set as well as 'forgotPassword'
                this.get('hasValidated').addObject('identification');
                this.validate({ property: 'forgotPassword' }).then(function () {
                    _this3.toggleProperty('submitting');

                    (0, _icAjax.request)({
                        url: _this3.get('ghostPaths.url').api('authentication', 'passwordreset'),
                        type: 'POST',
                        data: {
                            passwordreset: [{ email: email }]
                        }
                    }).then(function () {
                        _this3.toggleProperty('submitting');
                        notifications.showAlert('Please check your email for instructions.', { type: 'info', key: 'forgot-password.send.success' });
                    })['catch'](function (resp) {
                        _this3.toggleProperty('submitting');
                        if (resp && resp.jqXHR && resp.jqXHR.responseJSON && resp.jqXHR.responseJSON.errors) {
                            var _resp$jqXHR$responseJSON$errors = _slicedToArray(resp.jqXHR.responseJSON.errors, 1);

                            var error = _resp$jqXHR$responseJSON$errors[0];
                            var message = error.message;

                            _this3.set('flowErrors', message);

                            if (message.match(/no user with that email/)) {
                                _this3.get('model.errors').add('identification', '');
                            }
                        } else {
                            notifications.showAPIError(resp, { defaultErrorText: 'There was a problem with the reset, please try again.', key: 'forgot-password.send' });
                        }
                    });
                })['catch'](function () {
                    _this3.set('flowErrors', 'We need your email address to reset your password!');
                });
            }
        }
    });
});
define('ghost/controllers/signup', ['exports', 'ember', 'ic-ajax', 'ghost/mixins/validation-engine'], function (exports, _ember, _icAjax, _ghostMixinsValidationEngine) {
    var Controller = _ember['default'].Controller;
    var RSVP = _ember['default'].RSVP;
    var inject = _ember['default'].inject;
    exports['default'] = Controller.extend(_ghostMixinsValidationEngine['default'], {
        // ValidationEngine settings
        validationType: 'signup',

        submitting: false,
        flowErrors: '',
        image: null,

        ghostPaths: inject.service('ghost-paths'),
        config: inject.service(),
        notifications: inject.service(),
        session: inject.service(),

        sendImage: function sendImage() {
            var _this = this;

            var image = this.get('image');

            this.get('session.user').then(function (user) {
                return new RSVP.Promise(function (resolve, reject) {
                    image.formData = {};
                    image.submit().success(function (response) {
                        user.image = response;
                        (0, _icAjax.request)({
                            url: _this.get('ghostPaths.url').api('users', user.id.toString()),
                            type: 'PUT',
                            data: {
                                users: [user]
                            }
                        }).then(resolve)['catch'](reject);
                    }).error(reject);
                });
            });
        },

        actions: {
            signup: function signup() {
                var _this2 = this;

                var model = this.get('model');
                var setupProperties = ['name', 'email', 'password', 'token'];
                var data = model.getProperties(setupProperties);
                var image = this.get('image');
                var notifications = this.get('notifications');

                this.set('flowErrors', '');

                this.get('hasValidated').addObjects(setupProperties);
                this.validate().then(function () {
                    _this2.toggleProperty('submitting');
                    (0, _icAjax.request)({
                        url: _this2.get('ghostPaths.url').api('authentication', 'invitation'),
                        type: 'POST',
                        dataType: 'json',
                        data: {
                            invitation: [{
                                name: data.name,
                                email: data.email,
                                password: data.password,
                                token: data.token
                            }]
                        }
                    }).then(function () {
                        _this2.get('session').authenticate('authenticator:oauth2', _this2.get('model.email'), _this2.get('model.password')).then(function () {
                            if (image) {
                                _this2.sendImage();
                            }
                        })['catch'](function (resp) {
                            notifications.showAPIError(resp, { key: 'signup.complete' });
                        });
                    })['catch'](function (resp) {
                        _this2.toggleProperty('submitting');
                        if (resp && resp.jqXHR && resp.jqXHR.responseJSON && resp.jqXHR.responseJSON.errors) {
                            _this2.set('flowErrors', resp.jqXHR.responseJSON.errors[0].message);
                        } else {
                            notifications.showAPIError(resp, { key: 'signup.complete' });
                        }
                    });
                })['catch'](function () {
                    _this2.set('flowErrors', 'Please fill out the form to complete your sign-up');
                });
            },

            setImage: function setImage(image) {
                this.set('image', image);
            }
        }
    });
});
define('ghost/controllers/team/index', ['exports', 'ember'], function (exports, _ember) {
    var Controller = _ember['default'].Controller;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    var alias = computed.alias;
    var filter = computed.filter;
    exports['default'] = Controller.extend({

        session: inject.service(),

        users: alias('model'),

        activeUsers: filter('users', function (user) {
            return (/^active|warn-[1-4]|locked$/.test(user.get('status'))
            );
        }),

        invitedUsers: filter('users', function (user) {
            var status = user.get('status');

            return status === 'invited' || status === 'invited-pending';
        })
    });
});
define('ghost/controllers/team/user', ['exports', 'ember', 'ghost/models/slug-generator', 'ghost/utils/isNumber', 'ghost/utils/bound-one-way', 'ghost/mixins/validation-engine'], function (exports, _ember, _ghostModelsSlugGenerator, _ghostUtilsIsNumber, _ghostUtilsBoundOneWay, _ghostMixinsValidationEngine) {
    var Controller = _ember['default'].Controller;
    var RSVP = _ember['default'].RSVP;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    var alias = computed.alias;
    var and = computed.and;
    var not = computed.not;
    var or = computed.or;
    var readOnly = computed.readOnly;
    exports['default'] = Controller.extend(_ghostMixinsValidationEngine['default'], {
        // ValidationEngine settings
        validationType: 'user',
        submitting: false,

        ghostPaths: inject.service('ghost-paths'),
        notifications: inject.service(),
        session: inject.service(),

        lastPromise: null,

        currentUser: alias('session.user'),
        user: alias('model'),
        email: readOnly('user.email'),
        slugValue: (0, _ghostUtilsBoundOneWay['default'])('user.slug'),

        isNotOwnProfile: computed('user.id', 'currentUser.id', function () {
            return this.get('user.id') !== this.get('currentUser.id');
        }),

        isNotOwnersProfile: not('user.isOwner'),

        isAdminUserOnOwnerProfile: and('currentUser.isAdmin', 'user.isOwner'),

        canAssignRoles: or('currentUser.isAdmin', 'currentUser.isOwner'),

        canMakeOwner: and('currentUser.isOwner', 'isNotOwnProfile', 'user.isAdmin'),

        rolesDropdownIsVisible: and('isNotOwnProfile', 'canAssignRoles', 'isNotOwnersProfile'),

        deleteUserActionIsVisible: computed('currentUser', 'canAssignRoles', 'user', function () {
            if (this.get('canAssignRoles') && this.get('isNotOwnProfile') && !this.get('user.isOwner') || this.get('currentUser.isEditor') && (this.get('isNotOwnProfile') || this.get('user.isAuthor'))) {
                return true;
            }
        }),

        userActionsAreVisible: or('deleteUserActionIsVisible', 'canMakeOwner'),

        // duplicated in gh-user-active -- find a better home and consolidate?
        userDefault: computed('ghostPaths', function () {
            return this.get('ghostPaths.url').asset('/shared/img/user-image.png');
        }),

        userImageBackground: computed('user.image', 'userDefault', function () {
            var url = this.get('user.image') || this.get('userDefault');

            return _ember['default'].String.htmlSafe('background-image: url(' + url + ')');
        }),
        // end duplicated

        coverDefault: computed('ghostPaths', function () {
            return this.get('ghostPaths.url').asset('/shared/img/user-cover.png');
        }),

        coverImageBackground: computed('user.cover', 'coverDefault', function () {
            var url = this.get('user.cover') || this.get('coverDefault');

            return _ember['default'].String.htmlSafe('background-image: url(' + url + ')');
        }),

        coverTitle: computed('user.name', function () {
            return this.get('user.name') + '\'s Cover Image';
        }),

        // Lazy load the slug generator for slugPlaceholder
        slugGenerator: computed(function () {
            return _ghostModelsSlugGenerator['default'].create({
                ghostPaths: this.get('ghostPaths'),
                slugType: 'user'
            });
        }),

        roles: computed(function () {
            return this.store.query('role', { permissions: 'assign' });
        }),

        actions: {
            changeRole: function changeRole(newRole) {
                this.set('model.role', newRole);
            },

            save: function save() {
                var _this = this;

                var user = this.get('user');
                var slugValue = this.get('slugValue');
                var afterUpdateSlug = this.get('lastPromise');
                var promise = undefined,
                    slugChanged = undefined;

                if (user.get('slug') !== slugValue) {
                    slugChanged = true;
                    user.set('slug', slugValue);
                }

                this.toggleProperty('submitting');

                promise = RSVP.resolve(afterUpdateSlug).then(function () {
                    return user.save({ format: false });
                }).then(function (model) {
                    var currentPath = undefined,
                        newPath = undefined;

                    // If the user's slug has changed, change the URL and replace
                    // the history so refresh and back button still work
                    if (slugChanged) {
                        currentPath = window.history.state.path;

                        newPath = currentPath.split('/');
                        newPath[newPath.length - 2] = model.get('slug');
                        newPath = newPath.join('/');

                        window.history.replaceState({ path: newPath }, '', newPath);
                    }

                    _this.toggleProperty('submitting');
                    _this.get('notifications').closeAlerts('user.update');

                    return model;
                })['catch'](function (errors) {
                    if (errors) {
                        _this.get('notifications').showErrors(errors, { key: 'user.update' });
                    }

                    _this.toggleProperty('submitting');
                });

                this.set('lastPromise', promise);
            },

            password: function password() {
                var _this2 = this;

                var user = this.get('user');

                if (user.get('isPasswordValid')) {
                    user.saveNewPassword().then(function (model) {
                        // Clear properties from view
                        user.setProperties({
                            password: '',
                            newPassword: '',
                            ne2Password: ''
                        });

                        _this2.get('notifications').showAlert('Password updated.', { type: 'success', key: 'user.change-password.success' });

                        return model;
                    })['catch'](function (errors) {
                        _this2.get('notifications').showAPIError(errors, { key: 'user.change-password' });
                    });
                } else {
                    // TODO: switch to in-line validation
                    this.get('notifications').showErrors(user.get('passwordValidationErrors'), { key: 'user.change-password' });
                }
            },

            updateSlug: function updateSlug(newSlug) {
                var _this3 = this;

                var afterSave = this.get('lastPromise');
                var promise = undefined;

                promise = RSVP.resolve(afterSave).then(function () {
                    var slug = _this3.get('model.slug');

                    newSlug = newSlug || slug;
                    newSlug = newSlug.trim();

                    // Ignore unchanged slugs or candidate slugs that are empty
                    if (!newSlug || slug === newSlug) {
                        _this3.set('slugValue', slug);

                        return;
                    }

                    return _this3.get('slugGenerator').generateSlug(newSlug).then(function (serverSlug) {
                        // If after getting the sanitized and unique slug back from the API
                        // we end up with a slug that matches the existing slug, abort the change
                        if (serverSlug === slug) {
                            return;
                        }

                        // Because the server transforms the candidate slug by stripping
                        // certain characters and appending a number onto the end of slugs
                        // to enforce uniqueness, there are cases where we can get back a
                        // candidate slug that is a duplicate of the original except for
                        // the trailing incrementor (e.g., this-is-a-slug and this-is-a-slug-2)

                        // get the last token out of the slug candidate and see if it's a number
                        var slugTokens = serverSlug.split('-');
                        var check = Number(slugTokens.pop());

                        // if the candidate slug is the same as the existing slug except
                        // for the incrementor then the existing slug should be used
                        if ((0, _ghostUtilsIsNumber['default'])(check) && check > 0) {
                            if (slug === slugTokens.join('-') && serverSlug !== newSlug) {
                                _this3.set('slugValue', slug);

                                return;
                            }
                        }

                        _this3.set('slugValue', serverSlug);
                    });
                });

                this.set('lastPromise', promise);
            }
        }
    });
});
define('ghost/helpers/gh-count-characters', ['exports', 'ember'], function (exports, _ember) {
    var Helper = _ember['default'].Helper;
    exports['default'] = Helper.helper(function (params) {
        if (!params || !params.length) {
            return;
        }

        var el = document.createElement('span');
        var content = params[0] || '';
        var length = content.length;

        el.className = 'word-count';

        if (length > 180) {
            el.style.color = '#E25440';
        } else {
            el.style.color = '#9E9D95';
        }

        el.innerHTML = 200 - length;

        return _ember['default'].String.htmlSafe(el.outerHTML);
    });
});
define('ghost/helpers/gh-count-down-characters', ['exports', 'ember'], function (exports, _ember) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    var Helper = _ember['default'].Helper;
    exports['default'] = Helper.helper(function (params) {
        if (!params || params.length < 2) {
            return;
        }

        var el = document.createElement('span');

        var _params = _slicedToArray(params, 2);

        var content = _params[0];
        var maxCharacters = _params[1];

        var length = undefined;

        content = content || '';
        length = content.length;

        el.className = 'word-count';

        if (length > maxCharacters) {
            el.style.color = '#E25440';
        } else {
            el.style.color = '#9FBB58';
        }

        el.innerHTML = length;

        return _ember['default'].String.htmlSafe(el.outerHTML);
    });
});
define('ghost/helpers/gh-count-words', ['exports', 'ember', 'ghost/utils/word-count'], function (exports, _ember, _ghostUtilsWordCount) {
    var Helper = _ember['default'].Helper;
    exports['default'] = Helper.helper(function (params) {
        if (!params || !params.length) {
            return;
        }

        var markdown = params[0] || '';

        if (/^\s*$/.test(markdown)) {
            return '0 words';
        }

        var count = (0, _ghostUtilsWordCount['default'])(markdown);

        return count + (count === 1 ? ' word' : ' words');
    });
});
define('ghost/helpers/gh-format-html', ['exports', 'ember', 'ghost/utils/caja-sanitizers'], function (exports, _ember, _ghostUtilsCajaSanitizers) {
    var Helper = _ember['default'].Helper;
    exports['default'] = Helper.helper(function (params) {
        if (!params || !params.length) {
            return;
        }

        var escapedhtml = params[0] || '';

        // replace script and iFrame
        escapedhtml = escapedhtml.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '<pre class="js-embed-placeholder">Embedded JavaScript</pre>');
        escapedhtml = escapedhtml.replace(/<iframe\b[^<]*(?:(?!<\/iframe>)<[^<]*)*<\/iframe>/gi, '<pre class="iframe-embed-placeholder">Embedded iFrame</pre>');

        // sanitize HTML
        // jscs:disable requireCamelCaseOrUpperCaseIdentifiers
        escapedhtml = html_sanitize(escapedhtml, _ghostUtilsCajaSanitizers['default'].url, _ghostUtilsCajaSanitizers['default'].id);
        // jscs:enable requireCamelCaseOrUpperCaseIdentifiers

        return _ember['default'].String.htmlSafe(escapedhtml);
    });
});
/* global html_sanitize*/
define('ghost/helpers/gh-format-markdown', ['exports', 'ember', 'ghost/utils/caja-sanitizers'], function (exports, _ember, _ghostUtilsCajaSanitizers) {
    var Helper = _ember['default'].Helper;

    var showdown = new Showdown.converter({ extensions: ['ghostimagepreview', 'ghostgfm', 'footnotes', 'highlight'] });

    exports['default'] = Helper.helper(function (params) {
        if (!params || !params.length) {
            return;
        }

        var markdown = params[0] || '';
        var escapedhtml = '';

        // convert markdown to HTML
        escapedhtml = showdown.makeHtml(markdown);

        // replace script and iFrame
        escapedhtml = escapedhtml.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '<pre class="js-embed-placeholder">Embedded JavaScript</pre>');
        escapedhtml = escapedhtml.replace(/<iframe\b[^<]*(?:(?!<\/iframe>)<[^<]*)*<\/iframe>/gi, '<pre class="iframe-embed-placeholder">Embedded iFrame</pre>');

        // sanitize html
        // jscs:disable requireCamelCaseOrUpperCaseIdentifiers
        escapedhtml = html_sanitize(escapedhtml, _ghostUtilsCajaSanitizers['default'].url, _ghostUtilsCajaSanitizers['default'].id);
        // jscs:enable requireCamelCaseOrUpperCaseIdentifiers

        return _ember['default'].String.htmlSafe(escapedhtml);
    });
});
/* global Showdown, html_sanitize*/
define('ghost/helpers/gh-format-timeago', ['exports', 'ember'], function (exports, _ember) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    var Helper = _ember['default'].Helper;
    exports['default'] = Helper.helper(function (params) {
        if (!params || !params.length) {
            return;
        }

        var _params = _slicedToArray(params, 1);

        var timeago = _params[0];

        return moment(timeago).fromNow();
        // stefanpenner says cool for small number of timeagos.
        // For large numbers moment sucks => single Ember.Object based clock better
        // https://github.com/manuelmitasch/ghost-admin-ember-demo/commit/fba3ab0a59238290c85d4fa0d7c6ed1be2a8a82e#commitcomment-5396524
    });
});
define('ghost/helpers/gh-path', ['exports', 'ember', 'ghost/utils/ghost-paths'], function (exports, _ember, _ghostUtilsGhostPaths) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    // Handlebars Helper {{gh-path}}
    // Usage: Assume 'http://www.myghostblog.org/myblog/'
    // {{gh-path}} or {{gh-path 'blog'}} for Ghost's root (/myblog/)
    // {{gh-path 'admin'}} for Ghost's admin root (/myblog/ghost/)
    // {{gh-path 'api'}} for Ghost's api root (/myblog/ghost/api/v0.1/)
    // {{gh-path 'admin' '/assets/hi.png'}} for resolved url (/myblog/ghost/assets/hi.png)

    var Helper = _ember['default'].Helper;
    exports['default'] = Helper.helper(function (params) {
        var paths = (0, _ghostUtilsGhostPaths['default'])();

        var _params = _slicedToArray(params, 2);

        var path = _params[0];
        var url = _params[1];

        var base = undefined;

        if (!path) {
            path = 'blog';
        }

        if (!/^(blog|admin|api)$/.test(path)) {
            url = path;
            path = 'blog';
        }

        switch (path.toString()) {
            case 'blog':
                base = paths.blogRoot;
                break;
            case 'admin':
                base = paths.adminRoot;
                break;
            case 'api':
                base = paths.apiRoot;
                break;
            default:
                base = paths.blogRoot;
                break;
        }

        // handle leading and trailing slashes

        base = base[base.length - 1] !== '/' ? base + '/' : base;

        if (url && url.length > 0) {
            if (url[0] === '/') {
                url = url.substr(1);
            }

            base = base + url;
        }

        return _ember['default'].String.htmlSafe(base);
    });
});
define('ghost/helpers/gh-user-can-admin', ['exports', 'ember'], function (exports, _ember) {
    exports.ghUserCanAdmin = ghUserCanAdmin;
    var Helper = _ember['default'].Helper;

    // Handlebars Helper {{gh-user-can-admin}} group users by admin and owner using if, or group them author using unless
    // Usage: call helper as with aparameter of session.user
    // e.g - {{#if (gh-user-can-admin session.user)}} 'block content' {{/if}}
    // @param session.user

    function ghUserCanAdmin(params) {
        return !!(params[0].get('isOwner') || params[0].get('isAdmin'));
    }

    exports['default'] = Helper.helper(function (params) {
        return ghUserCanAdmin(params);
    });
});
define('ghost/helpers/is-equal', ['exports', 'ember'], function (exports, _ember) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports.isEqual = isEqual;
    var Helper = _ember['default'].Helper;

    function isEqual(params) {
        var _params = _slicedToArray(params, 2);

        var lhs = _params[0];
        var rhs = _params[1];

        return lhs === rhs;
    }

    exports['default'] = Helper.helper(function (params) {
        return isEqual(params);
    });
});
define('ghost/helpers/is-not', ['exports', 'ember'], function (exports, _ember) {
    exports.isNot = isNot;
    var Helper = _ember['default'].Helper;

    function isNot(params) {
        return !params;
    }

    exports['default'] = Helper.helper(function (params) {
        return isNot(params);
    });
});
define('ghost/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, _emberInflectorLibHelpersPluralize) {
  exports['default'] = _emberInflectorLibHelpersPluralize['default'];
});
define('ghost/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, _emberInflectorLibHelpersSingularize) {
  exports['default'] = _emberInflectorLibHelpersSingularize['default'];
});
define('ghost/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'ghost/config/environment'], function (exports, _emberCliAppVersionInitializerFactory, _ghostConfigEnvironment) {
  exports['default'] = {
    name: 'App Version',
    initialize: (0, _emberCliAppVersionInitializerFactory['default'])(_ghostConfigEnvironment['default'].APP.name, _ghostConfigEnvironment['default'].APP.version)
  };
});
define('ghost/initializers/container-debug-adapter', ['exports', 'ember-resolver/container-debug-adapter'], function (exports, _emberResolverContainerDebugAdapter) {
  exports['default'] = {
    name: 'container-debug-adapter',

    initialize: function initialize() {
      var app = arguments[1] || arguments[0];

      app.register('container-debug-adapter:main', _emberResolverContainerDebugAdapter['default']);
      app.inject('container-debug-adapter:main', 'namespace', 'application:main');
    }
  };
});
define('ghost/initializers/ember-cli-fastclick', ['exports', 'ember'], function (exports, _ember) {

  var EmberCliFastclickInitializer = {
    name: 'fastclick',

    initialize: function initialize() {
      _ember['default'].run.schedule('afterRender', function () {
        FastClick.attach(document.body);
      });
    }
  };

  exports['default'] = EmberCliFastclickInitializer;
});
define('ghost/initializers/ember-cli-mirage', ['exports', 'ember-cli-mirage/utils/read-modules', 'ghost/config/environment', 'ghost/mirage/config', 'ember-cli-mirage/server'], function (exports, _emberCliMirageUtilsReadModules, _ghostConfigEnvironment, _ghostMirageConfig, _emberCliMirageServer) {
  exports['default'] = {
    name: 'ember-cli-mirage',
    initialize: function initialize(application) {
      if (arguments.length > 1) {
        // Ember < 2.1
        var container = arguments[0],
            application = arguments[1];
      }
      var environment = _ghostConfigEnvironment['default'].environment;

      if (_shouldUseMirage(environment, _ghostConfigEnvironment['default']['ember-cli-mirage'])) {
        var modules = (0, _emberCliMirageUtilsReadModules['default'])(_ghostConfigEnvironment['default'].modulePrefix);
        var options = _.assign(modules, { environment: environment, baseConfig: _ghostMirageConfig['default'], testConfig: _ghostMirageConfig.testConfig });

        new _emberCliMirageServer['default'](options);
      }
    }
  };

  function _shouldUseMirage(env, addonConfig) {
    var userDeclaredEnabled = typeof addonConfig.enabled !== 'undefined';
    var defaultEnabled = _defaultEnabled(env, addonConfig);

    return userDeclaredEnabled ? addonConfig.enabled : defaultEnabled;
  }

  /*
    Returns a boolean specifying the default behavior for whether
    to initialize Mirage.
  */
  function _defaultEnabled(env, addonConfig) {
    var usingInDev = env === 'development' && !addonConfig.usingProxy;
    var usingInTest = env === 'test';

    return usingInDev || usingInTest;
  }
});
define('ghost/initializers/ember-simple-auth', ['exports', 'ghost/config/environment', 'ghost/utils/ghost-paths', 'ember-simple-auth/configuration', 'ember-simple-auth/initializers/setup-session', 'ember-simple-auth/initializers/setup-session-service'], function (exports, _ghostConfigEnvironment, _ghostUtilsGhostPaths, _emberSimpleAuthConfiguration, _emberSimpleAuthInitializersSetupSession, _emberSimpleAuthInitializersSetupSessionService) {
    exports['default'] = {
        name: 'ember-simple-auth',
        initialize: function initialize(registry) {
            var config = _ghostConfigEnvironment['default']['ember-simple-auth'] || {};
            config.baseURL = (0, _ghostUtilsGhostPaths['default'])().adminRoot;
            _emberSimpleAuthConfiguration['default'].load(config);

            (0, _emberSimpleAuthInitializersSetupSession['default'])(registry);
            (0, _emberSimpleAuthInitializersSetupSessionService['default'])(registry);
        }
    };
});
define('ghost/initializers/export-application-global', ['exports', 'ember', 'ghost/config/environment'], function (exports, _ember, _ghostConfigEnvironment) {
  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (_ghostConfigEnvironment['default'].exportApplicationGlobal !== false) {
      var value = _ghostConfigEnvironment['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = _ember['default'].String.classify(_ghostConfigEnvironment['default'].modulePrefix);
      }

      if (!window[globalName]) {
        window[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete window[globalName];
          }
        });
      }
    }
  }

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };
});
define('ghost/initializers/trailing-history', ['exports', 'ember'], function (exports, _ember) {
    var HistoryLocation = _ember['default'].HistoryLocation;

    var trailingHistory = HistoryLocation.extend({
        formatURL: function formatURL() {
            return this._super.apply(this, arguments).replace(/\/?$/, '/');
        }
    });

    exports['default'] = {
        name: 'registerTrailingLocationHistory',

        initialize: function initialize(application) {
            application.register('location:trailing-history', trailingHistory);
        }
    };
});
define('ghost/instance-initializers/ember-simple-auth', ['exports', 'ember-simple-auth/instance-initializers/setup-session-restoration'], function (exports, _emberSimpleAuthInstanceInitializersSetupSessionRestoration) {
  exports['default'] = {
    name: 'ember-simple-auth',
    initialize: function initialize(instance) {
      (0, _emberSimpleAuthInstanceInitializersSetupSessionRestoration['default'])(instance);
    }
  };
});
define('ghost/instance-initializers/oauth-prefilter', ['exports', 'ember'], function (exports, _ember) {
    var merge = _ember['default'].merge;
    exports['default'] = {
        name: 'oauth-prefilter',
        after: 'ember-simple-auth',

        initialize: function initialize(application) {
            var session = application.lookup('service:session');

            _ember['default'].$.ajaxPrefilter(function (options) {
                session.authorize('authorizer:oauth2', function (headerName, headerValue) {
                    var headerObject = {};

                    headerObject[headerName] = headerValue;
                    options.headers = merge(options.headers || {}, headerObject);
                });
            });
        }
    };
});
define('ghost/mirage/config', ['exports', 'ember'], function (exports, _ember) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var $ = _ember['default'].$;
    var isBlank = _ember['default'].isBlank;

    function paginatedResponse(modelName, allModels, request) {
        var page = +request.queryParams.page || 1;
        var limit = request.queryParams.limit || 15;
        var pages = undefined,
            models = undefined,
            next = undefined,
            prev = undefined;

        allModels = allModels || [];

        if (limit === 'all') {
            models = allModels;
            pages = 1;
        } else {
            limit = +limit;

            var start = (page - 1) * limit;
            var end = start + limit;

            models = allModels.slice(start, end);
            pages = Math.ceil(allModels.length / limit);

            if (start > 0) {
                prev = page - 1;
            }

            if (end < allModels.length) {
                next = page + 1;
            }
        }

        return _defineProperty({
            meta: {
                pagination: {
                    page: page,
                    limit: limit,
                    pages: pages,
                    total: allModels.length,
                    next: next || null,
                    prev: prev || null
                }
            }
        }, modelName, models);
    }

    exports['default'] = function () {
        // this.urlPrefix = '';    // make this `http://localhost:8080`, for example, if your API is on a different server
        this.namespace = 'ghost/api/v0.1'; // make this `api`, for example, if your API is namespaced
        // this.timing = 400;      // delay for each request, automatically set to 0 during testing

        /* Authentication ------------------------------------------------------- */

        this.post('/authentication/token', function () {
            return {
                access_token: '5JhTdKI7PpoZv4ROsFoERc6wCHALKFH5jxozwOOAErmUzWrFNARuH1q01TYTKeZkPW7FmV5MJ2fU00pg9sm4jtH3Z1LjCf8D6nNqLYCfFb2YEKyuvG7zHj4jZqSYVodN2YTCkcHv6k8oJ54QXzNTLIDMlCevkOebm5OjxGiJpafMxncm043q9u1QhdU9eee3zouGRMVVp8zkKVoo5zlGMi3zvS2XDpx7xsfk8hKHpUgd7EDDQxmMueifWv7hv6n',
                expires_in: 3600,
                refresh_token: 'XP13eDjwV5mxOcrq1jkIY9idhdvN3R1Br5vxYpYIub2P5Hdc8pdWMOGmwFyoUshiEB62JWHTl8H1kACJR18Z8aMXbnk5orG28br2kmVgtVZKqOSoiiWrQoeKTqrRV0t7ua8uY5HdDUaKpnYKyOdpagsSPn3WEj8op4vHctGL3svOWOjZhq6F2XeVPMR7YsbiwBE8fjT3VhTB3KRlBtWZd1rE0Qo2EtSplWyjGKv1liAEiL0ndQoLeeSOCH4rTP7',
                token_type: 'Bearer'
            };
        });

        /* Download Count ------------------------------------------------------- */

        var downloadCount = 0;
        this.get('http://ghost.org/count/', function () {
            downloadCount++;
            return {
                count: downloadCount
            };
        });

        /* Notifications -------------------------------------------------------- */

        this.get('/notifications/', 'notifications');

        /* Posts ---------------------------------------------------------------- */

        this.post('/posts/', function (db, request) {
            var _JSON$parse$posts = _slicedToArray(JSON.parse(request.requestBody).posts, 1);

            var attrs = _JSON$parse$posts[0];

            var post = undefined;

            if (isBlank(attrs.slug) && !isBlank(attrs.title)) {
                attrs.slug = attrs.title.dasherize();
            }

            // NOTE: this does not use the post factory to fill in blank fields
            post = db.posts.insert(attrs);

            return {
                posts: [post]
            };
        });

        this.get('/posts/', function (db, request) {
            // TODO: handle status/staticPages/author params
            var response = paginatedResponse('posts', db.posts, request);
            return response;
        });

        /* Roles ---------------------------------------------------------------- */

        this.get('/roles/', function (db, request) {
            if (request.queryParams.permissions === 'assign') {
                var roles = db.roles.find([1, 2, 3]);
                return { roles: roles };
            }

            return {
                roles: db.roles
            };
        });

        /* Settings ------------------------------------------------------------- */

        this.get('/settings/', function (db, request) {
            var filters = request.queryParams.type.split(',');
            var settings = [];

            filters.forEach(function (filter) {
                settings.pushObjects(db.settings.where({ type: filter }));
            });

            return {
                settings: settings,
                meta: {
                    filters: {
                        type: request.queryParams.type
                    }
                }
            };
        });

        this.put('/settings/', function (db, request) {
            var newSettings = JSON.parse(request.requestBody);

            db.settings.remove();
            db.settings.insert(newSettings);

            return {
                meta: {},
                settings: db.settings
            };
        });

        /* Slugs ---------------------------------------------------------------- */

        this.get('/slugs/post/:slug/', function (db, request) {
            return {
                slugs: [{ slug: _ember['default'].String.dasherize(decodeURIComponent(request.params.slug)) }]
            };
        });

        this.get('/slugs/user/:slug/', function (db, request) {
            return {
                slugs: [{ slug: _ember['default'].String.dasherize(decodeURIComponent(request.params.slug)) }]
            };
        });

        /* Setup ---------------------------------------------------------------- */

        this.post('/authentication/setup', function (db, request) {
            var _$$deparam$setup = _slicedToArray($.deparam(request.requestBody).setup, 1);

            var attrs = _$$deparam$setup[0];

            var _db$roles$where = db.roles.where({ name: 'Owner' });

            var _db$roles$where2 = _slicedToArray(_db$roles$where, 1);

            var role = _db$roles$where2[0];

            var user = undefined;

            // create owner role unless already exists
            if (!role) {
                role = db.roles.insert({ name: 'Owner' });
            }
            attrs.roles = [role];

            if (!isBlank(attrs.email)) {
                attrs.slug = attrs.email.split('@')[0].dasherize();
            }

            // NOTE: this does not use the user factory to fill in blank fields
            user = db.users.insert(attrs);

            delete user.roles;

            return {
                users: [user]
            };
        });

        this.get('/authentication/setup/', function () {
            return {
                setup: [{ status: true }]
            };
        });

        /* Tags ----------------------------------------------------------------- */

        this.post('/tags/', function (db, request) {
            var _JSON$parse$tags = _slicedToArray(JSON.parse(request.requestBody).tags, 1);

            var attrs = _JSON$parse$tags[0];

            var tag = undefined;

            if (isBlank(attrs.slug) && !isBlank(attrs.name)) {
                attrs.slug = attrs.name.dasherize();
            }

            // NOTE: this does not use the tag factory to fill in blank fields
            tag = db.tags.insert(attrs);

            return {
                tag: tag
            };
        });

        this.get('/tags/', function (db, request) {
            var response = paginatedResponse('tags', db.tags, request);
            // TODO: remove post_count unless requested?
            return response;
        });

        this.get('/tags/slug/:slug/', function (db, request) {
            var _db$tags$where = db.tags.where({ slug: request.params.slug });

            var _db$tags$where2 = _slicedToArray(_db$tags$where, 1);

            var tag = _db$tags$where2[0];

            // TODO: remove post_count unless requested?

            return {
                tag: tag
            };
        });

        this.put('/tags/:id/', function (db, request) {
            var id = request.params.id;

            var _JSON$parse$tags2 = _slicedToArray(JSON.parse(request.requestBody).tags, 1);

            var attrs = _JSON$parse$tags2[0];

            var record = db.tags.update(id, attrs);

            return {
                tag: record
            };
        });

        this.del('/tags/:id/', 'tag');

        /* Users ---------------------------------------------------------------- */

        this.post('/users/', function (db, request) {
            var _JSON$parse$users = _slicedToArray(JSON.parse(request.requestBody).users, 1);

            var attrs = _JSON$parse$users[0];

            var user = undefined;

            if (!isBlank(attrs.email)) {
                attrs.slug = attrs.email.split('@')[0].dasherize();
            }

            // NOTE: this does not use the user factory to fill in blank fields
            user = db.users.insert(attrs);

            return {
                users: [user]
            };
        });

        // /users/me = Always return the user with ID=1
        this.get('/users/me', function (db) {
            return {
                users: [db.users.find(1)]
            };
        });

        this.get('/users/', 'users');

        this.get('/users/slug/:slug/', function (db, request) {
            var user = db.users.where({ slug: request.params.slug });

            return {
                users: user
            };
        });

        this.del('/users/:id/', 'user');

        this.get('/users/:id', function (db, request) {
            return {
                users: [db.users.find(request.params.id)]
            };
        });
    };

    /*
    You can optionally export a config that is only loaded during tests
    export function testConfig() {
    
    }
    */
});
/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
define('ghost/mirage/factories/notification', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    exports['default'] = _emberCliMirage['default'].Factory.extend({
        dismissible: true,
        message: 'This is an alert',
        status: 'alert',
        type: 'error'
    });
});
/* jscs:disable */
define('ghost/mirage/factories/post', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    exports['default'] = _emberCliMirage['default'].Factory.extend({
        // TODO: fill in with actual factory data
    });
});
/* jscs:disable */
define('ghost/mirage/factories/role', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    exports['default'] = _emberCliMirage['default'].Factory.extend({
        created_at: function created_at() {
            return '2013-11-25T14:48:11.000Z';
        },
        created_by: function created_by() {
            return 1;
        },
        description: function description(i) {
            return 'Role ' + i;
        },
        name: function name() {
            return '';
        },
        updated_at: function updated_at() {
            return '2013-11-25T14:48:11.000Z';
        },
        updated_by: function updated_by() {
            return 1;
        },
        uuid: function uuid(i) {
            return 'role-' + i;
        }
    });
});
/* jscs:disable */
define('ghost/mirage/factories/setting', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    exports['default'] = _emberCliMirage['default'].Factory.extend({
        uuid: function uuid(i) {
            return 'setting-' + i;
        },
        key: function key(i) {
            return 'setting-' + i;
        },
        value: function value() {
            return null;
        },
        type: function type() {
            return 'blog';
        },
        created_at: function created_at() {
            return '2015-01-12T18:29:01.000Z';
        },
        created_by: function created_by() {
            return 1;
        },
        updated_at: function updated_at() {
            return '2015-10-27T17:39:58.288Z';
        },
        updated_by: function updated_by() {
            return 1;
        }
    });
});
/* jscs:disable */
define('ghost/mirage/factories/tag', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    exports['default'] = _emberCliMirage['default'].Factory.extend({
        created_at: function created_at() {
            return '2015-09-11T09:44:29.871Z';
        },
        created_by: function created_by() {
            return 1;
        },
        description: function description(i) {
            return 'Description for tag ' + i + '.';
        },
        hidden: function hidden() {
            return false;
        },
        image: function image(i) {
            return '/content/images/2015/10/tag-' + i + '.jpg';
        },
        meta_description: function meta_description(i) {
            return 'Meta description for tag ' + i + '.';
        },
        meta_title: function meta_title(i) {
            return 'Meta Title for tag ' + i;
        },
        name: function name(i) {
            return 'Tag ' + i;
        },
        parent: function parent() {
            return null;
        },
        slug: function slug(i) {
            return 'tag-' + i;
        },
        updated_at: function updated_at() {
            return '2015-10-19T16:25:07.756Z';
        },
        updated_by: function updated_by() {
            return 1;
        },
        uuid: function uuid(i) {
            return 'tag-' + i;
        },
        count: function count() {
            return {
                posts: 1
            };
        }
    });
});
/* jscs:disable */
define('ghost/mirage/factories/user', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    exports['default'] = _emberCliMirage['default'].Factory.extend({
        accessibility: function accessibility() {
            return null;
        },
        bio: function bio() {
            return null;
        },
        cover: function cover() {
            return null;
        },
        created_at: function created_at() {
            return '2015-09-02T13:41:50.000Z';
        },
        created_by: function created_by() {
            return null;
        },
        email: function email(i) {
            return 'user-' + i + '@example.com';
        },
        image: function image() {
            return '//www.gravatar.com/avatar/3ae045bc198a157401827c8455cd7c99?s=250&d=mm&r=x';
        },
        language: function language() {
            return 'en_US';
        },
        last_login: function last_login() {
            return '2015-11-02T16:12:05.000Z';
        },
        location: function location() {
            return null;
        },
        meta_description: function meta_description() {
            return null;
        },
        meta_title: function meta_title() {
            return null;
        },
        name: function name(i) {
            return 'User ' + i;
        },
        slug: function slug(i) {
            return 'user-' + i;
        },
        status: function status() {
            return 'active';
        },
        tour: function tour() {
            return null;
        },
        updated_at: function updated_at() {
            return '2015-11-02T16:12:05.000Z';
        },
        updated_by: function updated_by() {
            return '2015-09-02T13:41:50.000Z';
        },
        uuid: function uuid(i) {
            return 'user-' + i;
        },
        website: function website() {
            return 'http://example.com';
        },

        roles: function roles() {
            return [];
        }
    });
});
/* jscs:disable */
define('ghost/mirage/fixtures/roles', ['exports'], function (exports) {
    /* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
    exports['default'] = [{
        id: 1,
        uuid: 'b2576c4e-fa4e-41d4-8236-ced75f735222',
        name: 'Administrator',
        description: 'Administrators',
        created_at: '2015-11-13T16:01:29.131Z',
        created_by: 1,
        updated_at: '2015-11-13T16:01:29.131Z',
        updated_by: 1
    }, {
        id: 2,
        uuid: '6ee03efb-322e-4f6e-9c91-bc228b5eec6b',
        name: 'Editor',
        description: 'Editors',
        created_at: '2015-11-13T16:01:29.131Z',
        created_by: 1,
        updated_at: '2015-11-13T16:01:29.131Z',
        updated_by: 1
    }, {
        id: 3,
        uuid: 'de481b62-63f8-42c7-b5b9-6c5f5a877f53',
        name: 'Author',
        description: 'Authors',
        created_at: '2015-11-13T16:01:29.131Z',
        created_by: 1,
        updated_at: '2015-11-13T16:01:29.131Z',
        updated_by: 1
    }, {
        id: 4,
        uuid: 'ac8cbaf6-e6be-4129-b0fb-ec9ddfa61056',
        name: 'Owner',
        description: 'Blog Owner',
        created_at: '2015-11-13T16:01:29.132Z',
        created_by: 1,
        updated_at: '2015-11-13T16:01:29.132Z',
        updated_by: 1
    }];
});
define('ghost/mirage/fixtures/settings', ['exports'], function (exports) {
    /* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
    exports['default'] = [{
        created_at: '2015-09-11T09:44:30.805Z',
        created_by: 1,
        id: 1,
        key: 'title',
        type: 'blog',
        updated_at: '2015-10-04T16:26:05.195Z',
        updated_by: 1,
        uuid: '39e16daf-43fa-4bf0-87d4-44948ba8bf4c',
        value: 'Test Blog'
    }, {
        created_at: '2015-09-11T09:44:30.806Z',
        created_by: 1,
        id: 2,
        key: 'description',
        type: 'blog',
        updated_at: '2015-10-04T16:26:05.198Z',
        updated_by: 1,
        uuid: 'e6c8b636-6925-4c4a-a5d9-1dc0870fb8ea',
        value: 'Thoughts, stories and ideas.'
    }, {
        id: 3,
        uuid: '347cedbe-f867-4184-a04d-e176dff24053',
        key: 'email',
        value: 'info@example.com',
        type: 'blog',
        created_at: '2013-11-25T14:48:11.000Z',
        created_by: 1,
        updated_at: '2015-08-20T04:30:20.000Z',
        updated_by: 1
    }, {
        id: 4,
        uuid: '4339ce48-b485-418a-acc2-1d34cf17a5e3',
        key: 'logo',
        value: '/content/images/2013/Nov/logo.png',
        type: 'blog',
        created_at: '2013-11-25T14:48:11.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.273Z',
        updated_by: 1
    }, {
        id: 5,
        uuid: 'e41b6c2a-7f72-45ea-96d8-ee016f06d78b',
        key: 'cover',
        value: '/content/images/2014/Feb/cover.jpg',
        type: 'blog',
        created_at: '2013-11-25T14:48:11.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.276Z',
        updated_by: 1
    }, {
        id: 6,
        uuid: '4558457e-9f61-47a5-9d45-8b83829bf1cf',
        key: 'defaultLang',
        value: 'en_US',
        type: 'blog',
        created_at: '2013-11-25T14:48:11.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.278Z',
        updated_by: 1
    }, {
        created_at: '2015-09-11T09:44:30.809Z',
        created_by: 1,
        id: 7,
        key: 'postsPerPage',
        type: 'blog',
        updated_at: '2015-10-04T16:26:05.211Z',
        updated_by: 1,
        uuid: '775e6ca1-bcc3-4347-a53d-15d5d76c04a4',
        value: '5'
    }, {
        id: 8,
        uuid: '3c93b240-d22b-473f-9063-537023e06c2d',
        key: 'forceI18n',
        value: 'true',
        type: 'blog',
        created_at: '2013-11-25T14:48:11.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.280Z',
        updated_by: 1
    }, {
        id: 9,
        uuid: '4e58389f-f173-4387-b28c-0435623882ad',
        key: 'activeTheme',
        value: 'casper',
        type: 'theme',
        created_at: '2013-11-25T14:48:11.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.284Z',
        updated_by: 1
    }, {
        id: 10,
        uuid: '8052c2bf-9c19-4d6c-8944-7465321d00be',
        key: 'permalinks',
        value: '/:slug/',
        type: 'blog',
        created_at: '2014-01-14T12:01:51.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.282Z',
        updated_by: 1
    }, {
        created_at: '2015-09-11T09:44:30.809Z',
        created_by: 1,
        id: 11,
        key: 'ghost_head',
        type: 'blog',
        updated_at: '2015-09-23T13:32:49.858Z',
        updated_by: 1,
        uuid: 'df7f3151-bc08-4a77-be9d-dd315b630d51',
        value: ''
    }, {
        created_at: '2015-09-11T09:44:30.809Z',
        created_by: 1,
        id: 12,
        key: 'ghost_foot',
        type: 'blog',
        updated_at: '2015-09-23T13:32:49.858Z',
        updated_by: 1,
        uuid: '0649d45e-828b-4dd0-8381-3dff6d1d5ddb',
        value: ''
    }, {
        id: 13,
        uuid: 'd806f358-7996-4c74-b153-8876959c4b70',
        key: 'labs',
        value: '{"codeInjectionUI":true}',
        type: 'blog',
        created_at: '2015-01-12T18:29:01.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.288Z',
        updated_by: 1
    }, {
        created_at: '2015-09-11T09:44:30.810Z',
        created_by: 1,
        id: 14,
        key: 'navigation',
        type: 'blog',
        updated_at: '2015-09-23T13:32:49.868Z',
        updated_by: 1,
        uuid: '4cc51d1c-fcbd-47e6-a71b-fdd1abb223fc',
        value: JSON.stringify([{ label: 'Home', url: '/' }, { label: 'About', url: '/about' }])
    }, {
        key: 'availableThemes',
        value: [{
            name: 'casper',
            'package': {
                name: 'Blog',
                version: '1.0'
            },
            active: true
        }],
        type: 'theme'
    }];
});
define("ghost/mirage/scenarios/default", ["exports"], function (exports) {
    exports["default"] = function () /* server */{
        // Seed your development database using your factories. This
        // data will not be loaded in your tests.

        // server.createList('contact', 10);
    };
});
define('ghost/mixins/404-handler', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Mixin.create({
        actions: {
            error: function error(_error, transition) {
                if (_error.errors && _error.errors[0].errorType === 'NotFoundError') {
                    transition.abort();

                    var routeInfo = transition.handlerInfos[transition.handlerInfos.length - 1];
                    var router = this.get('router');
                    var params = [];

                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;

                    try {
                        for (var _iterator = Object.keys(routeInfo.params)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var key = _step.value;

                            params.push(routeInfo.params[key]);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator['return']) {
                                _iterator['return']();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }

                    return this.transitionTo('error404', router.generate.apply(router, [routeInfo.name].concat(params)).replace('/ghost/', '').replace(/^\//g, ''));
                }

                return this._super.apply(this, arguments);
            }
        }
    });
});
define('ghost/mixins/body-event-listener', ['exports', 'ember'], function (exports, _ember) {
    var $ = _ember['default'].$;
    var Mixin = _ember['default'].Mixin;
    var run = _ember['default'].run;

    function K() {
        return this;
    }

    // Code modified from Addepar/ember-widgets
    // https://github.com/Addepar/ember-widgets/blob/master/src/mixins.coffee#L39

    exports['default'] = Mixin.create({
        bodyElementSelector: 'html',
        bodyClick: K,

        init: function init() {
            this._super.apply(this, arguments);

            return run.next(this, this._setupDocumentHandlers);
        },

        willDestroy: function willDestroy() {
            this._super.apply(this, arguments);

            return this._removeDocumentHandlers();
        },

        _setupDocumentHandlers: function _setupDocumentHandlers() {
            var _this = this;

            if (this._clickHandler) {
                return;
            }

            this._clickHandler = function () {
                return _this.bodyClick();
            };

            return $(this.get('bodyElementSelector')).on('click', this._clickHandler);
        },

        _removeDocumentHandlers: function _removeDocumentHandlers() {
            $(this.get('bodyElementSelector')).off('click', this._clickHandler);
            this._clickHandler = null;
        },

        // http://stackoverflow.com/questions/152975/how-to-detect-a-click-outside-an-element
        click: function click(event) {
            return event.stopPropagation();
        }
    });
});
define('ghost/mixins/current-user-settings', ['exports', 'ember'], function (exports, _ember) {
    var Mixin = _ember['default'].Mixin;
    exports['default'] = Mixin.create({
        transitionAuthor: function transitionAuthor() {
            var _this = this;

            return function (user) {
                if (user.get('isAuthor')) {
                    return _this.transitionTo('team.user', user);
                }

                return user;
            };
        },

        transitionEditor: function transitionEditor() {
            var _this2 = this;

            return function (user) {
                if (user.get('isEditor')) {
                    return _this2.transitionTo('team');
                }

                return user;
            };
        }
    });
});
define('ghost/mixins/dropdown-mixin', ['exports', 'ember'], function (exports, _ember) {
    var Evented = _ember['default'].Evented;
    var Mixin = _ember['default'].Mixin;

    /*
      Dropdowns and their buttons are evented and do not propagate clicks.
    */
    exports['default'] = Mixin.create(Evented, {
        classNameBindings: ['isOpen:open:closed'],
        isOpen: false,

        click: function click(event) {
            this._super(event);

            return event.stopPropagation();
        }
    });
});
define('ghost/mixins/ed-editor-api', ['exports', 'ember'], function (exports, _ember) {
    var Mixin = _ember['default'].Mixin;
    exports['default'] = Mixin.create({
        /**
         * Get Value
         *
         * Get the full contents of the textarea
         *
         * @returns {String}
         */
        getValue: function getValue() {
            return this.$().val();
        },

        /**
         * Get Selection
         *
         * Return the currently selected text from the textarea
         *
         * @returns {Selection}
         */
        getSelection: function getSelection() {
            return this.$().getSelection();
        },

        /**
         * Get Line To Cursor
         *
         * Fetch the string of characters from the start of the given line up to the cursor
         * @returns {{text: string, start: number}}
         */
        getLineToCursor: function getLineToCursor() {
            var selection = this.$().getSelection();
            var value = this.getValue();
            var lineStart = undefined;

            // Normalise newlines
            value = value.replace('\r\n', '\n');

            // We want to look at the characters behind the cursor
            lineStart = value.lastIndexOf('\n', selection.start - 1) + 1;

            return {
                text: value.substring(lineStart, selection.start),
                start: lineStart
            };
        },

        /**
         * Get Line
         *
         * Return the string of characters for the line the cursor is currently on
         *
         * @returns {{text: string, start: number, end: number}}
         */
        getLine: function getLine() {
            var selection = this.$().getSelection();
            var value = this.getValue();
            var lineStart = undefined,
                lineEnd = undefined;

            // Normalise newlines
            value = value.replace('\r\n', '\n');

            // We want to look at the characters behind the cursor
            lineStart = value.lastIndexOf('\n', selection.start - 1) + 1;
            lineEnd = value.indexOf('\n', selection.start);
            lineEnd = lineEnd === -1 ? value.length - 1 : lineEnd;

            return {
                // jscs:disable
                text: value.substring(lineStart, lineEnd).replace(/^\n/, ''),
                // jscs:enable
                start: lineStart,
                end: lineEnd
            };
        },

        /**
         * Set Selection
         *
         * Set the section of text in the textarea that should be selected by the cursor
         *
         * @param {number} start
         * @param {number} end
         */
        setSelection: function setSelection(start, end) {
            var $textarea = this.$();

            if (start === 'end') {
                start = $textarea.val().length;
            }

            end = end || start;

            $textarea.setSelection(start, end);
        },

        /**
         * Replace Selection
         *
         * @param {String} replacement - the string to replace with
         * @param {number} replacementStart - where to start replacing
         * @param {number} [replacementEnd] - when to stop replacing, defaults to replacementStart
         * @param {String|boolean|Object} [cursorPosition]  - where to put the cursor after replacing
         *
         * Cursor position after replacement defaults to the end of the replacement.
         * Providing selectionStart only will cause the cursor to be placed there, or alternatively a range can be selected
         * by providing selectionEnd.
         */
        replaceSelection: function replaceSelection(replacement, replacementStart, replacementEnd, cursorPosition) {
            var $textarea = this.$();

            cursorPosition = cursorPosition || 'collapseToEnd';
            replacementEnd = replacementEnd || replacementStart;

            $textarea.setSelection(replacementStart, replacementEnd);

            if (['select', 'collapseToStart', 'collapseToEnd'].indexOf(cursorPosition) !== -1) {
                $textarea.replaceSelectedText(replacement, cursorPosition);
            } else {
                $textarea.replaceSelectedText(replacement);
                if (cursorPosition.hasOwnProperty('start')) {
                    $textarea.setSelection(cursorPosition.start, cursorPosition.end);
                } else {
                    $textarea.setSelection(cursorPosition, cursorPosition);
                }
            }

            $textarea.focus();
            // Tell the editor it has changed, as programmatic replacements won't trigger this automatically
            this.sendAction('onChange');
        }
    });
});
define('ghost/mixins/ed-editor-scroll', ['exports', 'ember'], function (exports, _ember) {
    var Mixin = _ember['default'].Mixin;
    var run = _ember['default'].run;
    exports['default'] = Mixin.create({
        /**
         * Determine if the cursor is at the end of the textarea
         */
        isCursorAtEnd: function isCursorAtEnd() {
            var selection = this.$().getSelection();
            var value = this.getValue();
            var linesAtEnd = 3;
            var match = undefined,
                stringAfterCursor = undefined;

            stringAfterCursor = value.substring(selection.end);
            match = stringAfterCursor.match(/\n/g);

            if (!match || match.length < linesAtEnd) {
                return true;
            }

            return false;
        },

        /**
         * Build an object that represents the scroll state
         */
        getScrollInfo: function getScrollInfo() {
            var scroller = this.get('element');
            var scrollInfo = {
                top: scroller.scrollTop,
                height: scroller.scrollHeight,
                clientHeight: scroller.clientHeight,
                diff: scroller.scrollHeight - scroller.clientHeight,
                padding: 50,
                isCursorAtEnd: this.isCursorAtEnd()
            };

            return scrollInfo;
        },

        /**
         * Calculate if we're within scrollInfo.padding of the end of the document, and scroll the rest of the way
         */
        adjustScrollPosition: function adjustScrollPosition() {
            // If we're receiving change events from the end of the document, i.e the user is typing-at-the-end, update the
            // scroll position to ensure both panels stay in view and in sync
            var scrollInfo = this.getScrollInfo();

            if (scrollInfo.isCursorAtEnd && scrollInfo.diff >= scrollInfo.top && scrollInfo.diff < scrollInfo.top + scrollInfo.padding) {
                scrollInfo.top += scrollInfo.padding;
                // Scroll the left pane
                this.$().scrollTop(scrollInfo.top);
            }
        },

        /**
         * Send the scrollInfo for scrollEvents to the view so that the preview pane can be synced
         */
        scrollHandler: function scrollHandler() {
            var _this = this;

            this.set('scrollThrottle', run.throttle(this, function () {
                _this.sendAction('updateScrollInfo', _this.getScrollInfo());
            }, 10));
        },

        /**
         * once the element is in the DOM bind to the events which control scroll behaviour
         */
        attachScrollHandlers: function attachScrollHandlers() {
            var $el = this.$();

            $el.on('keypress', run.bind(this, this.adjustScrollPosition));

            $el.on('scroll', run.bind(this, this.scrollHandler));
        },

        /**
         * once the element has been removed from the DOM unbind from the events which control scroll behaviour
         */
        detachScrollHandlers: function detachScrollHandlers() {
            this.$().off('keypress');
            this.$().off('scroll');
            run.cancel(this.get('scrollThrottle'));
        },

        didInsertElement: function didInsertElement() {
            this._super.apply(this, arguments);

            this.attachScrollHandlers();
        },

        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);

            this.detachScrollHandlers();
        }
    });
});
define('ghost/mixins/ed-editor-shortcuts', ['exports', 'ember', 'ghost/utils/titleize'], function (exports, _ember, _ghostUtilsTitleize) {
    var Mixin = _ember['default'].Mixin;

    // Used for simple, noncomputational replace-and-go! shortcuts.
    // See default case in shortcut function below.
    var simpleShortcutSyntax = {
        bold: {
            regex: '**|**',
            cursor: '|'
        },
        italic: {
            regex: '*|*',
            cursor: '|'

        },
        strike: {
            regex: '~~|~~',
            cursor: '|'
        },
        code: {
            regex: '`|`',
            cursor: '|'
        },
        blockquote: {
            regex: '> |',
            cursor: '|',
            newline: true
        },
        list: {
            regex: '* |',
            cursor: '|',
            newline: true
        },
        link: {
            regex: '[|](http://)',
            cursor: 'http://'
        },
        image: {
            regex: '![|](http://)',
            cursor: 'http://',
            newline: true
        }
    };

    var shortcuts = {
        simple: function simple(type, replacement, selection, line) {
            var startIndex = 0;
            var shortcut = undefined;

            if (simpleShortcutSyntax.hasOwnProperty(type)) {
                shortcut = simpleShortcutSyntax[type];
                // insert the markdown
                replacement.text = shortcut.regex.replace('|', selection.text);

                // add a newline if needed
                if (shortcut.newline && line.text !== '') {
                    startIndex = 1;
                    replacement.text = '\n' + replacement.text;
                }

                // handle cursor position
                if (selection.text === '' && shortcut.cursor === '|') {
                    // the cursor should go where | was
                    replacement.position = startIndex + replacement.start + shortcut.regex.indexOf(shortcut.cursor);
                } else if (shortcut.cursor !== '|') {
                    // the cursor should select the string which matches shortcut.cursor
                    replacement.position = {
                        start: replacement.start + replacement.text.indexOf(shortcut.cursor)
                    };
                    replacement.position.end = replacement.position.start + shortcut.cursor.length;
                }
            }

            return replacement;
        },

        cycleHeaderLevel: function cycleHeaderLevel(replacement, line) {
            var match = line.text.match(/^#+/);
            var currentHeaderLevel = undefined,
                hashPrefix = undefined;

            if (!match) {
                currentHeaderLevel = 1;
            } else {
                currentHeaderLevel = match[0].length;
            }

            if (currentHeaderLevel > 2) {
                currentHeaderLevel = 1;
            }

            hashPrefix = new Array(currentHeaderLevel + 2).join('#');

            replacement.text = hashPrefix + ' ' + line.text.replace(/^#* /, '');

            replacement.start = line.start;
            replacement.end = line.end;

            return replacement;
        },

        copyHTML: function copyHTML(editor, selection) {
            var converter = new Showdown.converter();
            var generatedHTML = undefined;

            if (selection.text) {
                generatedHTML = converter.makeHtml(selection.text);
            } else {
                generatedHTML = converter.makeHtml(editor.getValue());
            }

            // Talk to the editor
            editor.sendAction('openModal', 'copy-html', { generatedHTML: generatedHTML });
        },

        currentDate: function currentDate(replacement) {
            replacement.text = moment(new Date()).format('D MMMM YYYY');
            return replacement;
        },

        uppercase: function uppercase(replacement, selection) {
            replacement.text = selection.text.toLocaleUpperCase();
            return replacement;
        },

        lowercase: function lowercase(replacement, selection) {
            replacement.text = selection.text.toLocaleLowerCase();
            return replacement;
        },

        titlecase: function titlecase(replacement, selection) {
            replacement.text = (0, _ghostUtilsTitleize['default'])(selection.text);
            return replacement;
        }
    };

    exports['default'] = Mixin.create({
        shortcut: function shortcut(type) {
            var selection = this.getSelection();
            var replacement = {
                start: selection.start,
                end: selection.end,
                position: 'collapseToEnd'
            };

            switch (type) {
                // This shortcut is special as it needs to send an action
                case 'copyHTML':
                    shortcuts.copyHTML(this, selection);
                    break;
                case 'cycleHeaderLevel':
                    replacement = shortcuts.cycleHeaderLevel(replacement, this.getLine());
                    break;
                // These shortcuts all process the basic information
                case 'currentDate':
                case 'uppercase':
                case 'lowercase':
                case 'titlecase':
                    replacement = shortcuts[type](replacement, selection, this.getLineToCursor());
                    break;
                // All the of basic formatting shortcuts work with a regex
                default:
                    replacement = shortcuts.simple(type, replacement, selection, this.getLineToCursor());
            }

            if (replacement.text) {
                this.replaceSelection(replacement.text, replacement.start, replacement.end, replacement.position);
            }
        }
    });
});
/* global moment, Showdown */
define('ghost/mixins/editor-base-controller', ['exports', 'ember', 'ghost/models/post', 'ghost/utils/bound-one-way', 'ghost/utils/ed-image-manager'], function (exports, _ember, _ghostModelsPost, _ghostUtilsBoundOneWay, _ghostUtilsEdImageManager) {
    var Mixin = _ember['default'].Mixin;
    var RSVP = _ember['default'].RSVP;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    var observer = _ember['default'].observer;
    var run = _ember['default'].run;
    var alias = computed.alias;

    // this array will hold properties we need to watch
    // to know if the model has been changed (`controller.hasDirtyAttributes`)
    var watchedProps = ['model.scratch', 'model.titleScratch', 'model.hasDirtyAttributes', 'model.tags.[]'];

    _ghostModelsPost['default'].eachAttribute(function (name) {
        watchedProps.push('model.' + name);
    });

    exports['default'] = Mixin.create({
        _autoSaveId: null,
        _timedSaveId: null,
        editor: null,
        submitting: false,

        postSettingsMenuController: inject.controller('post-settings-menu'),
        notifications: inject.service(),

        init: function init() {
            var _this = this;

            this._super.apply(this, arguments);
            window.onbeforeunload = function () {
                return _this.get('hasDirtyAttributes') ? _this.unloadDirtyMessage() : null;
            };
        },

        shouldFocusTitle: alias('model.isNew'),
        shouldFocusEditor: false,

        autoSave: observer('model.scratch', function () {
            // Don't save just because we swapped out models
            if (this.get('model.isDraft') && !this.get('model.isNew')) {
                var autoSaveId = undefined,
                    saveOptions = undefined,
                    timedSaveId = undefined;

                saveOptions = {
                    silent: true,
                    backgroundSave: true
                };

                timedSaveId = run.throttle(this, 'send', 'save', saveOptions, 60000, false);
                this._timedSaveId = timedSaveId;

                autoSaveId = run.debounce(this, 'send', 'save', saveOptions, 3000);
                this._autoSaveId = autoSaveId;
            }
        }),

        /**
         * By default, a post will not change its publish state.
         * Only with a user-set value (via setSaveType action)
         * can the post's status change.
         */
        willPublish: (0, _ghostUtilsBoundOneWay['default'])('model.isPublished'),

        // set by the editor route and `hasDirtyAttributes`. useful when checking
        // whether the number of tags has changed for `hasDirtyAttributes`.
        previousTagNames: null,

        tagNames: computed('model.tags.@each.name', function () {
            return this.get('model.tags').mapBy('name');
        }),

        postOrPage: computed('model.page', function () {
            return this.get('model.page') ? 'Page' : 'Post';
        }),

        // compares previousTagNames to tagNames
        tagNamesEqual: function tagNamesEqual() {
            var tagNames = this.get('tagNames');
            var previousTagNames = this.get('previousTagNames');
            var hashCurrent = undefined,
                hashPrevious = undefined;

            // beware! even if they have the same length,
            // that doesn't mean they're the same.
            if (tagNames.length !== previousTagNames.length) {
                return false;
            }

            // instead of comparing with slow, nested for loops,
            // perform join on each array and compare the strings
            hashCurrent = tagNames.join('');
            hashPrevious = previousTagNames.join('');

            return hashCurrent === hashPrevious;
        },

        // a hook created in editor-base-route's setupController
        modelSaved: function modelSaved() {
            var model = this.get('model');

            // safer to updateTags on save in one place
            // rather than in all other places save is called
            model.updateTags();

            // set previousTagNames to current tagNames for hasDirtyAttributes check
            this.set('previousTagNames', this.get('tagNames'));

            // `updateTags` triggers `hasDirtyAttributes => true`.
            // for a saved model it would otherwise be false.

            // if the two "scratch" properties (title and content) match the model, then
            // it's ok to set hasDirtyAttributes to false
            if (model.get('titleScratch') === model.get('title') && model.get('scratch') === model.get('markdown')) {
                this.set('hasDirtyAttributes', false);
            }
        },

        // an ugly hack, but necessary to watch all the model's properties
        // and more, without having to be explicit and do it manually
        hasDirtyAttributes: computed.apply(_ember['default'], watchedProps.concat({
            get: function get() {
                var model = this.get('model');
                var markdown = model.get('markdown');
                var title = model.get('title');
                var titleScratch = model.get('titleScratch');
                var scratch = this.get('editor').getValue();
                var changedAttributes = undefined;

                if (!this.tagNamesEqual()) {
                    return true;
                }

                if (titleScratch !== title) {
                    return true;
                }

                // since `scratch` is not model property, we need to check
                // it explicitly against the model's markdown attribute
                if (markdown !== scratch) {
                    return true;
                }

                // if the Adapter failed to save the model isError will be true
                // and we should consider the model still dirty.
                if (model.get('isError')) {
                    return true;
                }

                // models created on the client always return `hasDirtyAttributes: true`,
                // so we need to see which properties have actually changed.
                if (model.get('isNew')) {
                    changedAttributes = Object.keys(model.changedAttributes());

                    if (changedAttributes.length) {
                        return true;
                    }

                    return false;
                }

                // even though we use the `scratch` prop to show edits,
                // which does *not* change the model's `hasDirtyAttributes` property,
                // `hasDirtyAttributes` will tell us if the other props have changed,
                // as long as the model is not new (model.isNew === false).
                return model.get('hasDirtyAttributes');
            },
            set: function set(key, value) {
                return value;
            }
        })),

        // used on window.onbeforeunload
        unloadDirtyMessage: function unloadDirtyMessage() {
            return '==============================\n\n' + 'Hey there! It looks like you\'re in the middle of writing' + ' something and you haven\'t saved all of your content.' + '\n\nSave before you go!\n\n' + '==============================';
        },

        // TODO: This has to be moved to the I18n localization file.
        // This structure is supposed to be close to the i18n-localization which will be used soon.
        messageMap: {
            errors: {
                post: {
                    published: {
                        published: 'Update failed.',
                        draft: 'Saving failed.'
                    },
                    draft: {
                        published: 'Publish failed.',
                        draft: 'Saving failed.'
                    }

                }
            },

            success: {
                post: {
                    published: {
                        published: 'Updated.',
                        draft: 'Saved.'
                    },
                    draft: {
                        published: 'Published!',
                        draft: 'Saved.'
                    }
                }
            }
        },

        // TODO: Update for new notification click-action API
        showSaveNotification: function showSaveNotification(prevStatus, status, delay) {
            var message = this.messageMap.success.post[prevStatus][status];
            var path = this.get('model.absoluteUrl');
            var type = this.get('postOrPage');
            var notifications = this.get('notifications');

            if (status === 'published') {
                message += '&nbsp;<a href="' + path + '">View ' + type + '</a>';
            }

            notifications.showNotification(message.htmlSafe(), { delayed: delay });
        },

        showErrorAlert: function showErrorAlert(prevStatus, status, errors, delay) {
            var message = this.messageMap.errors.post[prevStatus][status];
            var notifications = this.get('notifications');
            var error = undefined;

            function isString(str) {
                /*global toString*/
                return toString.call(str) === '[object String]';
            }

            if (errors && isString(errors)) {
                error = errors;
            } else if (errors && errors[0] && isString(errors[0])) {
                error = errors[0];
            } else if (errors && errors[0] && errors[0].message && isString(errors[0].message)) {
                error = errors[0].message;
            } else {
                error = 'Unknown Error';
            }

            message += '<br />' + error;
            message = _ember['default'].String.htmlSafe(message);

            notifications.showAlert(message, { type: 'error', delayed: delay, key: 'post.save' });
        },

        actions: {
            save: function save(options) {
                var _this2 = this;

                var status = undefined;
                var prevStatus = this.get('model.status');
                var isNew = this.get('model.isNew');
                var autoSaveId = this._autoSaveId;
                var timedSaveId = this._timedSaveId;
                var psmController = this.get('postSettingsMenuController');
                var promise = undefined;

                options = options || {};

                // when navigating quickly between pages autoSave will occasionally
                // try to run after the editor has been torn down so bail out here
                // before we throw errors
                if (!this.get('editor').$()) {
                    return 0;
                }

                this.toggleProperty('submitting');

                if (options.backgroundSave) {
                    // do not allow a post's status to be set to published by a background save
                    status = 'draft';
                } else {
                    status = this.get('willPublish') ? 'published' : 'draft';
                }

                if (autoSaveId) {
                    run.cancel(autoSaveId);
                    this._autoSaveId = null;
                }

                if (timedSaveId) {
                    run.cancel(timedSaveId);
                    this._timedSaveId = null;
                }

                // Set the properties that are indirected
                // set markdown equal to what's in the editor, minus the image markers.
                this.set('model.markdown', this.get('editor').getValue());
                this.set('model.status', status);

                // Set a default title
                if (!this.get('model.titleScratch').trim()) {
                    this.set('model.titleScratch', '(Untitled)');
                }

                this.set('model.title', this.get('model.titleScratch'));
                this.set('model.meta_title', psmController.get('metaTitleScratch'));
                this.set('model.meta_description', psmController.get('metaDescriptionScratch'));

                if (!this.get('model.slug')) {
                    // Cancel any pending slug generation that may still be queued in the
                    // run loop because we need to run it before the post is saved.
                    run.cancel(psmController.get('debounceId'));

                    psmController.generateAndSetSlug('model.slug');
                }

                promise = RSVP.resolve(psmController.get('lastPromise')).then(function () {
                    return _this2.get('model').save(options).then(function (model) {
                        if (!options.silent) {
                            _this2.showSaveNotification(prevStatus, model.get('status'), isNew ? true : false);
                        }

                        _this2.toggleProperty('submitting');
                        return model;
                    });
                })['catch'](function (errors) {
                    if (!options.silent) {
                        errors = errors || _this2.get('model.errors.messages');
                        _this2.showErrorAlert(prevStatus, _this2.get('model.status'), errors);
                    }

                    _this2.set('model.status', prevStatus);

                    _this2.toggleProperty('submitting');
                    return _this2.get('model');
                });

                psmController.set('lastPromise', promise);

                return promise;
            },

            setSaveType: function setSaveType(newType) {
                if (newType === 'publish') {
                    this.set('willPublish', true);
                } else if (newType === 'draft') {
                    this.set('willPublish', false);
                }
            },

            // set from a `sendAction` on the gh-ed-editor component,
            // so that we get a reference for handling uploads.
            setEditor: function setEditor(editor) {
                this.set('editor', editor);
            },

            // fired from the gh-ed-preview component when an image upload starts
            disableEditor: function disableEditor() {
                this.get('editor').disable();
            },

            // fired from the gh-ed-preview component when an image upload finishes
            enableEditor: function enableEditor() {
                this.get('editor').enable();
            },

            // Match the uploaded file to a line in the editor, and update that line with a path reference
            // ensuring that everything ends up in the correct place and format.
            handleImgUpload: function handleImgUpload(e, resultSrc) {
                var editor = this.get('editor');
                var editorValue = editor.getValue();
                var replacement = _ghostUtilsEdImageManager['default'].getSrcRange(editorValue, e.target);
                var cursorPosition = undefined;

                if (replacement) {
                    cursorPosition = replacement.start + resultSrc.length + 1;
                    if (replacement.needsParens) {
                        resultSrc = '(' + resultSrc + ')';
                    }
                    editor.replaceSelection(resultSrc, replacement.start, replacement.end, cursorPosition);
                }
            },

            autoSaveNew: function autoSaveNew() {
                if (this.get('model.isNew')) {
                    this.send('save', { silent: true, backgroundSave: true });
                }
            },

            updateEditorScrollInfo: function updateEditorScrollInfo(scrollInfo) {
                this.set('editorScrollInfo', scrollInfo);
            },

            updateHeight: function updateHeight(height) {
                this.set('height', height);
            }
        }
    });
});
define('ghost/mixins/editor-base-route', ['exports', 'ember', 'ghost/mixins/shortcuts-route', 'ghost/mixins/style-body', 'ghost/utils/editor-shortcuts'], function (exports, _ember, _ghostMixinsShortcutsRoute, _ghostMixinsStyleBody, _ghostUtilsEditorShortcuts) {
    var Mixin = _ember['default'].Mixin;
    var RSVP = _ember['default'].RSVP;
    var run = _ember['default'].run;
    exports['default'] = Mixin.create(_ghostMixinsStyleBody['default'], _ghostMixinsShortcutsRoute['default'], {
        classNames: ['editor'],

        actions: {
            save: function save() {
                this.get('controller').send('save');
            },

            publish: function publish() {
                var controller = this.get('controller');

                controller.send('setSaveType', 'publish');
                controller.send('save');
            },

            toggleZenMode: function toggleZenMode() {
                _ember['default'].$('body').toggleClass('zen');
            },

            // The actual functionality is implemented in utils/ed-editor-shortcuts
            editorShortcut: function editorShortcut(options) {
                // Only fire editor shortcuts when the editor has focus.
                if (this.get('controller.editor').$().is(':focus')) {
                    this.get('controller.editor').shortcut(options.type);
                }
            },

            willTransition: function willTransition(transition) {
                var controller = this.get('controller');
                var scratch = controller.get('model.scratch');
                var controllerIsDirty = controller.get('hasDirtyAttributes');
                var model = controller.get('model');
                var state = model.getProperties('isDeleted', 'isSaving', 'hasDirtyAttributes', 'isNew');
                var deletedWithoutChanges = undefined,
                    fromNewToEdit = undefined;

                // if a save is in-flight we don't know whether or not it's safe to leave
                // so we abort the transition and retry after the save has completed.
                if (state.isSaving) {
                    transition.abort();
                    return run.later(this, function () {
                        RSVP.resolve(controller.get('lastPromise')).then(function () {
                            transition.retry();
                        });
                    }, 100);
                }

                fromNewToEdit = this.get('routeName') === 'editor.new' && transition.targetName === 'editor.edit' && transition.intent.contexts && transition.intent.contexts[0] && transition.intent.contexts[0].id === model.get('id');

                deletedWithoutChanges = state.isDeleted && (state.isSaving || !state.hasDirtyAttributes);

                if (!fromNewToEdit && !deletedWithoutChanges && controllerIsDirty) {
                    transition.abort();
                    this.send('openModal', 'leave-editor', [controller, transition]);
                    return;
                }

                // The controller may hold model state that will be lost in the transition,
                // so we need to apply it now.
                if (fromNewToEdit && controllerIsDirty) {
                    if (scratch !== model.get('markdown')) {
                        model.set('markdown', scratch);
                    }
                }

                if (state.isNew) {
                    model.deleteRecord();
                }

                // since the transition is now certain to complete..
                window.onbeforeunload = null;

                // remove model-related listeners created in editor-base-route
                this.detachModelHooks(controller, model);
            }
        },

        renderTemplate: function renderTemplate(controller, model) {
            this._super(controller, model);

            this.render('post-settings-menu', {
                model: model,
                into: 'application',
                outlet: 'settings-menu'
            });
        },

        shortcuts: _ghostUtilsEditorShortcuts['default'],

        attachModelHooks: function attachModelHooks(controller, model) {
            // this will allow us to track when the model is saved and update the controller
            // so that we can be sure controller.hasDirtyAttributes is correct, without having to update the
            // controller on each instance of `model.save()`.
            //
            // another reason we can't do this on `model.save().then()` is because the post-settings-menu
            // also saves the model, and passing messages is difficult because we have two
            // types of editor controllers, and the PSM also exists on the posts.post route.
            //
            // The reason we can't just keep this functionality in the editor controller is
            // because we need to remove these handlers on `willTransition` in the editor route.
            model.on('didCreate', controller, controller.get('modelSaved'));
            model.on('didUpdate', controller, controller.get('modelSaved'));
        },

        detachModelHooks: function detachModelHooks(controller, model) {
            model.off('didCreate', controller, controller.get('modelSaved'));
            model.off('didUpdate', controller, controller.get('modelSaved'));
        },

        setupController: function setupController(controller, model) {
            var tags = model.get('tags');

            model.set('scratch', model.get('markdown'));
            model.set('titleScratch', model.get('title'));

            this._super.apply(this, arguments);

            if (tags) {
                // used to check if anything has changed in the editor
                controller.set('previousTagNames', tags.mapBy('name'));
            } else {
                controller.set('previousTagNames', []);
            }

            // attach model-related listeners created in editor-base-route
            this.attachModelHooks(controller, model);
        }
    });
});
define('ghost/mixins/infinite-scroll', ['exports', 'ember'], function (exports, _ember) {
    var Mixin = _ember['default'].Mixin;
    var run = _ember['default'].run;
    exports['default'] = Mixin.create({
        isLoading: false,
        triggerPoint: 100,

        /**
         * Determines if we are past a scroll point where we need to fetch the next page
         * @param {object} event The scroll event
         */
        checkScroll: function checkScroll(event) {
            var element = event.target;
            var triggerPoint = this.get('triggerPoint');
            var isLoading = this.get('isLoading');

            // If we haven't passed our threshold or we are already fetching content, exit
            if (isLoading || element.scrollTop + element.clientHeight + triggerPoint <= element.scrollHeight) {
                return;
            }

            this.sendAction('fetch');
        },

        didInsertElement: function didInsertElement() {
            this._super.apply(this, arguments);

            var el = this.get('element');

            el.onscroll = run.bind(this, this.checkScroll);

            if (el.scrollHeight <= el.clientHeight) {
                this.sendAction('fetch');
            }
        },

        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);

            // turn off the scroll handler
            this.get('element').onscroll = null;
        }
    });
});
define('ghost/mixins/pagination-route', ['exports', 'ember', 'ghost/utils/ajax'], function (exports, _ember, _ghostUtilsAjax) {
    var Mixin = _ember['default'].Mixin;
    var inject = _ember['default'].inject;

    var defaultPaginationSettings = {
        page: 1,
        limit: 15
    };

    exports['default'] = Mixin.create({
        notifications: inject.service(),

        paginationModel: null,
        paginationSettings: null,
        paginationMeta: null,

        init: function init() {
            var paginationSettings = this.get('paginationSettings');
            var settings = _ember['default'].$.extend({}, defaultPaginationSettings, paginationSettings);

            this._super.apply(this, arguments);
            this.set('paginationSettings', settings);
            this.set('paginationMeta', {});
        },

        /**
         * Takes an ajax response, concatenates any error messages, then generates an error notification.
         * @param {jqXHR} response The jQuery ajax reponse object.
         * @return
         */
        reportLoadError: function reportLoadError(response) {
            var message = 'A problem was encountered while loading more records';

            if (response) {
                // Get message from response
                message += ': ' + (0, _ghostUtilsAjax['default'])(response, true);
            } else {
                message += '.';
            }

            this.get('notifications').showAlert(message, { type: 'error', key: 'pagination.load.failed' });
        },

        loadFirstPage: function loadFirstPage() {
            var _this = this;

            var paginationSettings = this.get('paginationSettings');
            var modelName = this.get('paginationModel');

            paginationSettings.page = 1;

            return this.get('store').query(modelName, paginationSettings).then(function (results) {
                _this.set('paginationMeta', results.meta);
                return results;
            }, function (response) {
                _this.reportLoadError(response);
            });
        },

        actions: {
            loadFirstPage: function loadFirstPage() {
                return this.loadFirstPage();
            },

            /**
             * Loads the next paginated page of posts into the ember-data store. Will cause the posts list UI to update.
             * @return
             */
            loadNextPage: function loadNextPage() {
                var _this2 = this;

                var store = this.get('store');
                var modelName = this.get('paginationModel');
                var metadata = this.get('paginationMeta');
                var nextPage = metadata.pagination && metadata.pagination.next;
                var paginationSettings = this.get('paginationSettings');

                if (nextPage) {
                    this.set('isLoading', true);
                    this.set('paginationSettings.page', nextPage);

                    store.query(modelName, paginationSettings).then(function (results) {
                        _this2.set('isLoading', false);
                        _this2.set('paginationMeta', results.meta);
                        return results;
                    }, function (response) {
                        _this2.reportLoadError(response);
                    });
                }
            },

            resetPagination: function resetPagination() {
                this.set('paginationSettings.page', 1);
            }
        }
    });
});
define('ghost/mixins/settings-menu-controller', ['exports', 'ember'], function (exports, _ember) {
    var Mixin = _ember['default'].Mixin;
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    exports['default'] = Mixin.create({
        application: inject.controller(),

        isViewingSubview: computed('application.showSettingsMenu', {
            get: function get() {
                return false;
            },
            set: function set(key, value) {
                // Not viewing a subview if we can't even see the PSM
                if (!this.get('application.showSettingsMenu')) {
                    return false;
                }
                return value;
            }
        }),

        actions: {
            showSubview: function showSubview() {
                this.set('isViewingSubview', true);
            },

            closeSubview: function closeSubview() {
                this.set('isViewingSubview', false);
            }
        }
    });
});
define('ghost/mixins/settings-save', ['exports', 'ember'], function (exports, _ember) {
    var Mixin = _ember['default'].Mixin;
    exports['default'] = Mixin.create({
        submitting: false,

        actions: {
            save: function save() {
                var _this = this;

                this.set('submitting', true);

                this.save().then(function () {
                    _this.set('submitting', false);
                });
            }
        }
    });
});
define('ghost/mixins/shortcuts-route', ['exports', 'ember'], function (exports, _ember) {
    var Mixin = _ember['default'].Mixin;
    var run = _ember['default'].run;
    var typeOf = _ember['default'].typeOf;

    // Configure KeyMaster to respond to all shortcuts,
    // even inside of
    // input, textarea, and select.
    key.filter = function () {
        return true;
    };

    key.setScope('default');
    /**
     * Only routes can implement shortcuts.
     * If you need to trigger actions on the controller,
     * simply call them with `this.get('controller').send('action')`.
     *
     * To implement shortcuts, add this mixin to your `extend()`,
     * and implement a `shortcuts` hash.
     * In this hash, keys are shortcut combinations and values are route action names.
     *  (see [keymaster docs](https://github.com/madrobby/keymaster/blob/master/README.markdown)),
     *
     * ```javascript
     * shortcuts: {
     *     'ctrl+s, command+s': 'save',
     *     'ctrl+alt+z': 'toggleZenMode'
     * }
     * ```
     * For more complex actions, shortcuts can instead have their value
     * be an object like {action, options}
     * ```javascript
     * shortcuts: {
     *      'ctrl+k': {action: 'markdownShortcut', options: 'createLink'}
     * }
     * ```
     * You can set the scope of your shortcut by passing a scope property.
     * ```javascript
     * shortcuts : {
     *   'enter': {action : 'confirmModal', scope: 'modal'}
     * }
     * ```
     * If you don't specify a scope, we use a default scope called "default".
     * To have all your shortcut work in all scopes, give it the scope "all".
     * Find out more at the keymaster docs
     */
    exports['default'] = Mixin.create({
        registerShortcuts: function registerShortcuts() {
            var _this = this;

            var shortcuts = this.get('shortcuts');

            Object.keys(shortcuts).forEach(function (shortcut) {
                var scope = shortcuts[shortcut].scope || 'default';
                var action = shortcuts[shortcut];
                var options = undefined;

                if (typeOf(action) !== 'string') {
                    options = action.options;
                    action = action.action;
                }

                key(shortcut, scope, function (event) {
                    // stop things like ctrl+s from actually opening a save dialogue
                    event.preventDefault();
                    run(_this, function () {
                        this.send(action, options);
                    });
                });
            });
        },

        removeShortcuts: function removeShortcuts() {
            var shortcuts = this.get('shortcuts');

            Object.keys(shortcuts).forEach(function (shortcut) {
                var scope = shortcuts[shortcut].scope || 'default';
                key.unbind(shortcut, scope);
            });
        },

        activate: function activate() {
            this._super.apply(this, arguments);
            this.registerShortcuts();
        },

        deactivate: function deactivate() {
            this._super.apply(this, arguments);
            this.removeShortcuts();
        }
    });
});
/* global key */
define('ghost/mixins/slug-url', ['exports', 'ember'], function (exports, _ember) {
    var isBlank = _ember['default'].isBlank;
    exports['default'] = _ember['default'].Mixin.create({
        buildURL: function buildURL(_modelName, _id, _snapshot, _requestType, query) {
            var url = this._super.apply(this, arguments);

            if (query && !isBlank(query.slug)) {
                url += 'slug/' + query.slug + '/';
                delete query.slug;
            }

            return url;
        }
    });
});
define('ghost/mixins/style-body', ['exports', 'ember'], function (exports, _ember) {
    var Mixin = _ember['default'].Mixin;
    var run = _ember['default'].run;

    // mixin used for routes that need to set a css className on the body tag
    exports['default'] = Mixin.create({
        activate: function activate() {
            var cssClasses = this.get('classNames');

            this._super.apply(this, arguments);

            if (cssClasses) {
                run.schedule('afterRender', null, function () {
                    cssClasses.forEach(function (curClass) {
                        _ember['default'].$('body').addClass(curClass);
                    });
                });
            }
        },

        deactivate: function deactivate() {
            var cssClasses = this.get('classNames');

            this._super.apply(this, arguments);

            run.schedule('afterRender', null, function () {
                cssClasses.forEach(function (curClass) {
                    _ember['default'].$('body').removeClass(curClass);
                });
            });
        }
    });
});
define('ghost/mixins/text-input', ['exports', 'ember'], function (exports, _ember) {
    var Mixin = _ember['default'].Mixin;
    exports['default'] = Mixin.create({
        selectOnClick: false,
        stopEnterKeyDownPropagation: false,

        click: function click(event) {
            if (this.get('selectOnClick')) {
                event.currentTarget.select();
            }
        },

        keyDown: function keyDown(event) {
            // stop event propagation when pressing "enter"
            // most useful in the case when undesired (global) keyboard shortcuts are getting triggered while interacting
            // with this particular input element.
            if (this.get('stopEnterKeyDownPropagation') && event.keyCode === 13) {
                event.stopPropagation();

                return true;
            }
        }
    });
});
define('ghost/mixins/validation-engine', ['exports', 'ember', 'ember-data', 'ghost/utils/ajax', 'ghost/utils/validator-extensions', 'ghost/validators/post', 'ghost/validators/setup', 'ghost/validators/signup', 'ghost/validators/signin', 'ghost/validators/setting', 'ghost/validators/reset', 'ghost/validators/user', 'ghost/validators/tag-settings', 'ghost/validators/nav-item'], function (exports, _ember, _emberData, _ghostUtilsAjax, _ghostUtilsValidatorExtensions, _ghostValidatorsPost, _ghostValidatorsSetup, _ghostValidatorsSignup, _ghostValidatorsSignin, _ghostValidatorsSetting, _ghostValidatorsReset, _ghostValidatorsUser, _ghostValidatorsTagSettings, _ghostValidatorsNavItem) {
    var Mixin = _ember['default'].Mixin;
    var RSVP = _ember['default'].RSVP;
    var isArray = _ember['default'].isArray;
    var Errors = _emberData['default'].Errors;
    var Model = _emberData['default'].Model;

    var emberA = _ember['default'].A;

    // our extensions to the validator library
    _ghostUtilsValidatorExtensions['default'].init();

    /**
    * The class that gets this mixin will receive these properties and functions.
    * It will be able to validate any properties on itself (or the model it passes to validate())
    * with the use of a declared validator.
    */
    exports['default'] = Mixin.create({
        // these validators can be passed a model to validate when the class that
        // mixes in the ValidationEngine declares a validationType equal to a key on this object.
        // the model is either passed in via `this.validate({ model: object })`
        // or by calling `this.validate()` without the model property.
        // in that case the model will be the class that the ValidationEngine
        // was mixed into, i.e. the controller or Ember Data model.
        validators: {
            post: _ghostValidatorsPost['default'],
            setup: _ghostValidatorsSetup['default'],
            signup: _ghostValidatorsSignup['default'],
            signin: _ghostValidatorsSignin['default'],
            setting: _ghostValidatorsSetting['default'],
            reset: _ghostValidatorsReset['default'],
            user: _ghostValidatorsUser['default'],
            tag: _ghostValidatorsTagSettings['default'],
            navItem: _ghostValidatorsNavItem['default']
        },

        // This adds the Errors object to the validation engine, and shouldn't affect
        // ember-data models because they essentially use the same thing
        errors: Errors.create(),

        // Store whether a property has been validated yet, so that we know whether or not
        // to show error / success validation for a field
        hasValidated: emberA(),

        /**
        * Passes the model to the validator specified by validationType.
        * Returns a promise that will resolve if validation succeeds, and reject if not.
        * Some options can be specified:
        *
        * `model: Object` - you can specify the model to be validated, rather than pass the default value of `this`,
        *                   the class that mixes in this mixin.
        *
        * `property: String` - you can specify a specific property to validate. If
        * 					   no property is specified, the entire model will be
        * 					   validated
        */
        validate: function validate(opts) {
            var model = this;
            var hasValidated = undefined,
                type = undefined,
                validator = undefined;

            opts = opts || {};

            if (opts.model) {
                model = opts.model;
            } else if (this instanceof Model) {
                model = this;
            } else if (this.get('model')) {
                model = this.get('model');
            }

            type = this.get('validationType') || model.get('validationType');
            validator = this.get('validators.' + type) || model.get('validators.' + type);
            hasValidated = this.get('hasValidated');

            opts.validationType = type;

            return new RSVP.Promise(function (resolve, reject) {
                var passed = undefined;

                if (!type || !validator) {
                    return reject(['The validator specified, "' + type + '", did not exist!']);
                }

                if (opts.property) {
                    // If property isn't in `hasValidated`, add it to mark that this field can show a validation result
                    hasValidated.addObject(opts.property);
                    model.get('errors').remove(opts.property);
                } else {
                    model.get('errors').clear();
                }

                passed = validator.check(model, opts.property);

                return passed ? resolve() : reject();
            });
        },

        /**
        * The primary goal of this method is to override the `save` method on Ember Data models.
        * This allows us to run validation before actually trying to save the model to the server.
        * You can supply options to be passed into the `validate` method, since the ED `save` method takes no options.
        */
        save: function save(options) {
            var _this = this;

            var _super = this._super;

            options = options || {};
            options.wasSave = true;

            // model.destroyRecord() calls model.save() behind the scenes.
            // in that case, we don't need validation checks or error propagation,
            // because the model itself is being destroyed.
            if (this.get('isDeleted')) {
                return this._super.apply(this, arguments);
            }

            // If validation fails, reject with validation errors.
            // If save to the server fails, reject with server response.
            return this.validate(options).then(function () {
                return _super.call(_this, options);
            })['catch'](function (result) {
                // server save failed or validator type doesn't exist
                if (result && !isArray(result)) {
                    // return the array of errors from the server
                    result = (0, _ghostUtilsAjax['default'])(result);
                }

                return RSVP.reject(result);
            });
        },

        actions: {
            validate: function validate(property) {
                this.validate({ property: property });
            }
        }
    });
});
define('ghost/mixins/validation-state', ['exports', 'ember'], function (exports, _ember) {
    var Mixin = _ember['default'].Mixin;
    var computed = _ember['default'].computed;
    var isEmpty = _ember['default'].isEmpty;

    var emberA = _ember['default'].A;

    exports['default'] = Mixin.create({

        errors: null,
        property: '',
        hasValidated: emberA(),

        hasError: computed('errors.[]', 'property', 'hasValidated.[]', function () {
            var property = this.get('property');
            var errors = this.get('errors');
            var hasValidated = this.get('hasValidated');

            // if we aren't looking at a specific property we always want an error class
            if (!property && !isEmpty(errors)) {
                return true;
            }

            // If we haven't yet validated this field, there is no validation class needed
            if (!hasValidated || !hasValidated.contains(property)) {
                return false;
            }

            if (errors) {
                return errors.get(property);
            }

            return false;
        })

    });
});
define('ghost/models/notification', ['exports', 'ember-data'], function (exports, _emberData) {
    var Model = _emberData['default'].Model;
    var attr = _emberData['default'].attr;
    exports['default'] = Model.extend({
        dismissible: attr('boolean'),
        status: attr('string'),
        type: attr('string'),
        message: attr('string')
    });
});
define('ghost/models/post', ['exports', 'ember', 'ember-data', 'ghost/mixins/validation-engine'], function (exports, _ember, _emberData, _ghostMixinsValidationEngine) {
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    var equal = computed.equal;
    var Model = _emberData['default'].Model;
    var attr = _emberData['default'].attr;
    var belongsTo = _emberData['default'].belongsTo;
    var hasMany = _emberData['default'].hasMany;
    exports['default'] = Model.extend(_ghostMixinsValidationEngine['default'], {
        validationType: 'post',

        uuid: attr('string'),
        title: attr('string', { defaultValue: '' }),
        slug: attr('string'),
        markdown: attr('string', { defaultValue: '' }),
        html: attr('string'),
        image: attr('string'),
        featured: attr('boolean', { defaultValue: false }),
        page: attr('boolean', { defaultValue: false }),
        status: attr('string', { defaultValue: 'draft' }),
        language: attr('string', { defaultValue: 'en_US' }),
        meta_title: attr('string'),
        meta_description: attr('string'),
        author: belongsTo('user', { async: true }),
        author_id: attr('number'),
        updated_at: attr('moment-date'),
        updated_by: attr(),
        published_at: attr('moment-date'),
        published_by: belongsTo('user', { async: true }),
        created_at: attr('moment-date'),
        created_by: attr(),
        tags: hasMany('tag', {
            embedded: 'always',
            async: false
        }),
        url: attr('string'),

        config: inject.service(),
        ghostPaths: inject.service('ghost-paths'),

        absoluteUrl: computed('url', 'ghostPaths.url', 'config.blogUrl', function () {
            var blogUrl = this.get('config.blogUrl');
            var postUrl = this.get('url');
            return this.get('ghostPaths.url').join(blogUrl, postUrl);
        }),

        previewUrl: computed('uuid', 'ghostPaths.url', 'config.blogUrl', 'config.routeKeywords.preview', function () {
            var blogUrl = this.get('config.blogUrl');
            var uuid = this.get('uuid');
            var previewKeyword = this.get('config.routeKeywords.preview');
            // New posts don't have a preview
            if (!uuid) {
                return '';
            }
            return this.get('ghostPaths.url').join(blogUrl, previewKeyword, uuid);
        }),

        scratch: null,
        titleScratch: null,

        // Computed post properties

        isPublished: equal('status', 'published'),
        isDraft: equal('status', 'draft'),

        // remove client-generated tags, which have `id: null`.
        // Ember Data won't recognize/update them automatically
        // when returned from the server with ids.
        // https://github.com/emberjs/data/issues/1829
        updateTags: function updateTags() {
            var tags = this.get('tags');
            var oldTags = tags.filterBy('id', null);

            tags.removeObjects(oldTags);
            oldTags.invoke('deleteRecord');
        },

        isAuthoredByUser: function isAuthoredByUser(user) {
            return parseInt(user.get('id'), 10) === parseInt(this.get('author_id'), 10);
        }

    });
});
/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
define('ghost/models/role', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
    var computed = _ember['default'].computed;
    var Model = _emberData['default'].Model;
    var attr = _emberData['default'].attr;
    exports['default'] = Model.extend({
        uuid: attr('string'),
        name: attr('string'),
        description: attr('string'),
        created_at: attr('moment-date'),
        updated_at: attr('moment-date'),
        created_by: attr(),
        updated_by: attr(),

        lowerCaseName: computed('name', function () {
            return this.get('name').toLocaleLowerCase();
        })
    });
});
/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
define('ghost/models/setting', ['exports', 'ember-data', 'ghost/mixins/validation-engine'], function (exports, _emberData, _ghostMixinsValidationEngine) {
    var Model = _emberData['default'].Model;
    var attr = _emberData['default'].attr;
    exports['default'] = Model.extend(_ghostMixinsValidationEngine['default'], {
        validationType: 'setting',

        title: attr('string'),
        description: attr('string'),
        logo: attr('string'),
        cover: attr('string'),
        defaultLang: attr('string'),
        postsPerPage: attr('number'),
        forceI18n: attr('boolean'),
        permalinks: attr('string'),
        activeTheme: attr('string'),
        availableThemes: attr(),
        ghost_head: attr('string'),
        ghost_foot: attr('string'),
        labs: attr('string'),
        navigation: attr('string'),
        isPrivate: attr('boolean'),
        password: attr('string')
    });
});
/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
define('ghost/models/slug-generator', ['exports', 'ember', 'ic-ajax'], function (exports, _ember, _icAjax) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    var RSVP = _ember['default'].RSVP;
    var inject = _ember['default'].inject;
    exports['default'] = _ember['default'].Object.extend({
        slugType: null,
        value: null,

        ghostPaths: inject.service('ghost-paths'),

        toString: function toString() {
            return this.get('value');
        },

        generateSlug: function generateSlug(textToSlugify) {
            var _this = this;

            var url = undefined;

            if (!textToSlugify) {
                return RSVP.resolve('');
            }

            url = this.get('ghostPaths.url').api('slugs', this.get('slugType'), encodeURIComponent(textToSlugify));

            return (0, _icAjax.request)(url, {
                type: 'GET'
            }).then(function (response) {
                var _response$slugs = _slicedToArray(response.slugs, 1);

                var firstSlug = _response$slugs[0];
                var slug = firstSlug.slug;

                _this.set('value', slug);

                return slug;
            });
        }
    });
});
define('ghost/models/tag', ['exports', 'ember-data', 'ghost/mixins/validation-engine'], function (exports, _emberData, _ghostMixinsValidationEngine) {
    var Model = _emberData['default'].Model;
    var attr = _emberData['default'].attr;
    exports['default'] = Model.extend(_ghostMixinsValidationEngine['default'], {
        validationType: 'tag',

        uuid: attr('string'),
        name: attr('string'),
        slug: attr('string'),
        description: attr('string'),
        parent: attr(),
        meta_title: attr('string'),
        meta_description: attr('string'),
        image: attr('string'),
        hidden: attr('boolean'),
        created_at: attr('moment-date'),
        updated_at: attr('moment-date'),
        created_by: attr(),
        updated_by: attr(),
        count: attr('raw')
    });
});
/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
define('ghost/models/user', ['exports', 'ember', 'ember-data', 'ic-ajax', 'ghost/mixins/validation-engine'], function (exports, _ember, _emberData, _icAjax, _ghostMixinsValidationEngine) {
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    var equal = computed.equal;
    var empty = computed.empty;
    var Model = _emberData['default'].Model;
    var attr = _emberData['default'].attr;
    var hasMany = _emberData['default'].hasMany;
    exports['default'] = Model.extend(_ghostMixinsValidationEngine['default'], {
        validationType: 'user',

        uuid: attr('string'),
        name: attr('string'),
        slug: attr('string'),
        email: attr('string'),
        image: attr('string'),
        cover: attr('string'),
        bio: attr('string'),
        website: attr('string'),
        location: attr('string'),
        accessibility: attr('string'),
        status: attr('string'),
        language: attr('string', { defaultValue: 'en_US' }),
        meta_title: attr('string'),
        meta_description: attr('string'),
        last_login: attr('moment-date'),
        created_at: attr('moment-date'),
        created_by: attr('number'),
        updated_at: attr('moment-date'),
        updated_by: attr('number'),
        roles: hasMany('role', {
            embedded: 'always',
            async: false
        }),
        count: _emberData['default'].attr('raw'),

        ghostPaths: inject.service('ghost-paths'),

        // TODO: Once client-side permissions are in place,
        // remove the hard role check.
        isAuthor: equal('role.name', 'Author'),
        isEditor: equal('role.name', 'Editor'),
        isAdmin: equal('role.name', 'Administrator'),
        isOwner: equal('role.name', 'Owner'),

        isPasswordValid: empty('passwordValidationErrors.[]'),

        active: computed('status', function () {
            return ['active', 'warn-1', 'warn-2', 'warn-3', 'warn-4', 'locked'].indexOf(this.get('status')) > -1;
        }),

        invited: computed('status', function () {
            return ['invited', 'invited-pending'].indexOf(this.get('status')) > -1;
        }),

        pending: equal('status', 'invited-pending').property('status'),

        passwordValidationErrors: computed('password', 'newPassword', 'ne2Password', function () {
            var validationErrors = [];

            if (!validator.equals(this.get('newPassword'), this.get('ne2Password'))) {
                validationErrors.push({ message: 'Your new passwords do not match' });
            }

            if (!validator.isLength(this.get('newPassword'), 8)) {
                validationErrors.push({ message: 'Your password is not long enough. It must be at least 8 characters long.' });
            }

            return validationErrors;
        }),

        role: computed('roles', {
            get: function get() {
                return this.get('roles.firstObject');
            },
            set: function set(key, value) {
                // Only one role per user, so remove any old data.
                this.get('roles').clear();
                this.get('roles').pushObject(value);

                return value;
            }
        }),

        saveNewPassword: function saveNewPassword() {
            var url = this.get('ghostPaths.url').api('users', 'password');

            return (0, _icAjax.request)(url, {
                type: 'PUT',
                data: {
                    password: [{
                        user_id: this.get('id'),
                        oldPassword: this.get('password'),
                        newPassword: this.get('newPassword'),
                        ne2Password: this.get('ne2Password')
                    }]
                }
            });
        },

        resendInvite: function resendInvite() {
            var fullUserData = this.toJSON();
            var userData = {
                email: fullUserData.email,
                roles: fullUserData.roles
            };

            return (0, _icAjax.request)(this.get('ghostPaths.url').api('users'), {
                type: 'POST',
                data: JSON.stringify({ users: [userData] }),
                contentType: 'application/json'
            });
        }
    });
});
/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
define('ghost/router', ['exports', 'ember', 'ghost/utils/ghost-paths', 'ghost/utils/document-title', 'ghost/config/environment'], function (exports, _ember, _ghostUtilsGhostPaths, _ghostUtilsDocumentTitle, _ghostConfigEnvironment) {
    var inject = _ember['default'].inject;
    var on = _ember['default'].on;

    var Router = _ember['default'].Router.extend({
        location: _ghostConfigEnvironment['default'].locationType, // use HTML5 History API instead of hash-tag based URLs
        rootURL: (0, _ghostUtilsGhostPaths['default'])().adminRoot, // admin interface lives under sub-directory /ghost

        notifications: inject.service(),

        displayDelayedNotifications: on('didTransition', function () {
            this.get('notifications').displayDelayed();
        })
    });

    (0, _ghostUtilsDocumentTitle['default'])();

    Router.map(function () {
        this.route('setup', function () {
            this.route('one');
            this.route('two');
            this.route('three');
        });

        this.route('signin');
        this.route('signout');
        this.route('signup', { path: '/signup/:token' });
        this.route('reset', { path: '/reset/:token' });
        this.route('about', { path: '/about' });

        this.route('posts', { path: '/' }, function () {
            this.route('post', { path: ':post_id' });
        });

        this.route('editor', function () {
            this.route('new', { path: '' });
            this.route('edit', { path: ':post_id' });
        });

        this.route('team', { path: '/team' }, function () {
            this.route('user', { path: ':user_slug' });
        });

        this.route('settings.general', { path: '/settings/general' });
        this.route('settings.tags', { path: '/settings/tags' }, function () {
            this.route('tag', { path: ':tag_slug' });
            this.route('new');
        });
        this.route('settings.labs', { path: '/settings/labs' });
        this.route('settings.code-injection', { path: '/settings/code-injection' });
        this.route('settings.navigation', { path: '/settings/navigation' });

        this.route('error404', { path: '/*path' });
    });

    exports['default'] = Router;
});
define('ghost/routes/about', ['exports', 'ember', 'ic-ajax', 'ghost/routes/authenticated', 'ghost/mixins/style-body'], function (exports, _ember, _icAjax, _ghostRoutesAuthenticated, _ghostMixinsStyleBody) {
    var inject = _ember['default'].inject;
    exports['default'] = _ghostRoutesAuthenticated['default'].extend(_ghostMixinsStyleBody['default'], {
        titleToken: 'About',

        classNames: ['view-about'],

        ghostPaths: inject.service('ghost-paths'),

        cachedConfig: false,

        model: function model() {
            var _this = this;

            var cachedConfig = this.get('cachedConfig');

            if (cachedConfig) {
                return cachedConfig;
            }

            return (0, _icAjax.request)(this.get('ghostPaths.url').api('configuration')).then(function (configurationResponse) {
                var configKeyValues = configurationResponse.configuration;

                cachedConfig = {};
                configKeyValues.forEach(function (configKeyValue) {
                    cachedConfig[configKeyValue.key] = configKeyValue.value;
                });
                _this.set('cachedConfig', cachedConfig);

                return cachedConfig;
            });
        }
    });
});
define('ghost/routes/application', ['exports', 'ember', 'ember-simple-auth/configuration', 'ember-simple-auth/mixins/application-route-mixin', 'ghost/mixins/shortcuts-route', 'ghost/utils/ctrl-or-cmd', 'ghost/utils/window-proxy'], function (exports, _ember, _emberSimpleAuthConfiguration, _emberSimpleAuthMixinsApplicationRouteMixin, _ghostMixinsShortcutsRoute, _ghostUtilsCtrlOrCmd, _ghostUtilsWindowProxy) {
    var Route = _ember['default'].Route;
    var inject = _ember['default'].inject;

    function K() {
        return this;
    }

    var shortcuts = {};

    shortcuts.esc = { action: 'closeMenus', scope: 'all' };
    shortcuts.enter = { action: 'confirmModal', scope: 'modal' };
    shortcuts[_ghostUtilsCtrlOrCmd['default'] + '+s'] = { action: 'save', scope: 'all' };

    exports['default'] = Route.extend(_emberSimpleAuthMixinsApplicationRouteMixin['default'], _ghostMixinsShortcutsRoute['default'], {
        shortcuts: shortcuts,

        config: inject.service(),
        dropdown: inject.service(),
        notifications: inject.service(),

        afterModel: function afterModel(model, transition) {
            if (this.get('session.isAuthenticated')) {
                transition.send('loadServerNotifications');
            }
        },

        title: function title(tokens) {
            return tokens.join(' - ') + ' - ' + this.get('config.blogTitle');
        },

        sessionAuthenticated: function sessionAuthenticated() {
            var _this = this;

            var appController = this.controllerFor('application');

            if (appController && appController.get('skipAuthSuccessHandler')) {
                return;
            }

            this._super.apply(this, arguments);
            this.get('session.user').then(function (user) {
                _this.send('signedIn', user);
            });
        },

        sessionInvalidated: function sessionInvalidated() {
            this.send('authorizationFailed');
        },

        actions: {
            openMobileMenu: function openMobileMenu() {
                this.controller.set('showMobileMenu', true);
            },

            openSettingsMenu: function openSettingsMenu() {
                this.controller.set('showSettingsMenu', true);
            },

            closeMenus: function closeMenus() {
                this.get('dropdown').closeDropdowns();
                this.send('closeModal');
                this.controller.setProperties({
                    showSettingsMenu: false,
                    showMobileMenu: false
                });
            },

            didTransition: function didTransition() {
                this.send('closeMenus');
            },

            signedIn: function signedIn() {
                this.get('notifications').clearAll();
                this.send('loadServerNotifications', true);
            },

            invalidateSession: function invalidateSession() {
                var _this2 = this;

                this.get('session').invalidate()['catch'](function (error) {
                    _this2.get('notifications').showAlert(error.message, { type: 'error', key: 'session.invalidate.failed' });
                });
            },

            authorizationFailed: function authorizationFailed() {
                _ghostUtilsWindowProxy['default'].replaceLocation(_emberSimpleAuthConfiguration['default'].baseURL);
            },

            openModal: function openModal(modalName, model, type) {
                this.get('dropdown').closeDropdowns();
                key.setScope('modal');
                modalName = 'modals/' + modalName;
                this.set('modalName', modalName);

                // We don't always require a modal to have a controller
                // so we're skipping asserting if one exists
                if (this.controllerFor(modalName, true)) {
                    this.controllerFor(modalName).set('model', model);

                    if (type) {
                        this.controllerFor(modalName).set('imageType', type);
                        this.controllerFor(modalName).set('src', model.get(type));
                    }
                }

                return this.render(modalName, {
                    into: 'application',
                    outlet: 'modal'
                });
            },

            confirmModal: function confirmModal() {
                var modalName = this.get('modalName');

                this.send('closeModal');

                if (this.controllerFor(modalName, true)) {
                    this.controllerFor(modalName).send('confirmAccept');
                }
            },

            closeModal: function closeModal() {
                this.disconnectOutlet({
                    outlet: 'modal',
                    parentView: 'application'
                });

                key.setScope('default');
            },

            loadServerNotifications: function loadServerNotifications(isDelayed) {
                var _this3 = this;

                if (this.get('session.isAuthenticated')) {
                    this.get('session.user').then(function (user) {
                        if (!user.get('isAuthor') && !user.get('isEditor')) {
                            _this3.store.findAll('notification', { reload: true }).then(function (serverNotifications) {
                                serverNotifications.forEach(function (notification) {
                                    _this3.get('notifications').handleNotification(notification, isDelayed);
                                });
                            });
                        }
                    });
                }
            },

            // noop default for unhandled save (used from shortcuts)
            save: K
        }
    });
});
/* global key */
define('ghost/routes/authenticated', ['exports', 'ember', 'ember-simple-auth/mixins/authenticated-route-mixin'], function (exports, _ember, _emberSimpleAuthMixinsAuthenticatedRouteMixin) {
  var Route = _ember['default'].Route;
  exports['default'] = Route.extend(_emberSimpleAuthMixinsAuthenticatedRouteMixin['default']);
});
define('ghost/routes/editor/edit', ['exports', 'ghost/routes/authenticated', 'ghost/mixins/editor-base-route', 'ghost/mixins/404-handler', 'ghost/utils/isNumber', 'ghost/utils/isFinite'], function (exports, _ghostRoutesAuthenticated, _ghostMixinsEditorBaseRoute, _ghostMixins404Handler, _ghostUtilsIsNumber, _ghostUtilsIsFinite) {
    exports['default'] = _ghostRoutesAuthenticated['default'].extend(_ghostMixinsEditorBaseRoute['default'], _ghostMixins404Handler['default'], {
        titleToken: 'Editor',

        beforeModel: function beforeModel(transition) {
            this.set('_transitionedFromNew', transition.data.fromNew);

            this._super.apply(this, arguments);
        },

        model: function model(params) {
            var _this = this;

            var postId = undefined,
                query = undefined;

            postId = Number(params.post_id);

            if (!(0, _ghostUtilsIsNumber['default'])(postId) || !(0, _ghostUtilsIsFinite['default'])(postId) || postId % 1 !== 0 || postId <= 0) {
                return this.transitionTo('error404', 'editor/' + params.post_id);
            }

            query = {
                id: postId,
                status: 'all',
                staticPages: 'all'
            };

            return this.store.query('post', query).then(function (records) {
                var post = records.get('firstObject');

                if (post) {
                    return post;
                }

                return _this.replaceRoute('posts.index');
            });
        },

        afterModel: function afterModel(post) {
            var _this2 = this;

            this._super.apply(this, arguments);

            return this.get('session.user').then(function (user) {
                if (user.get('isAuthor') && !post.isAuthoredByUser(user)) {
                    return _this2.replaceRoute('posts.index');
                }
            });
        },

        setupController: function setupController(controller) {
            this._super.apply(this, arguments);

            controller.set('shouldFocusEditor', this.get('_transitionedFromNew'));
        },

        actions: {
            authorizationFailed: function authorizationFailed() {
                this.send('openModal', 'signin');
            }
        }
    });
});
/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
define('ghost/routes/editor/index', ['exports', 'ember'], function (exports, _ember) {
    var Route = _ember['default'].Route;
    exports['default'] = Route.extend({
        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            this.transitionTo('editor.new');
        }
    });
});
define('ghost/routes/editor/new', ['exports', 'ghost/routes/authenticated', 'ghost/mixins/editor-base-route'], function (exports, _ghostRoutesAuthenticated, _ghostMixinsEditorBaseRoute) {
    exports['default'] = _ghostRoutesAuthenticated['default'].extend(_ghostMixinsEditorBaseRoute['default'], {
        titleToken: 'Editor',

        model: function model() {
            var _this = this;

            return this.get('session.user').then(function (user) {
                return _this.store.createRecord('post', {
                    author: user
                });
            });
        },

        renderTemplate: function renderTemplate(controller, model) {
            this.render('editor/edit', {
                controller: controller,
                model: model
            });

            this.render('post-settings-menu', {
                model: model,
                into: 'application',
                outlet: 'settings-menu'
            });
        },

        setupController: function setupController() {
            var psm = this.controllerFor('post-settings-menu');

            // make sure there are no titleObserver functions hanging around
            // from previous posts
            psm.removeObserver('titleScratch', psm, 'titleObserver');

            // Ensure that the PSM Image Uploader and Publish Date selector resets
            psm.send('resetUploader');
            psm.send('resetPubDate');

            this._super.apply(this, arguments);
        },

        actions: {
            willTransition: function willTransition(transition) {
                // decorate the transition object so the editor.edit route
                // knows this was the previous active route
                transition.data.fromNew = true;

                this._super.apply(this, arguments);
            }
        }
    });
});
define('ghost/routes/error404', ['exports', 'ember'], function (exports, _ember) {
    var Route = _ember['default'].Route;
    exports['default'] = Route.extend({
        controllerName: 'error',
        templateName: 'error',
        titleToken: 'Error',

        model: function model() {
            return {
                status: 404
            };
        }
    });
});
define('ghost/routes/mobile-index-route', ['exports', 'ember'], function (exports, _ember) {
    var Route = _ember['default'].Route;
    var addObserver = _ember['default'].addObserver;
    var inject = _ember['default'].inject;
    var removeObserver = _ember['default'].removeObserver;

    // Routes that extend MobileIndexRoute need to implement
    // desktopTransition, a function which is called when
    // the user resizes to desktop levels.
    exports['default'] = Route.extend({
        desktopTransition: _ember['default'].K,
        _callDesktopTransition: null,

        mediaQueries: inject.service(),

        activate: function activate() {
            var _this = this;

            this._super.apply(this, arguments);
            this._callDesktopTransition = function () {
                if (!_this.get('mediaQueries.isMobile')) {
                    _this.desktopTransition();
                }
            };
            addObserver(this, 'mediaQueries.isMobile', this._callDesktopTransition);
        },

        deactivate: function deactivate() {
            this._super.apply(this, arguments);
            if (this._callDesktopTransition) {
                removeObserver(this, 'mediaQueries.isMobile', this._callDesktopTransition);
                this._callDesktopTransition = null;
            }
        }
    });
});
define('ghost/routes/posts/index', ['exports', 'ember', 'ember-simple-auth/mixins/authenticated-route-mixin', 'ghost/routes/mobile-index-route'], function (exports, _ember, _emberSimpleAuthMixinsAuthenticatedRouteMixin, _ghostRoutesMobileIndexRoute) {
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    var reads = computed.reads;
    exports['default'] = _ghostRoutesMobileIndexRoute['default'].extend(_emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], {
        noPosts: false,

        mediaQueries: inject.service(),
        isMobile: reads('mediaQueries.isMobile'),

        // Transition to a specific post if we're not on mobile
        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            if (!this.get('isMobile')) {
                return this.goToPost();
            }
        },

        setupController: function setupController(controller) {
            controller.set('noPosts', this.get('noPosts'));
            this._super.apply(this, arguments);
        },

        goToPost: function goToPost() {
            var _this = this;

            // the store has been populated by PostsRoute
            var posts = this.store.peekAll('post');
            var post = undefined;

            return this.get('session.user').then(function (user) {
                post = posts.find(function (post) {
                    // Authors can only see posts they've written
                    if (user.get('isAuthor')) {
                        return post.isAuthoredByUser(user);
                    }

                    return true;
                });

                if (post) {
                    return _this.transitionTo('posts.post', post);
                }

                _this.set('noPosts', true);
            });
        },

        // Mobile posts route callback
        desktopTransition: function desktopTransition() {
            this.goToPost();
        }
    });
});
define('ghost/routes/posts/post', ['exports', 'ghost/routes/authenticated', 'ghost/mixins/shortcuts-route', 'ghost/utils/isNumber', 'ghost/utils/isFinite'], function (exports, _ghostRoutesAuthenticated, _ghostMixinsShortcutsRoute, _ghostUtilsIsNumber, _ghostUtilsIsFinite) {
    exports['default'] = _ghostRoutesAuthenticated['default'].extend(_ghostMixinsShortcutsRoute['default'], {
        model: function model(params) {
            var _this = this;

            var post = undefined,
                postId = undefined,
                query = undefined;

            /* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
            postId = Number(params.post_id);

            if (!(0, _ghostUtilsIsNumber['default'])(postId) || !(0, _ghostUtilsIsFinite['default'])(postId) || postId % 1 !== 0 || postId <= 0) {
                return this.transitionTo('error404', params.post_id);
            }
            /* jscs:enable requireCamelCaseOrUpperCaseIdentifiers */

            post = this.store.peekRecord('post', postId);
            if (post) {
                return post;
            }

            query = {
                id: postId,
                status: 'all',
                staticPages: 'all'
            };

            return this.store.queryRecord('post', query).then(function (post) {
                if (post) {
                    return post;
                }

                return _this.replaceRoute('posts.index');
            });
        },

        afterModel: function afterModel(post) {
            var _this2 = this;

            return this.get('session.user').then(function (user) {
                if (user.get('isAuthor') && !post.isAuthoredByUser(user)) {
                    return _this2.replaceRoute('posts.index');
                }
            });
        },

        setupController: function setupController(controller, model) {
            this._super(controller, model);

            this.controllerFor('posts').set('currentPost', model);
        },

        shortcuts: {
            'enter, o': 'openEditor',
            'command+backspace, ctrl+backspace': 'deletePost'
        },

        actions: {
            openEditor: function openEditor(post) {
                post = post || this.get('controller.model');

                if (!post) {
                    return;
                }

                this.transitionTo('editor.edit', post.get('id'));
            },

            deletePost: function deletePost() {
                this.send('openModal', 'delete-post', this.get('controller.model'));
            }
        }
    });
});
define('ghost/routes/posts', ['exports', 'ember', 'ghost/routes/authenticated', 'ghost/mixins/shortcuts-route', 'ghost/mixins/pagination-route'], function (exports, _ember, _ghostRoutesAuthenticated, _ghostMixinsShortcutsRoute, _ghostMixinsPaginationRoute) {
    exports['default'] = _ghostRoutesAuthenticated['default'].extend(_ghostMixinsShortcutsRoute['default'], _ghostMixinsPaginationRoute['default'], {
        titleToken: 'Content',

        paginationModel: 'post',
        paginationSettings: {
            status: 'all',
            staticPages: 'all'
        },

        model: function model() {
            var _this = this;

            var paginationSettings = this.get('paginationSettings');

            return this.get('session.user').then(function (user) {
                if (user.get('isAuthor')) {
                    paginationSettings.filter = paginationSettings.filter ? paginationSettings.filter + '+author:' + user.get('slug') : 'author:' + user.get('slug');
                }

                return _this.loadFirstPage().then(function () {
                    // using `.filter` allows the template to auto-update when new models are pulled in from the server.
                    // we just need to 'return true' to allow all models by default.
                    return _this.store.filter('post', function (post) {
                        if (user.get('isAuthor')) {
                            return post.isAuthoredByUser(user);
                        }

                        return true;
                    });
                });
            });
        },

        stepThroughPosts: function stepThroughPosts(step) {
            var currentPost = this.get('controller.currentPost');
            var posts = this.get('controller.sortedPosts');
            var length = posts.get('length');
            var newPosition = posts.indexOf(currentPost) + step;

            // if we are on the first or last item
            // just do nothing (desired behavior is to not
            // loop around)
            if (newPosition >= length) {
                return;
            } else if (newPosition < 0) {
                return;
            }

            this.transitionTo('posts.post', posts.objectAt(newPosition));
        },

        scrollContent: function scrollContent(amount) {
            var content = _ember['default'].$('.js-content-preview');
            var scrolled = content.scrollTop();

            content.scrollTop(scrolled + 50 * amount);
        },

        shortcuts: {
            'up, k': 'moveUp',
            'down, j': 'moveDown',
            left: 'focusList',
            right: 'focusContent',
            c: 'newPost'
        },

        actions: {
            focusList: function focusList() {
                this.controller.set('keyboardFocus', 'postList');
            },

            focusContent: function focusContent() {
                this.controller.set('keyboardFocus', 'postContent');
            },

            newPost: function newPost() {
                this.transitionTo('editor.new');
            },

            moveUp: function moveUp() {
                if (this.controller.get('postContentFocused')) {
                    this.scrollContent(-1);
                } else {
                    this.stepThroughPosts(-1);
                }
            },

            moveDown: function moveDown() {
                if (this.controller.get('postContentFocused')) {
                    this.scrollContent(1);
                } else {
                    this.stepThroughPosts(1);
                }
            }
        }
    });
});
define('ghost/routes/reset', ['exports', 'ember', 'ember-simple-auth/configuration', 'ghost/mixins/style-body'], function (exports, _ember, _emberSimpleAuthConfiguration, _ghostMixinsStyleBody) {
    var Route = _ember['default'].Route;
    var inject = _ember['default'].inject;
    exports['default'] = Route.extend(_ghostMixinsStyleBody['default'], {
        classNames: ['ghost-reset'],

        notifications: inject.service(),
        session: inject.service(),

        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            if (this.get('session.isAuthenticated')) {
                this.get('notifications').showAlert('You can\'t reset your password while you\'re signed in.', { type: 'warn', delayed: true, key: 'password.reset.signed-in' });
                this.transitionTo(_emberSimpleAuthConfiguration['default'].routeAfterAuthentication);
            }
        },

        setupController: function setupController(controller, params) {
            controller.token = params.token;
        },

        // Clear out any sensitive information
        deactivate: function deactivate() {
            this._super.apply(this, arguments);
            this.controller.clearData();
        }
    });
});
define('ghost/routes/settings/code-injection', ['exports', 'ghost/routes/authenticated', 'ghost/mixins/current-user-settings', 'ghost/mixins/style-body'], function (exports, _ghostRoutesAuthenticated, _ghostMixinsCurrentUserSettings, _ghostMixinsStyleBody) {
    exports['default'] = _ghostRoutesAuthenticated['default'].extend(_ghostMixinsStyleBody['default'], _ghostMixinsCurrentUserSettings['default'], {
        titleToken: 'Settings - Code Injection',
        classNames: ['settings-view-code'],

        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());
        },

        model: function model() {
            return this.store.query('setting', { type: 'blog,theme' }).then(function (records) {
                return records.get('firstObject');
            });
        },

        actions: {
            save: function save() {
                this.get('controller').send('save');
            }
        }
    });
});
define('ghost/routes/settings/general', ['exports', 'ghost/routes/authenticated', 'ghost/mixins/current-user-settings', 'ghost/mixins/style-body'], function (exports, _ghostRoutesAuthenticated, _ghostMixinsCurrentUserSettings, _ghostMixinsStyleBody) {
    exports['default'] = _ghostRoutesAuthenticated['default'].extend(_ghostMixinsStyleBody['default'], _ghostMixinsCurrentUserSettings['default'], {
        titleToken: 'Settings - General',

        classNames: ['settings-view-general'],

        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());
        },

        model: function model() {
            return this.store.query('setting', { type: 'blog,theme,private' }).then(function (records) {
                return records.get('firstObject');
            });
        },

        actions: {
            save: function save() {
                this.get('controller').send('save');
            }
        }
    });
});
define('ghost/routes/settings/labs', ['exports', 'ghost/routes/authenticated', 'ghost/mixins/style-body', 'ghost/mixins/current-user-settings'], function (exports, _ghostRoutesAuthenticated, _ghostMixinsStyleBody, _ghostMixinsCurrentUserSettings) {
    exports['default'] = _ghostRoutesAuthenticated['default'].extend(_ghostMixinsStyleBody['default'], _ghostMixinsCurrentUserSettings['default'], {
        titleToken: 'Settings - Labs',

        classNames: ['settings'],

        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());
        },

        model: function model() {
            return this.store.query('setting', { type: 'blog,theme' }).then(function (records) {
                return records.get('firstObject');
            });
        }
    });
});
define('ghost/routes/settings/navigation', ['exports', 'ember', 'ghost/routes/authenticated', 'ghost/mixins/current-user-settings', 'ghost/mixins/style-body'], function (exports, _ember, _ghostRoutesAuthenticated, _ghostMixinsCurrentUserSettings, _ghostMixinsStyleBody) {
    var $ = _ember['default'].$;
    exports['default'] = _ghostRoutesAuthenticated['default'].extend(_ghostMixinsStyleBody['default'], _ghostMixinsCurrentUserSettings['default'], {
        titleToken: 'Settings - Navigation',

        classNames: ['settings-view-navigation'],

        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            return this.get('session.user').then(this.transitionAuthor());
        },

        model: function model() {
            return this.store.query('setting', { type: 'blog,theme' }).then(function (records) {
                return records.get('firstObject');
            });
        },

        actions: {
            save: function save() {
                // since shortcuts are run on the route, we have to signal to the components
                // on the page that we're about to save.
                $('.page-actions .btn-blue').focus();

                this.get('controller').send('save');
            },

            willTransition: function willTransition() {
                // reset the model so that our CPs re-calc and unsaved changes aren't
                // persisted across transitions
                this.set('controller.model', null);
                return this._super.apply(this, arguments);
            }
        }
    });
});
define('ghost/routes/settings/tags/index', ['exports', 'ember', 'ghost/routes/authenticated'], function (exports, _ember, _ghostRoutesAuthenticated) {
    var inject = _ember['default'].inject;
    exports['default'] = _ghostRoutesAuthenticated['default'].extend({

        mediaQueries: inject.service(),

        beforeModel: function beforeModel() {
            var firstTag = this.modelFor('settings.tags').get('firstObject');

            this._super.apply(this, arguments);

            if (firstTag && !this.get('mediaQueries.maxWidth600')) {
                this.transitionTo('settings.tags.tag', firstTag);
            }
        }
    });
});
define('ghost/routes/settings/tags/new', ['exports', 'ghost/routes/authenticated'], function (exports, _ghostRoutesAuthenticated) {
    exports['default'] = _ghostRoutesAuthenticated['default'].extend({

        controllerName: 'settings.tags.tag',

        model: function model() {
            return this.store.createRecord('tag');
        },

        renderTemplate: function renderTemplate() {
            this.render('settings.tags.tag');
        },

        // reset the model so that mobile screens react to an empty selectedTag
        deactivate: function deactivate() {
            this._super.apply(this, arguments);
            this.set('controller.model', null);
        }

    });
});
define('ghost/routes/settings/tags/tag', ['exports', 'ghost/routes/authenticated', 'ghost/mixins/404-handler'], function (exports, _ghostRoutesAuthenticated, _ghostMixins404Handler) {
    exports['default'] = _ghostRoutesAuthenticated['default'].extend(_ghostMixins404Handler['default'], {

        model: function model(params) {
            return this.store.queryRecord('tag', { slug: params.tag_slug });
        },

        serialize: function serialize(model) {
            return { tag_slug: model.get('slug') };
        },

        // reset the model so that mobile screens react to an empty selectedTag
        deactivate: function deactivate() {
            this._super.apply(this, arguments);
            this.set('controller.model', null);
        }
    });
});
/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
define('ghost/routes/settings/tags', ['exports', 'ember', 'ghost/routes/authenticated', 'ghost/mixins/current-user-settings', 'ghost/mixins/shortcuts-route', 'ghost/mixins/pagination-route'], function (exports, _ember, _ghostRoutesAuthenticated, _ghostMixinsCurrentUserSettings, _ghostMixinsShortcutsRoute, _ghostMixinsPaginationRoute) {
    exports['default'] = _ghostRoutesAuthenticated['default'].extend(_ghostMixinsCurrentUserSettings['default'], _ghostMixinsPaginationRoute['default'], _ghostMixinsShortcutsRoute['default'], {
        titleToken: 'Settings - Tags',

        paginationModel: 'tag',
        paginationSettings: {
            include: 'count.posts',
            limit: 15
        },

        shortcuts: {
            'up, k': 'moveUp',
            'down, j': 'moveDown',
            left: 'focusList',
            right: 'focusContent',
            c: 'newTag'
        },

        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);

            return this.get('session.user').then(this.transitionAuthor());
        },

        model: function model() {
            var _this = this;

            this.store.unloadAll('tag');

            return this.loadFirstPage().then(function () {
                return _this.store.filter('tag', function (tag) {
                    return !tag.get('isNew');
                });
            });
        },

        deactivate: function deactivate() {
            this._super.apply(this, arguments);
            this.send('resetShortcutsScope');
            this.send('resetPagination');
        },

        stepThroughTags: function stepThroughTags(step) {
            var currentTag = this.modelFor('settings.tags.tag');
            var tags = this.get('controller.tags');
            var length = tags.get('length');

            if (currentTag && length) {
                var newPosition = tags.indexOf(currentTag) + step;

                if (newPosition >= length) {
                    return;
                } else if (newPosition < 0) {
                    return;
                }

                this.transitionTo('settings.tags.tag', tags.objectAt(newPosition));
            }
        },

        scrollContent: function scrollContent(amount) {
            var content = _ember['default'].$('.tag-settings-pane');
            var scrolled = content.scrollTop();

            content.scrollTop(scrolled + 50 * amount);
        },

        actions: {
            moveUp: function moveUp() {
                if (this.controller.get('tagContentFocused')) {
                    this.scrollContent(-1);
                } else {
                    this.stepThroughTags(-1);
                }
            },

            moveDown: function moveDown() {
                if (this.controller.get('tagContentFocused')) {
                    this.scrollContent(1);
                } else {
                    this.stepThroughTags(1);
                }
            },

            focusList: function focusList() {
                this.set('controller.keyboardFocus', 'tagList');
            },

            focusContent: function focusContent() {
                this.set('controller.keyboardFocus', 'tagContent');
            },

            newTag: function newTag() {
                this.transitionTo('settings.tags.new');
            },

            resetShortcutsScope: function resetShortcutsScope() {
                key.setScope('default');
            }
        }
    });
});
/* global key */
define('ghost/routes/setup/index', ['exports', 'ember'], function (exports, _ember) {
    var Route = _ember['default'].Route;
    exports['default'] = Route.extend({
        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            this.transitionTo('setup.one');
        }
    });
});
define('ghost/routes/setup/one', ['exports', 'ember', 'ic-ajax'], function (exports, _ember, _icAjax) {
    var Route = _ember['default'].Route;
    var inject = _ember['default'].inject;
    var run = _ember['default'].run;

    var DownloadCountPoller = _ember['default'].Object.extend({
        url: null,
        count: '',
        runId: null,

        init: function init() {
            this._super.apply(this, arguments);
            this.downloadCounter();
            this.poll();
        },

        poll: function poll() {
            var interval = _ember['default'].testing ? 20 : 2000;
            var runId = run.later(this, function () {
                this.downloadCounter();
                if (!_ember['default'].testing) {
                    this.poll();
                }
            }, interval);

            this.set('runId', runId);
        },

        downloadCounter: function downloadCounter() {
            var _this = this;

            (0, _icAjax.request)(this.get('url')).then(function (data) {
                var pattern = /(-?\d+)(\d{3})/;
                var count = data.count.toString();

                while (pattern.test(count)) {
                    count = count.replace(pattern, '$1,$2');
                }

                _this.set('count', count);
            })['catch'](function () {
                _this.set('count', '');
            });
        }
    });

    exports['default'] = Route.extend({
        ghostPaths: inject.service('ghost-paths'),

        model: function model() {
            return DownloadCountPoller.create({ url: this.get('ghostPaths.count') });
        },

        resetController: function resetController(controller, isExiting) {
            if (isExiting) {
                run.cancel(controller.get('model.runId'));
                controller.set('model', null);
            }
        }
    });
});
define('ghost/routes/setup/three', ['exports', 'ember'], function (exports, _ember) {
    var Route = _ember['default'].Route;
    exports['default'] = Route.extend({
        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            if (!this.controllerFor('setup.two').get('blogCreated')) {
                this.transitionTo('setup.two');
            }
        }
    });
});
define('ghost/routes/setup', ['exports', 'ember', 'ic-ajax', 'ember-simple-auth/configuration', 'ghost/mixins/style-body'], function (exports, _ember, _icAjax, _emberSimpleAuthConfiguration, _ghostMixinsStyleBody) {
    var Route = _ember['default'].Route;
    var inject = _ember['default'].inject;
    exports['default'] = Route.extend(_ghostMixinsStyleBody['default'], {
        titleToken: 'Setup',

        classNames: ['ghost-setup'],

        ghostPaths: inject.service('ghost-paths'),
        session: inject.service(),

        // use the beforeModel hook to check to see whether or not setup has been
        // previously completed.  If it has, stop the transition into the setup page.
        beforeModel: function beforeModel() {
            var _this = this;

            this._super.apply(this, arguments);

            if (this.get('session.isAuthenticated')) {
                this.transitionTo(_emberSimpleAuthConfiguration['default'].routeIfAlreadyAuthenticated);
                return;
            }

            // If user is not logged in, check the state of the setup process via the API
            return (0, _icAjax.request)(this.get('ghostPaths.url').api('authentication/setup'), {
                type: 'GET'
            }).then(function (result) {
                var setup = result.setup[0].status;

                if (setup) {
                    return _this.transitionTo('signin');
                }
            });
        },

        deactivate: function deactivate() {
            this._super.apply(this, arguments);
            this.controllerFor('setup/two').set('password', '');
        }
    });
});
define('ghost/routes/signin', ['exports', 'ember', 'ghost/mixins/style-body', 'ember-simple-auth/configuration', 'ember-data'], function (exports, _ember, _ghostMixinsStyleBody, _emberSimpleAuthConfiguration, _emberData) {
    var Route = _ember['default'].Route;
    var inject = _ember['default'].inject;
    var Errors = _emberData['default'].Errors;
    exports['default'] = Route.extend(_ghostMixinsStyleBody['default'], {
        titleToken: 'Sign In',

        classNames: ['ghost-login'],

        session: inject.service(),

        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);

            if (this.get('session.isAuthenticated')) {
                this.transitionTo(_emberSimpleAuthConfiguration['default'].routeIfAlreadyAuthenticated);
            }
        },

        model: function model() {
            return _ember['default'].Object.create({
                identification: '',
                password: '',
                errors: Errors.create()
            });
        },

        // the deactivate hook is called after a route has been exited.
        deactivate: function deactivate() {
            var controller = this.controllerFor('signin');

            this._super.apply(this, arguments);

            // clear the properties that hold the credentials when we're no longer on the signin screen
            controller.set('model.identification', '');
            controller.set('model.password', '');
        }
    });
});
define('ghost/routes/signout', ['exports', 'ember', 'ghost/routes/authenticated', 'ghost/mixins/style-body'], function (exports, _ember, _ghostRoutesAuthenticated, _ghostMixinsStyleBody) {
    var canInvoke = _ember['default'].canInvoke;
    var inject = _ember['default'].inject;
    exports['default'] = _ghostRoutesAuthenticated['default'].extend(_ghostMixinsStyleBody['default'], {
        titleToken: 'Sign Out',

        classNames: ['ghost-signout'],

        notifications: inject.service(),

        afterModel: function afterModel(model, transition) {
            this.get('notifications').clearAll();
            if (canInvoke(transition, 'send')) {
                transition.send('invalidateSession');
                transition.abort();
            } else {
                this.send('invalidateSession');
            }
        }
    });
});
define('ghost/routes/signup', ['exports', 'ember', 'ember-data', 'ic-ajax', 'ember-simple-auth/configuration', 'ghost/mixins/style-body'], function (exports, _ember, _emberData, _icAjax, _emberSimpleAuthConfiguration, _ghostMixinsStyleBody) {
    var Route = _ember['default'].Route;
    var RSVP = _ember['default'].RSVP;
    var inject = _ember['default'].inject;
    var Errors = _emberData['default'].Errors;
    exports['default'] = Route.extend(_ghostMixinsStyleBody['default'], {
        classNames: ['ghost-signup'],

        ghostPaths: inject.service('ghost-paths'),
        notifications: inject.service(),
        session: inject.service(),

        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);

            if (this.get('session.isAuthenticated')) {
                this.get('notifications').showAlert('You need to sign out to register as a new user.', { type: 'warn', delayed: true, key: 'signup.create.already-authenticated' });
                this.transitionTo(_emberSimpleAuthConfiguration['default'].routeIfAlreadyAuthenticated);
            }
        },

        model: function model(params) {
            var _this = this;

            var model = _ember['default'].Object.create();
            var re = /^(?:[A-Za-z0-9_\-]{4})*(?:[A-Za-z0-9_\-]{2}|[A-Za-z0-9_\-]{3})?$/;
            var email = undefined,
                tokenText = undefined;

            return new RSVP.Promise(function (resolve) {
                if (!re.test(params.token)) {
                    _this.get('notifications').showAlert('Invalid token.', { type: 'error', delayed: true, key: 'signup.create.invalid-token' });

                    return resolve(_this.transitionTo('signin'));
                }

                tokenText = atob(params.token);
                email = tokenText.split('|')[1];

                model.set('email', email);
                model.set('token', params.token);
                model.set('errors', Errors.create());

                return (0, _icAjax.request)({
                    url: _this.get('ghostPaths.url').api('authentication', 'invitation'),
                    type: 'GET',
                    dataType: 'json',
                    data: {
                        email: email
                    }
                }).then(function (response) {
                    if (response && response.invitation && response.invitation[0].valid === false) {
                        _this.get('notifications').showAlert('The invitation does not exist or is no longer valid.', { type: 'warn', delayed: true, key: 'signup.create.invalid-invitation' });

                        return resolve(_this.transitionTo('signin'));
                    }

                    resolve(model);
                })['catch'](function () {
                    resolve(model);
                });
            });
        },

        deactivate: function deactivate() {
            this._super.apply(this, arguments);

            // clear the properties that hold the sensitive data from the controller
            this.controllerFor('signup').setProperties({ email: '', password: '', token: '' });
        }
    });
});
define('ghost/routes/team/index', ['exports', 'ghost/routes/authenticated', 'ghost/mixins/current-user-settings', 'ghost/mixins/pagination-route', 'ghost/mixins/style-body'], function (exports, _ghostRoutesAuthenticated, _ghostMixinsCurrentUserSettings, _ghostMixinsPaginationRoute, _ghostMixinsStyleBody) {
    exports['default'] = _ghostRoutesAuthenticated['default'].extend(_ghostMixinsStyleBody['default'], _ghostMixinsCurrentUserSettings['default'], _ghostMixinsPaginationRoute['default'], {
        titleToken: 'Team',

        classNames: ['view-team'],

        paginationModel: 'user',
        paginationSettings: {
            status: 'active',
            limit: 20
        },

        model: function model() {
            var _this = this;

            this.loadFirstPage();

            return this.store.query('user', { limit: 'all', status: 'invited' }).then(function () {
                return _this.store.filter('user', function () {
                    return true;
                });
            });
        },

        actions: {
            reload: function reload() {
                this.refresh();
            }
        }
    });
});
define('ghost/routes/team/user', ['exports', 'ghost/routes/authenticated', 'ghost/mixins/current-user-settings', 'ghost/mixins/style-body', 'ghost/mixins/404-handler'], function (exports, _ghostRoutesAuthenticated, _ghostMixinsCurrentUserSettings, _ghostMixinsStyleBody, _ghostMixins404Handler) {
    exports['default'] = _ghostRoutesAuthenticated['default'].extend(_ghostMixinsStyleBody['default'], _ghostMixinsCurrentUserSettings['default'], _ghostMixins404Handler['default'], {
        titleToken: 'Team - User',

        classNames: ['team-view-user'],

        model: function model(params) {
            return this.store.queryRecord('user', { slug: params.user_slug });
        },

        serialize: function serialize(model) {
            return { user_slug: model.get('slug') };
        },

        afterModel: function afterModel(user) {
            var _this = this;

            this._super.apply(this, arguments);

            return this.get('session.user').then(function (currentUser) {
                var isOwnProfile = user.get('id') === currentUser.get('id');
                var isAuthor = currentUser.get('isAuthor');
                var isEditor = currentUser.get('isEditor');

                if (isAuthor && !isOwnProfile) {
                    _this.transitionTo('team.user', currentUser);
                } else if (isEditor && !isOwnProfile && !user.get('isAuthor')) {
                    _this.transitionTo('team');
                }
            });
        },

        deactivate: function deactivate() {
            var model = this.modelFor('team.user');

            // we want to revert any unsaved changes on exit
            if (model && model.get('hasDirtyAttributes')) {
                model.rollbackAttributes();
            }

            model.get('errors').clear();

            this._super.apply(this, arguments);
        },

        actions: {
            didTransition: function didTransition() {
                this.modelFor('team.user').get('errors').clear();
            },

            save: function save() {
                this.get('controller').send('save');
            }
        }
    });
});
/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
define('ghost/serializers/application', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
    var RESTSerializer = _emberData['default'].RESTSerializer;
    exports['default'] = RESTSerializer.extend({
        serializeIntoHash: function serializeIntoHash(hash, type, record, options) {
            // Our API expects an id on the posted object
            options = options || {};
            options.includeId = true;

            // We have a plural root in the API
            var root = _ember['default'].String.pluralize(type.modelName);
            var data = this.serialize(record, options);

            // Don't ever pass uuid's
            delete data.uuid;

            hash[root] = [data];
        }
    });
});
define('ghost/serializers/post', ['exports', 'ember', 'ember-data', 'ghost/serializers/application'], function (exports, _ember, _emberData, _ghostSerializersApplication) {
    var EmbeddedRecordsMixin = _emberData['default'].EmbeddedRecordsMixin;
    exports['default'] = _ghostSerializersApplication['default'].extend(EmbeddedRecordsMixin, {
        // settings for the EmbeddedRecordsMixin.
        attrs: {
            tags: { embedded: 'always' }
        },

        normalize: function normalize(typeClass, hash, prop) {
            // this is to enable us to still access the raw author_id
            // without requiring an extra get request (since it is an
            // async relationship).
            hash.author_id = hash.author;

            return this._super(typeClass, hash, prop);
        },

        normalizeSingleResponse: function normalizeSingleResponse(store, primaryModelClass, payload) {
            var root = this.keyForAttribute(primaryModelClass.modelName);
            var pluralizedRoot = _ember['default'].String.pluralize(primaryModelClass.modelName);

            payload[root] = payload[pluralizedRoot][0];
            delete payload[pluralizedRoot];

            return this._super.apply(this, arguments);
        },

        normalizeArrayResponse: function normalizeArrayResponse() {
            return this._super.apply(this, arguments);
        },

        serializeIntoHash: function serializeIntoHash(hash, type, record, options) {
            options = options || {};
            options.includeId = true;

            // We have a plural root in the API
            var root = _ember['default'].String.pluralize(type.modelName);
            var data = this.serialize(record, options);

            // Properties that exist on the model but we don't want sent in the payload

            delete data.uuid;
            delete data.html;
            // Inserted locally as a convenience.
            delete data.author_id;
            // Read-only virtual property.
            delete data.url;

            hash[root] = [data];
        }
    });
});
/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
define('ghost/serializers/setting', ['exports', 'ember', 'ghost/serializers/application'], function (exports, _ember, _ghostSerializersApplication) {
    exports['default'] = _ghostSerializersApplication['default'].extend({
        serializeIntoHash: function serializeIntoHash(hash, type, record, options) {
            // Settings API does not want ids
            options = options || {};
            options.includeId = false;

            var root = _ember['default'].String.pluralize(type.modelName);
            var data = this.serialize(record, options);
            var payload = [];

            delete data.id;

            Object.keys(data).forEach(function (k) {
                payload.push({ key: k, value: data[k] });
            });

            hash[root] = payload;
        },

        normalizeArrayResponse: function normalizeArrayResponse(store, primaryModelClass, _payload, id, requestType) {
            var payload = { settings: [this._extractObjectFromArrayPayload(_payload)] };
            return this._super(store, primaryModelClass, payload, id, requestType);
        },

        normalizeSingleResponse: function normalizeSingleResponse(store, primaryModelClass, _payload, id, requestType) {
            var payload = { setting: this._extractObjectFromArrayPayload(_payload) };
            return this._super(store, primaryModelClass, payload, id, requestType);
        },

        _extractObjectFromArrayPayload: function _extractObjectFromArrayPayload(_payload) {
            var payload = { id: '0' };

            _payload.settings.forEach(function (setting) {
                payload[setting.key] = setting.value;
            });

            return payload;
        }
    });
});
define('ghost/serializers/tag', ['exports', 'ember', 'ghost/serializers/application'], function (exports, _ember, _ghostSerializersApplication) {
    exports['default'] = _ghostSerializersApplication['default'].extend({
        serializeIntoHash: function serializeIntoHash(hash, type, record, options) {
            options = options || {};
            options.includeId = true;

            var root = _ember['default'].String.pluralize(type.modelName);
            var data = this.serialize(record, options);

            // Properties that exist on the model but we don't want sent in the payload

            delete data.uuid;
            delete data.count;

            hash[root] = [data];
        }
    });
});
/* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
define('ghost/serializers/user', ['exports', 'ember', 'ember-data', 'ghost/serializers/application'], function (exports, _ember, _emberData, _ghostSerializersApplication) {
    var EmbeddedRecordsMixin = _emberData['default'].EmbeddedRecordsMixin;
    exports['default'] = _ghostSerializersApplication['default'].extend(EmbeddedRecordsMixin, {
        attrs: {
            roles: { embedded: 'always' }
        },

        extractSingle: function extractSingle(store, primaryType, payload) {
            var root = this.keyForAttribute(primaryType.modelName);
            var pluralizedRoot = _ember['default'].String.pluralize(primaryType.modelName);

            payload[root] = payload[pluralizedRoot][0];
            delete payload[pluralizedRoot];

            return this._super.apply(this, arguments);
        },

        normalizeSingleResponse: function normalizeSingleResponse(store, primaryModelClass, payload) {
            var root = this.keyForAttribute(primaryModelClass.modelName);
            var pluralizedRoot = _ember['default'].String.pluralize(primaryModelClass.modelName);

            payload[root] = payload[pluralizedRoot][0];
            delete payload[pluralizedRoot];

            return this._super.apply(this, arguments);
        }
    });
});
define('ghost/services/config', ['exports', 'ember'], function (exports, _ember) {
    var Service = _ember['default'].Service;
    var _ProxyMixin = _ember['default']._ProxyMixin;
    var computed = _ember['default'].computed;

    function isNumeric(num) {
        return _ember['default'].$.isNumeric(num);
    }

    function _mapType(val) {
        if (val === '') {
            return null;
        } else if (val === 'true') {
            return true;
        } else if (val === 'false') {
            return false;
        } else if (isNumeric(val)) {
            return +val;
        } else if (val.indexOf('{') === 0) {
            try {
                return JSON.parse(val);
            } catch (e) {
                /*jshint unused:false */
                return val;
            }
        } else {
            return val;
        }
    }

    exports['default'] = Service.extend(_ProxyMixin, {
        content: computed(function () {
            var metaConfigTags = _ember['default'].$('meta[name^="env-"]');
            var config = {};

            metaConfigTags.each(function (i, el) {
                var key = el.name;
                var value = el.content;
                var propertyName = key.substring(4);

                config[propertyName] = _mapType(value);
            });

            return config;
        })
    });
});
define('ghost/services/dropdown', ['exports', 'ember', 'ghost/mixins/body-event-listener'], function (exports, _ember, _ghostMixinsBodyEventListener) {
    var Service = _ember['default'].Service;
    var Evented = _ember['default'].Evented;
    exports['default'] = Service.extend(Evented, _ghostMixinsBodyEventListener['default'], {
        bodyClick: function bodyClick(event) {
            /*jshint unused:false */
            this.closeDropdowns();
        },

        closeDropdowns: function closeDropdowns() {
            this.trigger('close');
        },

        toggleDropdown: function toggleDropdown(dropdownName, dropdownButton) {
            this.trigger('toggle', { target: dropdownName, button: dropdownButton });
        }
    });
});

// This is used by the dropdown initializer (and subsequently popovers) to manage closing & toggling
define('ghost/services/ghost-paths', ['exports', 'ember', 'ghost/utils/ghost-paths'], function (exports, _ember, _ghostUtilsGhostPaths) {
    var Service = _ember['default'].Service;
    var _ProxyMixin = _ember['default']._ProxyMixin;
    exports['default'] = Service.extend(_ProxyMixin, {
        content: (0, _ghostUtilsGhostPaths['default'])()
    });
});
define('ghost/services/media-queries', ['exports', 'ember'], function (exports, _ember) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    var Service = _ember['default'].Service;
    var run = _ember['default'].run;

    var MEDIA_QUERIES = {
        maxWidth600: '(max-width: 600px)',
        isMobile: '(max-width: 800px)',
        maxWidth900: '(max-width: 900px)',
        maxWidth1000: '(max-width: 1000px)'
    };

    exports['default'] = Service.extend({
        init: function init() {
            this._super.apply(this, arguments);
            this._handlers = [];
            this.loadQueries(MEDIA_QUERIES);
        },

        loadQueries: function loadQueries(queries) {
            var _this = this;

            Object.keys(queries).forEach(function (key) {
                _this.loadQuery(key, queries[key]);
            });
        },

        loadQuery: function loadQuery(key, queryString) {
            var _this2 = this;

            var query = window.matchMedia(queryString);

            this.set(key, query.matches);

            var handler = run.bind(this, function () {
                var lastValue = _this2.get(key);
                var newValue = query.matches;
                if (lastValue !== newValue) {
                    _this2.set(key, query.matches);
                }
            });
            query.addListener(handler);
            this._handlers.push([query, handler]);
        },

        willDestroy: function willDestroy() {
            this._handlers.forEach(function (_ref) {
                var _ref2 = _slicedToArray(_ref, 2);

                var query = _ref2[0];
                var handler = _ref2[1];

                query.removeListener(handler);
            });
            this._super.apply(this, arguments);
        }

    });
});
define('ghost/services/notifications', ['exports', 'ember'], function (exports, _ember) {
    var Service = _ember['default'].Service;
    var computed = _ember['default'].computed;
    var get = _ember['default'].get;
    var set = _ember['default'].set;
    var filter = computed.filter;

    var emberA = _ember['default'].A;

    // Notification keys take the form of "noun.verb.message", eg:
    //
    // "invite.resend.api-error"
    // "user.invite.already-invited"
    //
    // The "noun.verb" part will be used as the "key base" in duplicate checks
    // to avoid stacking of multiple error messages whilst leaving enough
    // specificity to re-use keys for i18n lookups

    exports['default'] = Service.extend({
        delayedNotifications: emberA(),
        content: emberA(),

        alerts: filter('content', function (notification) {
            var status = get(notification, 'status');
            return status === 'alert';
        }),

        notifications: filter('content', function (notification) {
            var status = get(notification, 'status');
            return status === 'notification';
        }),

        handleNotification: function handleNotification(message, delayed) {
            // If this is an alert message from the server, treat it as html safe
            if (typeof message.toJSON === 'function' && message.get('status') === 'alert') {
                message.set('message', message.get('message').htmlSafe());
            }

            if (!get(message, 'status')) {
                set(message, 'status', 'notification');
            }

            // close existing duplicate alerts/notifications to avoid stacking
            if (get(message, 'key')) {
                this._removeItems(get(message, 'status'), get(message, 'key'));
            }

            if (!delayed) {
                this.get('content').pushObject(message);
            } else {
                this.get('delayedNotifications').pushObject(message);
            }
        },

        showAlert: function showAlert(message, options) {
            options = options || {};

            this.handleNotification({
                message: message,
                status: 'alert',
                type: options.type,
                key: options.key
            }, options.delayed);
        },

        showNotification: function showNotification(message, options) {
            options = options || {};

            if (!options.doNotCloseNotifications) {
                this.closeNotifications();
            } else {
                // TODO: this should be removed along with showErrors
                options.key = undefined;
            }

            this.handleNotification({
                message: message,
                status: 'notification',
                type: options.type,
                key: options.key
            }, options.delayed);
        },

        // TODO: review whether this can be removed once no longer used by validations
        showErrors: function showErrors(errors, options) {
            options = options || {};
            options.type = options.type || 'error';
            // TODO: getting keys from the server would be useful here (necessary for i18n)
            options.key = options.key && options.key + '.api-error' || 'api-error';

            if (!options.doNotCloseNotifications) {
                this.closeNotifications();
            }

            // ensure all errors that are passed in get shown
            options.doNotCloseNotifications = true;

            for (var i = 0; i < errors.length; i += 1) {
                this.showNotification(errors[i].message || errors[i], options);
            }
        },

        showAPIError: function showAPIError(resp, options) {
            options = options || {};
            options.type = options.type || 'error';
            // TODO: getting keys from the server would be useful here (necessary for i18n)
            options.key = options.key && options.key + '.api-error' || 'api-error';

            if (!options.doNotCloseNotifications) {
                this.closeNotifications();
            }

            options.defaultErrorText = options.defaultErrorText || 'There was a problem on the server, please try again.';

            if (resp && resp.jqXHR && resp.jqXHR.responseJSON && resp.jqXHR.responseJSON.error) {
                this.showAlert(resp.jqXHR.responseJSON.error, options);
            } else if (resp && resp.jqXHR && resp.jqXHR.responseJSON && resp.jqXHR.responseJSON.errors) {
                this.showErrors(resp.jqXHR.responseJSON.errors, options);
            } else if (resp && resp.jqXHR && resp.jqXHR.responseJSON && resp.jqXHR.responseJSON.message) {
                this.showAlert(resp.jqXHR.responseJSON.message, options);
            } else {
                this.showAlert(options.defaultErrorText, options);
            }
        },

        displayDelayed: function displayDelayed() {
            var _this = this;

            this.delayedNotifications.forEach(function (message) {
                _this.get('content').pushObject(message);
            });
            this.delayedNotifications = [];
        },

        closeNotification: function closeNotification(notification) {
            var content = this.get('content');

            if (typeof notification.toJSON === 'function') {
                notification.deleteRecord();
                notification.save()['finally'](function () {
                    content.removeObject(notification);
                });
            } else {
                content.removeObject(notification);
            }
        },

        closeNotifications: function closeNotifications(key) {
            this._removeItems('notification', key);
        },

        closeAlerts: function closeAlerts(key) {
            this._removeItems('alert', key);
        },

        clearAll: function clearAll() {
            this.get('content').clear();
        },

        _removeItems: function _removeItems(status, key) {
            var _this2 = this;

            if (key) {
                (function () {
                    var keyBase = _this2._getKeyBase(key);
                    // TODO: keys should only have . special char but we should
                    // probably use a better regexp escaping function/polyfill
                    var escapedKeyBase = keyBase.replace('.', '\\.');
                    var keyRegex = new RegExp('^' + escapedKeyBase);

                    _this2.set('content', _this2.get('content').reject(function (item) {
                        var itemKey = get(item, 'key');
                        var itemStatus = get(item, 'status');

                        return itemStatus === status && itemKey && itemKey.match(keyRegex);
                    }));
                })();
            } else {
                this.set('content', this.get('content').rejectBy('status', status));
            }
        },

        // take a key and return the first two elements, eg:
        // "invite.revoke.failed" => "invite.revoke"
        _getKeyBase: function _getKeyBase(key) {
            return key.split('.').slice(0, 2).join('.');
        }
    });
});
define('ghost/services/session', ['exports', 'ember', 'ember-simple-auth/services/session'], function (exports, _ember, _emberSimpleAuthServicesSession) {
    var computed = _ember['default'].computed;
    var inject = _ember['default'].inject;
    exports['default'] = _emberSimpleAuthServicesSession['default'].extend({
        store: inject.service(),

        user: computed(function () {
            return this.get('store').findRecord('user', 'me');
        })
    });
});
define('ghost/session-stores/application', ['exports', 'ember-simple-auth/session-stores/local-storage'], function (exports, _emberSimpleAuthSessionStoresLocalStorage) {
    exports['default'] = _emberSimpleAuthSessionStoresLocalStorage['default'].extend({
        key: 'ghost:session'
    });
});
define("ghost/templates/-contributors", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 90,
            "column": 10
          }
        },
        "moduleName": "ghost/templates/-contributors.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("article");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "href", "https://github.com/ErisDS");
        dom.setAttribute(el2, "title", "ErisDS");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("img");
        dom.setAttribute(el3, "alt", "ErisDS");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("article");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "href", "https://github.com/kevinansfield");
        dom.setAttribute(el2, "title", "kevinansfield");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("img");
        dom.setAttribute(el3, "alt", "kevinansfield");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("article");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "href", "https://github.com/acburdine");
        dom.setAttribute(el2, "title", "acburdine");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("img");
        dom.setAttribute(el3, "alt", "acburdine");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("article");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "href", "https://github.com/sebgie");
        dom.setAttribute(el2, "title", "sebgie");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("img");
        dom.setAttribute(el3, "alt", "sebgie");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("article");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "href", "https://github.com/vdemedes");
        dom.setAttribute(el2, "title", "vdemedes");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("img");
        dom.setAttribute(el3, "alt", "vdemedes");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("article");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "href", "https://github.com/cobbspur");
        dom.setAttribute(el2, "title", "cobbspur");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("img");
        dom.setAttribute(el3, "alt", "cobbspur");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("article");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "href", "https://github.com/JohnONolan");
        dom.setAttribute(el2, "title", "JohnONolan");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("img");
        dom.setAttribute(el3, "alt", "JohnONolan");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("article");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "href", "https://github.com/delgermurun");
        dom.setAttribute(el2, "title", "delgermurun");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("img");
        dom.setAttribute(el3, "alt", "delgermurun");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("article");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "href", "https://github.com/mixonic");
        dom.setAttribute(el2, "title", "mixonic");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("img");
        dom.setAttribute(el3, "alt", "mixonic");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("article");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "href", "https://github.com/bhops");
        dom.setAttribute(el2, "title", "bhops");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("img");
        dom.setAttribute(el3, "alt", "bhops");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("article");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "href", "https://github.com/garyc40");
        dom.setAttribute(el2, "title", "garyc40");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("img");
        dom.setAttribute(el3, "alt", "garyc40");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("article");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "href", "https://github.com/kevinkucharczyk");
        dom.setAttribute(el2, "title", "kevinkucharczyk");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("img");
        dom.setAttribute(el3, "alt", "kevinkucharczyk");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("article");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "href", "https://github.com/halfdan");
        dom.setAttribute(el2, "title", "halfdan");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("img");
        dom.setAttribute(el3, "alt", "halfdan");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("article");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "href", "https://github.com/Gargol");
        dom.setAttribute(el2, "title", "Gargol");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("img");
        dom.setAttribute(el3, "alt", "Gargol");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("article");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "href", "https://github.com/javorszky");
        dom.setAttribute(el2, "title", "javorszky");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("img");
        dom.setAttribute(el3, "alt", "javorszky");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("article");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "href", "https://github.com/HParker");
        dom.setAttribute(el2, "title", "HParker");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("img");
        dom.setAttribute(el3, "alt", "HParker");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("article");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "href", "https://github.com/yanntech");
        dom.setAttribute(el2, "title", "yanntech");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("img");
        dom.setAttribute(el3, "alt", "yanntech");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("article");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "href", "https://github.com/lcamacho");
        dom.setAttribute(el2, "title", "lcamacho");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("img");
        dom.setAttribute(el3, "alt", "lcamacho");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 1]);
        var element1 = dom.childAt(fragment, [2, 1, 1]);
        var element2 = dom.childAt(fragment, [4, 1, 1]);
        var element3 = dom.childAt(fragment, [6, 1, 1]);
        var element4 = dom.childAt(fragment, [8, 1, 1]);
        var element5 = dom.childAt(fragment, [10, 1, 1]);
        var element6 = dom.childAt(fragment, [12, 1, 1]);
        var element7 = dom.childAt(fragment, [14, 1, 1]);
        var element8 = dom.childAt(fragment, [16, 1, 1]);
        var element9 = dom.childAt(fragment, [18, 1, 1]);
        var element10 = dom.childAt(fragment, [20, 1, 1]);
        var element11 = dom.childAt(fragment, [22, 1, 1]);
        var element12 = dom.childAt(fragment, [24, 1, 1]);
        var element13 = dom.childAt(fragment, [26, 1, 1]);
        var element14 = dom.childAt(fragment, [28, 1, 1]);
        var element15 = dom.childAt(fragment, [30, 1, 1]);
        var element16 = dom.childAt(fragment, [32, 1, 1]);
        var element17 = dom.childAt(fragment, [34, 1, 1]);
        var morphs = new Array(18);
        morphs[0] = dom.createAttrMorph(element0, 'src');
        morphs[1] = dom.createAttrMorph(element1, 'src');
        morphs[2] = dom.createAttrMorph(element2, 'src');
        morphs[3] = dom.createAttrMorph(element3, 'src');
        morphs[4] = dom.createAttrMorph(element4, 'src');
        morphs[5] = dom.createAttrMorph(element5, 'src');
        morphs[6] = dom.createAttrMorph(element6, 'src');
        morphs[7] = dom.createAttrMorph(element7, 'src');
        morphs[8] = dom.createAttrMorph(element8, 'src');
        morphs[9] = dom.createAttrMorph(element9, 'src');
        morphs[10] = dom.createAttrMorph(element10, 'src');
        morphs[11] = dom.createAttrMorph(element11, 'src');
        morphs[12] = dom.createAttrMorph(element12, 'src');
        morphs[13] = dom.createAttrMorph(element13, 'src');
        morphs[14] = dom.createAttrMorph(element14, 'src');
        morphs[15] = dom.createAttrMorph(element15, 'src');
        morphs[16] = dom.createAttrMorph(element16, 'src');
        morphs[17] = dom.createAttrMorph(element17, 'src');
        return morphs;
      },
      statements: [["attribute", "src", ["concat", [["subexpr", "gh-path", ["admin", "/img/contributors"], [], ["loc", [null, [3, 18], [3, 57]]]], "/ErisDS"]]], ["attribute", "src", ["concat", [["subexpr", "gh-path", ["admin", "/img/contributors"], [], ["loc", [null, [8, 18], [8, 57]]]], "/kevinansfield"]]], ["attribute", "src", ["concat", [["subexpr", "gh-path", ["admin", "/img/contributors"], [], ["loc", [null, [13, 18], [13, 57]]]], "/acburdine"]]], ["attribute", "src", ["concat", [["subexpr", "gh-path", ["admin", "/img/contributors"], [], ["loc", [null, [18, 18], [18, 57]]]], "/sebgie"]]], ["attribute", "src", ["concat", [["subexpr", "gh-path", ["admin", "/img/contributors"], [], ["loc", [null, [23, 18], [23, 57]]]], "/vdemedes"]]], ["attribute", "src", ["concat", [["subexpr", "gh-path", ["admin", "/img/contributors"], [], ["loc", [null, [28, 18], [28, 57]]]], "/cobbspur"]]], ["attribute", "src", ["concat", [["subexpr", "gh-path", ["admin", "/img/contributors"], [], ["loc", [null, [33, 18], [33, 57]]]], "/JohnONolan"]]], ["attribute", "src", ["concat", [["subexpr", "gh-path", ["admin", "/img/contributors"], [], ["loc", [null, [38, 18], [38, 57]]]], "/delgermurun"]]], ["attribute", "src", ["concat", [["subexpr", "gh-path", ["admin", "/img/contributors"], [], ["loc", [null, [43, 18], [43, 57]]]], "/mixonic"]]], ["attribute", "src", ["concat", [["subexpr", "gh-path", ["admin", "/img/contributors"], [], ["loc", [null, [48, 18], [48, 57]]]], "/bhops"]]], ["attribute", "src", ["concat", [["subexpr", "gh-path", ["admin", "/img/contributors"], [], ["loc", [null, [53, 18], [53, 57]]]], "/garyc40"]]], ["attribute", "src", ["concat", [["subexpr", "gh-path", ["admin", "/img/contributors"], [], ["loc", [null, [58, 18], [58, 57]]]], "/kevinkucharczyk"]]], ["attribute", "src", ["concat", [["subexpr", "gh-path", ["admin", "/img/contributors"], [], ["loc", [null, [63, 18], [63, 57]]]], "/halfdan"]]], ["attribute", "src", ["concat", [["subexpr", "gh-path", ["admin", "/img/contributors"], [], ["loc", [null, [68, 18], [68, 57]]]], "/Gargol"]]], ["attribute", "src", ["concat", [["subexpr", "gh-path", ["admin", "/img/contributors"], [], ["loc", [null, [73, 18], [73, 57]]]], "/javorszky"]]], ["attribute", "src", ["concat", [["subexpr", "gh-path", ["admin", "/img/contributors"], [], ["loc", [null, [78, 18], [78, 57]]]], "/HParker"]]], ["attribute", "src", ["concat", [["subexpr", "gh-path", ["admin", "/img/contributors"], [], ["loc", [null, [83, 18], [83, 57]]]], "/yanntech"]]], ["attribute", "src", ["concat", [["subexpr", "gh-path", ["admin", "/img/contributors"], [], ["loc", [null, [88, 18], [88, 57]]]], "/lcamacho"]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/-import-errors", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 5,
                "column": 0
              }
            },
            "moduleName": "ghost/templates/-import-errors.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createElement("td");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 0]), 0, 0);
            return morphs;
          },
          statements: [["content", "error.message", ["loc", [null, [4, 12], [4, 29]]]]],
          locals: ["error"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/-import-errors.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("table");
          dom.setAttribute(el1, "class", "table");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "importErrors", ["loc", [null, [3, 8], [3, 20]]]]], [], 0, null, ["loc", [null, [3, 0], [5, 9]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/-import-errors.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "importErrors", ["loc", [null, [1, 6], [1, 18]]]]], [], 0, null, ["loc", [null, [1, 0], [7, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/-user-list-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 8
              },
              "end": {
                "line": 16,
                "column": 8
              }
            },
            "moduleName": "ghost/templates/-user-list-item.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["role-label ", ["get", "role.lowerCaseName", ["loc", [null, [15, 38], [15, 56]]]]]]], ["content", "role.name", ["loc", [null, [15, 60], [15, 73]]]]],
          locals: ["role"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 4
            },
            "end": {
              "line": 17,
              "column": 4
            }
          },
          "moduleName": "ghost/templates/-user-list-item.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "user.roles", ["loc", [null, [14, 16], [14, 26]]]]], [], 0, null, ["loc", [null, [14, 8], [16, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/-user-list-item.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "user-list-item-figure");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "hidden");
        var el3 = dom.createTextNode("Photo of ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "user-list-item-body");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "name");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("br");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "description");
        var el3 = dom.createTextNode("Last seen: ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("aside");
        dom.setAttribute(el1, "class", "user-list-item-aside");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(fragment, [2]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element1, 'style');
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [5]), 1, 1);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        return morphs;
      },
      statements: [["attribute", "style", ["get", "component.userImageBackground", ["loc", [null, [1, 44], [1, 73]]]]], ["content", "user.name", ["loc", [null, [2, 34], [2, 47]]]], ["content", "user.name", ["loc", [null, [7, 8], [7, 21]]]], ["content", "component.lastLogin", ["loc", [null, [10, 41], [10, 64]]]], ["block", "unless", [["get", "session.user.isAuthor", ["loc", [null, [13, 14], [13, 35]]]]], [], 0, null, ["loc", [null, [13, 4], [17, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/about", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 8
            },
            "end": {
              "line": 3,
              "column": 82
            }
          },
          "moduleName": "ghost/templates/about.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("About Ghost");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 42
            },
            "end": {
              "line": 17,
              "column": 74
            }
          },
          "moduleName": "ghost/templates/about.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "model.mail", ["loc", [null, [17, 60], [17, 74]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 74
            },
            "end": {
              "line": 17,
              "column": 88
            }
          },
          "moduleName": "ghost/templates/about.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Native");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/about.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "gh-view js-settings-content");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("header");
        dom.setAttribute(el2, "class", "view-header");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2, "class", "view-content");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("header");
        dom.setAttribute(el3, "class", "gh-about-header");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("img");
        dom.setAttribute(el4, "class", "gh-logo");
        dom.setAttribute(el4, "alt", "Ghost");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("section");
        dom.setAttribute(el3, "class", "gh-env-details");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("ul");
        dom.setAttribute(el4, "class", "gh-env-list");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        dom.setAttribute(el5, "class", "gh-env-list-version");
        var el6 = dom.createElement("strong");
        var el7 = dom.createTextNode("Version");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        var el6 = dom.createElement("strong");
        var el7 = dom.createTextNode("Environment");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        dom.setAttribute(el5, "class", "gh-env-list-database-type");
        var el6 = dom.createElement("strong");
        var el7 = dom.createTextNode("Database");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        var el6 = dom.createElement("strong");
        var el7 = dom.createTextNode("Mail");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "gh-env-help");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "href", "http://support.ghost.org");
        dom.setAttribute(el5, "class", "btn btn-minor");
        dom.setAttribute(el5, "target", "_blank");
        var el6 = dom.createTextNode("User Documentation");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "href", "https://ghost.org/slack/");
        dom.setAttribute(el5, "class", "btn btn-minor");
        dom.setAttribute(el5, "target", "_blank");
        var el6 = dom.createTextNode("Get Help With Ghost");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("section");
        dom.setAttribute(el3, "class", "gh-credits");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h2");
        var el5 = dom.createTextNode("The People Who Made it Possible");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("section");
        dom.setAttribute(el4, "class", "gh-contributors");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        var el5 = dom.createTextNode("Ghost is built by an incredible group of contributors from all over the world. Here are just a few of the people who helped create the version you’re using right now.");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "href", "https://ghost.org/about/contribute/");
        dom.setAttribute(el4, "class", "btn btn-blue btn-lg");
        var el5 = dom.createTextNode("Find out how you can get involved");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("footer");
        dom.setAttribute(el3, "class", "gh-copyright-info");
        var el4 = dom.createTextNode("\n            Copyright 2013 - 2015 Ghost Foundation, released under the ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "href", "https://github.com/TryGhost/Ghost/blob/master/LICENSE");
        var el5 = dom.createTextNode("MIT license");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(".\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("br");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "href", "https://ghost.org/");
        var el5 = dom.createTextNode("Ghost");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" is a trademark of the ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "href", "https://ghost.org/about/");
        var el5 = dom.createTextNode("Ghost Foundation");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(".\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [3]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element1, [3, 1]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[1] = dom.createAttrMorph(element3, 'src');
        morphs[2] = dom.createMorphAt(element2, 4, 4);
        morphs[3] = dom.createMorphAt(dom.childAt(element4, [1]), 2, 2);
        morphs[4] = dom.createMorphAt(dom.childAt(element4, [3]), 2, 2);
        morphs[5] = dom.createMorphAt(dom.childAt(element4, [5]), 2, 2);
        morphs[6] = dom.createMorphAt(dom.childAt(element4, [7]), 2, 2);
        morphs[7] = dom.createMorphAt(dom.childAt(element1, [5, 3]), 1, 1);
        return morphs;
      },
      statements: [["block", "gh-view-title", [], ["openMobileMenu", "openMobileMenu"], 0, null, ["loc", [null, [3, 8], [3, 100]]]], ["attribute", "src", ["concat", [["subexpr", "gh-path", ["admin", "/img/ghost-logo.png"], [], ["loc", [null, [7, 38], [7, 79]]]]]]], ["inline", "gh-notifications", [], ["location", "about-upgrade", "notify", "updateNotificationChange"], ["loc", [null, [9, 12], [9, 91]]]], ["content", "model.version", ["loc", [null, [14, 73], [14, 90]]]], ["content", "model.environment", ["loc", [null, [15, 49], [15, 70]]]], ["content", "model.database", ["loc", [null, [16, 80], [16, 98]]]], ["block", "if", [["get", "model.mail", ["loc", [null, [17, 48], [17, 58]]]]], [], 1, 2, ["loc", [null, [17, 42], [17, 95]]]], ["inline", "partial", ["contributors"], [], ["loc", [null, [29, 16], [29, 42]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("ghost/templates/application", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 2,
                "column": 59
              }
            },
            "moduleName": "ghost/templates/application.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Skip to main content");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 8
              },
              "end": {
                "line": 9,
                "column": 8
              }
            },
            "moduleName": "ghost/templates/application.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "gh-nav-menu", [], ["open", ["subexpr", "@mut", [["get", "autoNavOpen", ["loc", [null, [8, 31], [8, 42]]]]], [], []], "toggleMaximise", "toggleAutoNav", "openAutoNav", "openAutoNav", "openModal", "openModal", "closeMobileMenu", "closeMobileMenu"], ["loc", [null, [8, 12], [8, 157]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 8
              },
              "end": {
                "line": 13,
                "column": 8
              }
            },
            "moduleName": "ghost/templates/application.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "outlet", ["loc", [null, [12, 12], [12, 22]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/application.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [5]);
          var morphs = new Array(9);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createAttrMorph(element0, 'class');
          morphs[3] = dom.createMorphAt(element0, 1, 1);
          morphs[4] = dom.createMorphAt(element0, 3, 3);
          morphs[5] = dom.createMorphAt(element0, 5, 5);
          morphs[6] = dom.createMorphAt(element0, 7, 7);
          morphs[7] = dom.createMorphAt(element0, 9, 9);
          morphs[8] = dom.createMorphAt(element0, 11, 11);
          return morphs;
        },
        statements: [["block", "gh-skip-link", [], ["anchor", ".gh-main"], 0, null, ["loc", [null, [2, 4], [2, 76]]]], ["inline", "gh-alerts", [], ["notify", "topNotificationChange"], ["loc", [null, [4, 4], [4, 48]]]], ["attribute", "class", ["concat", ["gh-viewport ", ["subexpr", "if", [["get", "autoNav", ["loc", [null, [6, 33], [6, 40]]]], "gh-autonav"], [], ["loc", [null, [6, 28], [6, 55]]]], " ", ["subexpr", "if", [["get", "showSettingsMenu", ["loc", [null, [6, 61], [6, 77]]]], "settings-menu-expanded"], [], ["loc", [null, [6, 56], [6, 104]]]], " ", ["subexpr", "if", [["get", "showMobileMenu", ["loc", [null, [6, 110], [6, 124]]]], "mobile-menu-expanded"], [], ["loc", [null, [6, 105], [6, 149]]]]]]], ["block", "unless", [["get", "signedOut", ["loc", [null, [7, 18], [7, 27]]]]], [], 1, null, ["loc", [null, [7, 8], [9, 19]]]], ["block", "gh-main", [], ["onMouseEnter", "closeAutoNav", "data-notification-count", ["subexpr", "@mut", [["get", "topNotificationCount", ["loc", [null, [11, 71], [11, 91]]]]], [], []]], 2, null, ["loc", [null, [11, 8], [13, 20]]]], ["content", "gh-notifications", ["loc", [null, [16, 8], [16, 28]]]], ["inline", "gh-content-cover", [], ["onClick", "closeMenus", "onMouseEnter", "closeAutoNav"], ["loc", [null, [18, 8], [18, 77]]]], ["inline", "outlet", ["modal"], [], ["loc", [null, [20, 8], [20, 26]]]], ["inline", "outlet", ["settings-menu"], [], ["loc", [null, [21, 8], [21, 34]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/application.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "gh-app", [], ["showSettingsMenu", ["subexpr", "@mut", [["get", "showSettingsMenu", ["loc", [null, [1, 27], [1, 43]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [23, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/components/gh-activating-list-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 105
            }
          },
          "moduleName": "ghost/templates/components/gh-activating-list-item.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "title", ["loc", [null, [1, 87], [1, 96]]]], ["content", "yield", ["loc", [null, [1, 96], [1, 105]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-activating-list-item.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "link-to", [["get", "route", ["loc", [null, [1, 11], [1, 16]]]]], ["alternateActive", ["subexpr", "action", ["setActive"], [], ["loc", [null, [1, 33], [1, 53]]]], "class", ["subexpr", "concat", [["subexpr", "if", [["get", "linkClasses", []], ["subexpr", "-normalize-class", ["linkClasses", ["get", "linkClasses", []]], [], []]], [], []], " "], [], []]], 0, null, ["loc", [null, [1, 0], [1, 117]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/components/gh-alert", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 111
          }
        },
        "moduleName": "ghost/templates/components/gh-alert.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "gh-alert-content");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("button");
        dom.setAttribute(el1, "class", "gh-alert-close icon-x");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "hidden");
        var el3 = dom.createTextNode("Close");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [["content", "message.message", ["loc", [null, [2, 4], [2, 23]]]], ["element", "action", ["closeNotification"], [], ["loc", [null, [4, 38], [4, 68]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/components/gh-alerts", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/components/gh-alerts.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "gh-alert", [], ["message", ["subexpr", "@mut", [["get", "message", ["loc", [null, [2, 23], [2, 30]]]]], [], []]], ["loc", [null, [2, 4], [2, 32]]]]],
        locals: ["message"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 9
          }
        },
        "moduleName": "ghost/templates/components/gh-alerts.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "messages", ["loc", [null, [1, 8], [1, 16]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/components/gh-app", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-app.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/components/gh-blog-url", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 20
          }
        },
        "moduleName": "ghost/templates/components/gh-blog-url.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createUnsafeMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "config.blogUrl", ["loc", [null, [1, 0], [1, 20]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/components/gh-content-preview-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-content-preview-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/components/gh-content-view-container", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-content-view-container.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "yield", [["get", "this", ["loc", [null, [1, 8], [1, 12]]]]], [], ["loc", [null, [1, 0], [1, 14]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/components/gh-datetime-input", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-datetime-input.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "gh-input", [], ["value", ["subexpr", "@mut", [["get", "datetime", ["loc", [null, [1, 17], [1, 25]]]]], [], []], "id", ["subexpr", "@mut", [["get", "inputId", ["loc", [null, [2, 14], [2, 21]]]]], [], []], "class", ["subexpr", "@mut", [["get", "inputClass", ["loc", [null, [3, 17], [3, 27]]]]], [], []], "name", ["subexpr", "@mut", [["get", "inputName", ["loc", [null, [4, 16], [4, 25]]]]], [], []], "stopEnterKeyDownPropagation", "true"], ["loc", [null, [1, 0], [5, 47]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/components/gh-ed-preview", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-ed-preview.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "gh-format-markdown", [["get", "markdown", ["loc", [null, [1, 21], [1, 29]]]]], [], ["loc", [null, [1, 0], [1, 31]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/components/gh-editor-save-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 162
            }
          },
          "moduleName": "ghost/templates/components/gh-editor-save-button.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "saveText", ["loc", [null, [1, 150], [1, 162]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/components/gh-editor-save-button.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "options icon-arrow2");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "sr-only");
          var el2 = dom.createTextNode("Toggle Settings Menu");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 8
              },
              "end": {
                "line": 20,
                "column": 8
              }
            },
            "moduleName": "ghost/templates/components/gh-editor-save-button.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "divider delete");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "delete");
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("a");
            dom.setAttribute(el2, "href", "#");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [3, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [18, 19], [18, 38]]]], ["content", "deleteText", ["loc", [null, [18, 48], [18, 62]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/components/gh-editor-save-button.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1, "class", "dropdown-menu dropdown-triangle-bottom-right");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "href", "#");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "href", "#");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [1]);
          var element3 = dom.childAt(element2, [1]);
          var element4 = dom.childAt(element1, [3]);
          var element5 = dom.childAt(element4, [1]);
          var morphs = new Array(7);
          morphs[0] = dom.createAttrMorph(element2, 'class');
          morphs[1] = dom.createElementMorph(element3);
          morphs[2] = dom.createMorphAt(element3, 0, 0);
          morphs[3] = dom.createAttrMorph(element4, 'class');
          morphs[4] = dom.createElementMorph(element5);
          morphs[5] = dom.createMorphAt(element5, 0, 0);
          morphs[6] = dom.createMorphAt(element1, 5, 5);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["post-save-publish ", ["subexpr", "if", [["get", "willPublish", ["loc", [null, [9, 42], [9, 53]]]], "active"], [], ["loc", [null, [9, 37], [9, 64]]]]]]], ["element", "action", ["setSaveType", "publish"], [], ["loc", [null, [10, 15], [10, 49]]]], ["content", "publishText", ["loc", [null, [10, 59], [10, 74]]]], ["attribute", "class", ["concat", ["post-save-draft ", ["subexpr", "unless", [["get", "willPublish", ["loc", [null, [12, 44], [12, 55]]]], "active"], [], ["loc", [null, [12, 35], [12, 66]]]]]]], ["element", "action", ["setSaveType", "draft"], [], ["loc", [null, [13, 15], [13, 47]]]], ["content", "draftText", ["loc", [null, [13, 57], [13, 70]]]], ["block", "unless", [["get", "isNew", ["loc", [null, [15, 18], [15, 23]]]]], [], 0, null, ["loc", [null, [15, 8], [20, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-editor-save-button.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "gh-spin-button", [], ["type", "button", "action", "save", "submitting", ["subexpr", "@mut", [["get", "submitting", ["loc", [null, [1, 138], [1, 148]]]]], [], []], "class", ["subexpr", "concat", ["btn", " ", "btn-sm", " ", "js-publish-button", " ", ["subexpr", "if", [["get", "isDangerous", []], "btn-red", "btn-blue"], [], []], " "], [], []]], 0, null, ["loc", [null, [1, 0], [1, 181]]]], ["block", "gh-dropdown-button", [], ["dropdownName", "post-save-menu", "class", ["subexpr", "concat", ["btn", " ", "btn-sm", " ", ["subexpr", "if", [["get", "isDangerous", []], "btn-red", "btn-blue"], [], []], " ", ["subexpr", "if", [["get", "btnopen", []], "active"], [], []], " ", "dropdown-toggle", " ", "up", " "], [], []]], 1, null, ["loc", [null, [3, 0], [6, 23]]]], ["block", "gh-dropdown", [], ["name", "post-save-menu", "closeOnClick", "true", "classNames", "editor-options"], 2, null, ["loc", [null, [7, 0], [22, 16]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("ghost/templates/components/gh-editor", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-editor.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "yield", [["get", "this", ["loc", [null, [1, 8], [1, 12]]]]], [], ["loc", [null, [1, 0], [1, 14]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/components/gh-error-message", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-error-message.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "message", ["loc", [null, [1, 0], [1, 11]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/components/gh-file-upload", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-file-upload.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("input");
        dom.setAttribute(el1, "data-url", "upload");
        dom.setAttribute(el1, "class", "gh-input btn-block");
        dom.setAttribute(el1, "type", "file");
        dom.setAttribute(el1, "name", "importfile");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("button");
        dom.setAttribute(el1, "type", "submit");
        dom.setAttribute(el1, "class", "btn btn-green btn-block");
        dom.setAttribute(el1, "id", "startupload");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [2]);
        var morphs = new Array(4);
        morphs[0] = dom.createAttrMorph(element0, 'accept');
        morphs[1] = dom.createAttrMorph(element1, 'disabled');
        morphs[2] = dom.createElementMorph(element1);
        morphs[3] = dom.createMorphAt(element1, 1, 1);
        return morphs;
      },
      statements: [["attribute", "accept", ["concat", [["get", "options.acceptEncoding", ["loc", [null, [1, 92], [1, 114]]]]]]], ["attribute", "disabled", ["get", "uploadButtonDisabled", ["loc", [null, [2, 82], [2, 102]]]]], ["element", "action", ["upload"], [], ["loc", [null, [2, 105], [2, 124]]]], ["content", "uploadButtonText", ["loc", [null, [3, 4], [3, 24]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/components/gh-infinite-scroll-box", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-infinite-scroll-box.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/components/gh-infinite-scroll", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-infinite-scroll.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/components/gh-menu-toggle", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-menu-toggle.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("i");
        dom.setAttribute(el1, "role", "button");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(1);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        return morphs;
      },
      statements: [["attribute", "class", ["concat", [["get", "iconClass", ["loc", [null, [1, 12], [1, 21]]]]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/components/gh-modal-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 12
            },
            "end": {
              "line": 4,
              "column": 81
            }
          },
          "moduleName": "ghost/templates/components/gh-modal-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("header");
          dom.setAttribute(el1, "class", "modal-header");
          var el2 = dom.createElement("h1");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]), 0, 0);
          return morphs;
        },
        statements: [["content", "title", ["loc", [null, [4, 58], [4, 67]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 12
            },
            "end": {
              "line": 5,
              "column": 136
            }
          },
          "moduleName": "ghost/templates/components/gh-modal-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "class", "close icon-x");
          dom.setAttribute(el1, "href", "");
          dom.setAttribute(el1, "title", "Close");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "hidden");
          var el3 = dom.createTextNode("Close");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [0]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element3);
          return morphs;
        },
        statements: [["element", "action", ["closeModal"], [], ["loc", [null, [5, 75], [5, 98]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 12
            },
            "end": {
              "line": 14,
              "column": 12
            }
          },
          "moduleName": "ghost/templates/components/gh-modal-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("footer");
          dom.setAttribute(el1, "class", "modal-footer");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [2]);
          var element2 = dom.childAt(element0, [3]);
          var morphs = new Array(6);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createElementMorph(element1);
          morphs[2] = dom.createMorphAt(element1, 0, 0);
          morphs[3] = dom.createAttrMorph(element2, 'class');
          morphs[4] = dom.createElementMorph(element2);
          morphs[5] = dom.createMorphAt(element2, 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "rejectButtonClass", ["loc", [null, [12, 47], [12, 64]]]], " btn-minor js-button-reject"]]], ["element", "action", ["confirm", "reject"], [], ["loc", [null, [12, 95], [12, 124]]]], ["content", "confirm.reject.text", ["loc", [null, [12, 125], [12, 148]]]], ["attribute", "class", ["concat", [["get", "acceptButtonClass", ["loc", [null, [12, 188], [12, 205]]]], " js-button-accept"]]], ["element", "action", ["confirm", "accept"], [], ["loc", [null, [12, 226], [12, 255]]]], ["content", "confirm.accept.text", ["loc", [null, [12, 256], [12, 279]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-modal-dialog.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "modal-container js-modal-container");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("article");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("section");
        dom.setAttribute(el3, "class", "modal-content");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("section");
        dom.setAttribute(el4, "class", "modal-body");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "modal-background js-modal-background");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [0]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element5, [1]);
        var morphs = new Array(7);
        morphs[0] = dom.createElementMorph(element4);
        morphs[1] = dom.createAttrMorph(element5, 'class');
        morphs[2] = dom.createElementMorph(element6);
        morphs[3] = dom.createMorphAt(element6, 1, 1);
        morphs[4] = dom.createMorphAt(element6, 3, 3);
        morphs[5] = dom.createMorphAt(dom.childAt(element6, [5]), 1, 1);
        morphs[6] = dom.createMorphAt(element6, 7, 7);
        return morphs;
      },
      statements: [["element", "action", ["closeModal"], [], ["loc", [null, [1, 48], [1, 71]]]], ["attribute", "class", ["concat", [["get", "klass", ["loc", [null, [2, 22], [2, 27]]]], " js-modal"]]], ["element", "action", ["noBubble"], ["bubbles", false, "preventDefault", false], ["loc", [null, [3, 39], [3, 95]]]], ["block", "if", [["get", "title", ["loc", [null, [4, 18], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 12], [4, 88]]]], ["block", "if", [["get", "showClose", ["loc", [null, [5, 18], [5, 27]]]]], [], 1, null, ["loc", [null, [5, 12], [5, 143]]]], ["content", "yield", ["loc", [null, [7, 16], [7, 25]]]], ["block", "if", [["get", "confirm", ["loc", [null, [9, 18], [9, 25]]]]], [], 2, null, ["loc", [null, [9, 12], [14, 19]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("ghost/templates/components/gh-nav-menu", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes"]
          },
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/components/gh-nav-menu.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "gh-nav-menu-icon");
          dom.setAttribute(el1, "style", "background-image: url(https://s3.amazonaws.com/f.cl.ly/items/3I0g431b2b3q00253K1V/d16dc430c9c4f5c09d6ca09be3e5c72fdb21c1ac.png)");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "gh-nav-menu-details");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "gh-nav-menu-details-blog");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "gh-nav-menu-details-user");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "icon-arrow");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [3]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
          return morphs;
        },
        statements: [["content", "config.blogTitle", ["loc", [null, [4, 46], [4, 66]]]], ["content", "session.user.name", ["loc", [null, [5, 46], [5, 67]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 32
              },
              "end": {
                "line": 11,
                "column": 176
              }
            },
            "moduleName": "ghost/templates/components/gh-nav-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "icon-shop");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" About Ghost");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 32
              },
              "end": {
                "line": 13,
                "column": 199
              }
            },
            "moduleName": "ghost/templates/components/gh-nav-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "icon-user");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" Your Profile");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 32
              },
              "end": {
                "line": 14,
                "column": 166
              }
            },
            "moduleName": "ghost/templates/components/gh-nav-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "icon-signout");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" Sign Out");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/components/gh-nav-menu.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1, "class", "dropdown-menu dropdown-triangle-top js-user-menu-dropdown-menu");
          dom.setAttribute(el1, "role", "menu");
          dom.setAttribute(el1, "style", "right:-20px;left:auto;");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "role", "presentation");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "divider");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "role", "presentation");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "role", "presentation");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element2, [5]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element2, [7]), 0, 0);
          return morphs;
        },
        statements: [["block", "link-to", ["about"], ["classNames", "gh-nav-menu-about dropdown-item js-nav-item", "role", "menuitem", "tabindex", "-1"], 0, null, ["loc", [null, [11, 32], [11, 188]]]], ["block", "link-to", ["team.user", ["get", "session.user.slug", ["loc", [null, [13, 55], [13, 72]]]]], ["classNames", "dropdown-item user-menu-profile js-nav-item", "role", "menuitem", "tabindex", "-1"], 1, null, ["loc", [null, [13, 32], [13, 211]]]], ["block", "link-to", ["signout"], ["classNames", "dropdown-item user-menu-signout", "role", "menuitem", "tabindex", "-1"], 2, null, ["loc", [null, [14, 32], [14, 178]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 12
            },
            "end": {
              "line": 23,
              "column": 101
            }
          },
          "moduleName": "ghost/templates/components/gh-nav-menu.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "icon-pen");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("New Post");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 12
            },
            "end": {
              "line": 24,
              "column": 100
            }
          },
          "moduleName": "ghost/templates/components/gh-nav-menu.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "icon-content");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("Content");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 12
            },
            "end": {
              "line": 26,
              "column": 91
            }
          },
          "moduleName": "ghost/templates/components/gh-nav-menu.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "icon-team");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("Team");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 32,
                "column": 16
              },
              "end": {
                "line": 32,
                "column": 120
              }
            },
            "moduleName": "ghost/templates/components/gh-nav-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "icon-settings");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("General");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 34,
                "column": 16
              },
              "end": {
                "line": 34,
                "column": 128
              }
            },
            "moduleName": "ghost/templates/components/gh-nav-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "icon-compass");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("Navigation");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 35,
                "column": 16
              },
              "end": {
                "line": 35,
                "column": 106
              }
            },
            "moduleName": "ghost/templates/components/gh-nav-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "icon-tag");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("Tags");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 16
              },
              "end": {
                "line": 36,
                "column": 137
              }
            },
            "moduleName": "ghost/templates/components/gh-nav-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "icon-code");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("Code Injection");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 37,
                "column": 16
              },
              "end": {
                "line": 37,
                "column": 107
              }
            },
            "moduleName": "ghost/templates/components/gh-nav-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "icon-apps");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("Labs");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 4
            },
            "end": {
              "line": 39,
              "column": 4
            }
          },
          "moduleName": "ghost/templates/components/gh-nav-menu.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1, "class", "gh-nav-list gh-nav-settings");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "gh-nav-list-h");
          var el3 = dom.createTextNode("Settings");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element1, [6]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element1, [8]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element1, [10]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element1, [12]), 0, 0);
          return morphs;
        },
        statements: [["block", "link-to", ["settings.general"], ["classNames", "gh-nav-settings-general"], 0, null, ["loc", [null, [32, 16], [32, 132]]]], ["block", "link-to", ["settings.navigation"], ["classNames", "gh-nav-settings-navigation"], 1, null, ["loc", [null, [34, 16], [34, 140]]]], ["block", "link-to", ["settings.tags"], ["classNames", "gh-nav-settings-tags"], 2, null, ["loc", [null, [35, 16], [35, 118]]]], ["block", "link-to", ["settings.code-injection"], ["classNames", "gh-nav-settings-code-injection"], 3, null, ["loc", [null, [36, 16], [36, 149]]]], ["block", "link-to", ["settings.labs"], ["classNames", "gh-nav-settings-labs"], 4, null, ["loc", [null, [37, 16], [37, 119]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 45,
              "column": 8
            },
            "end": {
              "line": 49,
              "column": 8
            }
          },
          "moduleName": "ghost/templates/components/gh-nav-menu.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "gh-help-button");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "icon-question");
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "hidden");
          var el4 = dom.createTextNode("Help");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 50,
              "column": 8
            },
            "end": {
              "line": 60,
              "column": 8
            }
          },
          "moduleName": "ghost/templates/components/gh-nav-menu.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1, "class", "dropdown-menu dropdown-triangle-bottom");
          dom.setAttribute(el1, "role", "menu");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "role", "presentation");
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "class", "dropdown-item help-menu-support");
          dom.setAttribute(el3, "role", "menuitem");
          dom.setAttribute(el3, "tabindex", "-1");
          dom.setAttribute(el3, "href", "http://support.ghost.org/");
          dom.setAttribute(el3, "target", "_blank");
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "icon-ambulance");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Support Center");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "role", "presentation");
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "class", "dropdown-item help-menu-tweet");
          dom.setAttribute(el3, "role", "menuitem");
          dom.setAttribute(el3, "tabindex", "-1");
          dom.setAttribute(el3, "href", "https://twitter.com/intent/tweet?text=%40TryGhost+Hi%21+Can+you+help+me+with+&related=TryGhost");
          dom.setAttribute(el3, "target", "_blank");
          dom.setAttribute(el3, "onclick", "window.open(this.href, 'twitter-share', 'width=550,height=235');return false;");
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "icon-twitter");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Tweet @TryGhost!");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "divider");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "role", "presentation");
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "class", "dropdown-item help-menu-how-to");
          dom.setAttribute(el3, "role", "menuitem");
          dom.setAttribute(el3, "tabindex", "-1");
          dom.setAttribute(el3, "href", "http://support.ghost.org/how-to-use-ghost/");
          dom.setAttribute(el3, "target", "_blank");
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "icon-book");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" How to Use Ghost");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "role", "presentation");
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "class", "dropdown-item help-menu-markdown");
          dom.setAttribute(el3, "role", "menuitem");
          dom.setAttribute(el3, "tabindex", "-1");
          dom.setAttribute(el3, "href", "");
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "icon-markdown");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Markdown Help");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "divider");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "role", "presentation");
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "class", "dropdown-item help-menu-wishlist");
          dom.setAttribute(el3, "role", "menuitem");
          dom.setAttribute(el3, "tabindex", "-1");
          dom.setAttribute(el3, "href", "http://ideas.ghost.org/");
          dom.setAttribute(el3, "target", "_blank");
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "icon-idea");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" Wishlist");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 9, 0]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["element", "action", ["openModal", "markdown"], [], ["loc", [null, [56, 122], [56, 155]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 64,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-nav-menu.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "gh-nav-body");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2, "class", "gh-nav-search");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "gh-nav-list gh-nav-main");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("footer");
        dom.setAttribute(el1, "class", "gh-nav-footer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "class", "gh-nav-footer-sitelink");
        dom.setAttribute(el2, "target", "_blank");
        var el3 = dom.createTextNode("View blog");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "gh-help-menu");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "gh-autonav-toggle");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [2]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(fragment, [4]);
        var element7 = dom.childAt(element6, [3]);
        var element8 = dom.childAt(element6, [5]);
        var element9 = dom.childAt(fragment, [6]);
        var morphs = new Array(12);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(element4, [1]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element5, [2]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element5, [4]), 0, 0);
        morphs[5] = dom.createMorphAt(dom.childAt(element5, [7]), 0, 0);
        morphs[6] = dom.createMorphAt(element4, 5, 5);
        morphs[7] = dom.createMorphAt(element6, 1, 1);
        morphs[8] = dom.createAttrMorph(element7, 'href');
        morphs[9] = dom.createMorphAt(element8, 1, 1);
        morphs[10] = dom.createMorphAt(element8, 2, 2);
        morphs[11] = dom.createElementMorph(element9);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "gh-dropdown-button", [], ["tagName", "header", "class", "gh-nav-menu", "dropdownName", "user-menu"], 0, null, ["loc", [null, [1, 0], [8, 23]]]], ["block", "gh-dropdown", [], ["tagName", "div", "name", "user-menu", "closeOnClick", "true"], 1, null, ["loc", [null, [9, 0], [16, 16]]]], ["inline", "gh-search-input", [], ["class", "gh-nav-search-input"], ["loc", [null, [19, 8], [19, 55]]]], ["block", "link-to", ["editor.new"], ["classNames", "gh-nav-main-editor"], 2, null, ["loc", [null, [23, 12], [23, 113]]]], ["block", "link-to", ["posts"], ["classNames", "gh-nav-main-content"], 3, null, ["loc", [null, [24, 12], [24, 112]]]], ["block", "link-to", ["team"], ["classNames", "gh-nav-main-users"], 4, null, ["loc", [null, [26, 12], [26, 103]]]], ["block", "if", [["subexpr", "gh-user-can-admin", [["get", "session.user", ["loc", [null, [29, 29], [29, 41]]]]], [], ["loc", [null, [29, 10], [29, 42]]]]], [], 5, null, ["loc", [null, [29, 4], [39, 11]]]], ["inline", "gh-menu-toggle", [], ["desktopAction", "toggleAutoNav", "mobileAction", "closeMobileMenu"], ["loc", [null, [42, 4], [42, 83]]]], ["attribute", "href", ["concat", [["get", "config.blogUrl", ["loc", [null, [43, 46], [43, 60]]]], "/"]]], ["block", "gh-dropdown-button", [], ["dropdownName", "help-menu", "tagName", "div"], 6, null, ["loc", [null, [45, 8], [49, 31]]]], ["block", "gh-dropdown", [], ["tagName", "div", "name", "help-menu", "closeOnClick", "true"], 7, null, ["loc", [null, [50, 8], [60, 24]]]], ["element", "action", ["openAutoNav"], ["on", "mouseEnter"], ["loc", [null, [63, 31], [63, 71]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  })());
});
define("ghost/templates/components/gh-navigation", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-navigation.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/components/gh-navitem", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/components/gh-navitem.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "gh-blognav-grab icon-grab");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "sr-only");
          var el3 = dom.createTextNode("Reorder");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 4
            },
            "end": {
              "line": 11,
              "column": 4
            }
          },
          "moduleName": "ghost/templates/components/gh-navitem.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["inline", "gh-trim-focus-input", [], ["focus", ["subexpr", "@mut", [["get", "navItem.last", ["loc", [null, [9, 36], [9, 48]]]]], [], []], "placeholder", "Label", "value", ["subexpr", "@mut", [["get", "navItem.label", ["loc", [null, [9, 75], [9, 88]]]]], [], []]], ["loc", [null, [9, 8], [9, 90]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "navItem.errors", ["loc", [null, [10, 34], [10, 48]]]]], [], []], "property", "label"], ["loc", [null, [10, 8], [10, 67]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 4
            },
            "end": {
              "line": 15,
              "column": 4
            }
          },
          "moduleName": "ghost/templates/components/gh-navitem.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["inline", "gh-navitem-url-input", [], ["baseUrl", ["subexpr", "@mut", [["get", "baseUrl", ["loc", [null, [13, 39], [13, 46]]]]], [], []], "url", ["subexpr", "@mut", [["get", "navItem.url", ["loc", [null, [13, 51], [13, 62]]]]], [], []], "last", ["subexpr", "@mut", [["get", "navItem.last", ["loc", [null, [13, 68], [13, 80]]]]], [], []], "change", "updateUrl"], ["loc", [null, [13, 8], [13, 101]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "navItem.errors", ["loc", [null, [14, 34], [14, 48]]]]], [], []], "property", "url"], ["loc", [null, [14, 8], [14, 65]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/components/gh-navitem.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "gh-blognav-add");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "icon-add2");
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "sr-only");
          var el4 = dom.createTextNode("Add");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [["element", "action", ["addItem"], [], ["loc", [null, [19, 49], [19, 69]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 0
            },
            "end": {
              "line": 26,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/components/gh-navitem.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "gh-blognav-delete");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "icon-trash");
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "sr-only");
          var el4 = dom.createTextNode("Delete");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["element", "action", ["deleteItem", ["get", "navItem", ["loc", [null, [23, 74], [23, 81]]]]], [], ["loc", [null, [23, 52], [23, 83]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 27,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-navitem.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "gh-blognav-line");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [2]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(element2, 1, 1);
        morphs[2] = dom.createMorphAt(element2, 2, 2);
        morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "unless", [["get", "navItem.last", ["loc", [null, [1, 10], [1, 22]]]]], [], 0, null, ["loc", [null, [1, 0], [5, 11]]]], ["block", "gh-validation-status-container", [], ["tagName", "span", "class", "gh-blognav-label", "errors", ["subexpr", "@mut", [["get", "navItem.errors", ["loc", [null, [8, 85], [8, 99]]]]], [], []], "property", "label", "hasValidated", ["subexpr", "@mut", [["get", "navItem.hasValidated", ["loc", [null, [8, 130], [8, 150]]]]], [], []]], 1, null, ["loc", [null, [8, 4], [11, 39]]]], ["block", "gh-validation-status-container", [], ["tagName", "span", "class", "gh-blognav-url", "errors", ["subexpr", "@mut", [["get", "navItem.errors", ["loc", [null, [12, 83], [12, 97]]]]], [], []], "property", "url", "hasValidated", ["subexpr", "@mut", [["get", "navItem.hasValidated", ["loc", [null, [12, 126], [12, 146]]]]], [], []]], 2, null, ["loc", [null, [12, 4], [15, 39]]]], ["block", "if", [["get", "navItem.last", ["loc", [null, [18, 6], [18, 18]]]]], [], 3, 4, ["loc", [null, [18, 0], [26, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("ghost/templates/components/gh-notification", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 118
          }
        },
        "moduleName": "ghost/templates/components/gh-notification.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "gh-notification-content");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("button");
        dom.setAttribute(el1, "class", "gh-notification-close icon-x");
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "hidden");
        var el3 = dom.createTextNode("Close");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [["content", "message.message", ["loc", [null, [2, 4], [2, 23]]]], ["element", "action", ["closeNotification"], [], ["loc", [null, [4, 45], [4, 75]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/components/gh-notifications", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/components/gh-notifications.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "gh-notification", [], ["message", ["subexpr", "@mut", [["get", "message", ["loc", [null, [2, 30], [2, 37]]]]], [], []]], ["loc", [null, [2, 4], [2, 39]]]]],
        locals: ["message"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-notifications.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "messages", ["loc", [null, [1, 8], [1, 16]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/components/gh-posts-list-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-posts-list-item.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "yield", [["get", "this", ["loc", [null, [1, 8], [1, 12]]]]], [], ["loc", [null, [1, 0], [1, 14]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/components/gh-profile-image", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 8
              },
              "end": {
                "line": 9,
                "column": 8
              }
            },
            "moduleName": "ghost/templates/components/gh-profile-image.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "id", "account-image");
            dom.setAttribute(el1, "class", "gravatar-img");
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "sr-only");
            var el3 = dom.createTextNode("User image");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'style');
            return morphs;
          },
          statements: [["attribute", "style", ["get", "imageBackground", ["loc", [null, [6, 65], [6, 80]]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 4
            },
            "end": {
              "line": 10,
              "column": 4
            }
          },
          "moduleName": "ghost/templates/components/gh-profile-image.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "placeholder-img");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'style');
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["attribute", "style", ["get", "defaultImage", ["loc", [null, [3, 45], [3, 57]]]]], ["block", "if", [["get", "displayGravatar", ["loc", [null, [5, 14], [5, 29]]]]], [], 0, null, ["loc", [null, [5, 8], [9, 15]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 19,
              "column": 97
            }
          },
          "moduleName": "ghost/templates/components/gh-profile-image.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("input");
          dom.setAttribute(el1, "type", "file");
          dom.setAttribute(el1, "class", "file-uploader js-file-input");
          dom.setAttribute(el1, "name", "uploadimage");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-profile-image.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("figure");
        dom.setAttribute(el1, "class", "account-image js-file-upload");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "js-img-preview");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "edit-account-image js-img-dropzone");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("i");
        dom.setAttribute(el3, "class", "icon-photos");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "sr-only");
        var el5 = dom.createTextNode("Upload an image");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element2, 1, 1);
        morphs[1] = dom.createMorphAt(element2, 7, 7);
        return morphs;
      },
      statements: [["block", "unless", [["get", "hasUploadedImage", ["loc", [null, [2, 14], [2, 30]]]]], [], 0, null, ["loc", [null, [2, 4], [10, 15]]]], ["block", "if", [["get", "fileStorage", ["loc", [null, [19, 10], [19, 21]]]]], [], 1, null, ["loc", [null, [19, 4], [19, 104]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("ghost/templates/components/gh-search-input", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-search-input.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("button");
        dom.setAttribute(el1, "class", "gh-nav-search-button");
        var el2 = dom.createElement("i");
        dom.setAttribute(el2, "class", "icon-search");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "sr-only");
        var el3 = dom.createTextNode("Search");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createElementMorph(element0);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "gh-selectize", [], ["placeholder", "Search", "selection", ["subexpr", "@mut", [["get", "selection", ["loc", [null, [3, 14], [3, 23]]]]], [], []], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [4, 12], [4, 19]]]]], [], []], "loading", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [5, 12], [5, 21]]]]], [], []], "optionValuePath", "content.id", "optionLabelPath", "content.title", "optionGroupPath", "content.category", "openOnFocus", false, "maxItems", "1", "on-init", "onInit", "on-focus", "onFocus", "on-blur", "onBlur", "update-filter", "onType", "select-item", "openSelected"], ["loc", [null, [1, 0], [15, 32]]]], ["element", "action", ["focusInput"], [], ["loc", [null, [16, 37], [16, 60]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/components/gh-select-native", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 4
            },
            "end": {
              "line": 6,
              "column": 4
            }
          },
          "moduleName": "ghost/templates/components/gh-select-native.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          dom.setAttribute(el1, "disabled", "");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'selected');
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          return morphs;
        },
        statements: [["attribute", "selected", ["subexpr", "is-not", [["get", "selection", ["loc", [null, [3, 43], [3, 52]]]]], [], ["loc", [null, [3, 34], [3, 54]]]]], ["content", "prompt", ["loc", [null, [4, 10], [4, 20]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 4
            },
            "end": {
              "line": 13,
              "column": 4
            }
          },
          "moduleName": "ghost/templates/components/gh-select-native.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'value');
          morphs[1] = dom.createAttrMorph(element0, 'selected');
          morphs[2] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "value", ["concat", [["subexpr", "get", [["get", "item", ["loc", [null, [9, 29], [9, 33]]]], ["get", "optionValuePath", ["loc", [null, [9, 34], [9, 49]]]]], [], ["loc", [null, [9, 23], [9, 51]]]]]]], ["attribute", "selected", ["subexpr", "is-equal", [["get", "item", ["loc", [null, [10, 36], [10, 40]]]], ["get", "selection", ["loc", [null, [10, 41], [10, 50]]]]], [], ["loc", [null, [10, 25], [10, 52]]]]], ["inline", "get", [["get", "item", ["loc", [null, [11, 18], [11, 22]]]], ["get", "optionLabelPath", ["loc", [null, [11, 23], [11, 38]]]]], [], ["loc", [null, [11, 12], [11, 40]]]]],
        locals: ["item"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "modifiers",
          "modifiers": ["action"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-select-native.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("select");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createElementMorph(element2);
        morphs[1] = dom.createMorphAt(element2, 1, 1);
        morphs[2] = dom.createMorphAt(element2, 3, 3);
        return morphs;
      },
      statements: [["element", "action", ["change"], ["on", "change"], ["loc", [null, [1, 8], [1, 39]]]], ["block", "if", [["get", "prompt", ["loc", [null, [2, 10], [2, 16]]]]], [], 0, null, ["loc", [null, [2, 4], [6, 11]]]], ["block", "each", [["get", "content", ["loc", [null, [8, 12], [8, 19]]]]], [], 1, null, ["loc", [null, [8, 4], [13, 13]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("ghost/templates/components/gh-spin-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/components/gh-spin-button.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "spinner");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 6,
                "column": 4
              }
            },
            "moduleName": "ghost/templates/components/gh-spin-button.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "buttonText", ["loc", [null, [5, 8], [5, 22]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 4
              },
              "end": {
                "line": 8,
                "column": 4
              }
            },
            "moduleName": "ghost/templates/components/gh-spin-button.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createUnsafeMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "yield", ["loc", [null, [7, 8], [7, 19]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/components/gh-spin-button.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "buttonText", ["loc", [null, [4, 10], [4, 20]]]]], [], 0, 1, ["loc", [null, [4, 4], [8, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 7
          }
        },
        "moduleName": "ghost/templates/components/gh-spin-button.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "showSpinner", ["loc", [null, [1, 6], [1, 17]]]]], [], 0, 1, ["loc", [null, [1, 0], [9, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("ghost/templates/components/gh-tag-settings-form", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 12
              },
              "end": {
                "line": 4,
                "column": 129
              }
            },
            "moduleName": "ghost/templates/components/gh-tag-settings-form.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "hidden");
            var el2 = dom.createTextNode("Back");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 8
            },
            "end": {
              "line": 7,
              "column": 8
            }
          },
          "moduleName": "ghost/templates/components/gh-tag-settings-form.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h4");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "style", "width:23px;");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
          return morphs;
        },
        statements: [["block", "link-to", ["settings.tags"], ["class", "back icon-arrow-left settings-menu-header-action"], 0, null, ["loc", [null, [4, 12], [4, 141]]]], ["content", "title", ["loc", [null, [5, 16], [5, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 8
            },
            "end": {
              "line": 9,
              "column": 8
            }
          },
          "moduleName": "ghost/templates/components/gh-tag-settings-form.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h4");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "title", ["loc", [null, [8, 16], [8, 25]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 12
            },
            "end": {
              "line": 18,
              "column": 12
            }
          },
          "moduleName": "ghost/templates/components/gh-tag-settings-form.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "for", "tag-name");
          var el2 = dom.createTextNode("Name");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["inline", "gh-input", [], ["id", "tag-name", "name", "name", "type", "text", "value", ["subexpr", "@mut", [["get", "scratchName", ["loc", [null, [16, 71], [16, 82]]]]], [], []], "focus-out", ["subexpr", "action", ["setProperty", "name"], [], ["loc", [null, [16, 93], [16, 122]]]]], ["loc", [null, [16, 16], [16, 124]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "tag.errors", ["loc", [null, [17, 42], [17, 52]]]]], [], []], "property", "name"], ["loc", [null, [17, 16], [17, 70]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 12
            },
            "end": {
              "line": 25,
              "column": 12
            }
          },
          "moduleName": "ghost/templates/components/gh-tag-settings-form.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "for", "tag-slug");
          var el2 = dom.createTextNode("URL");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          return morphs;
        },
        statements: [["inline", "gh-input", [], ["id", "tag-slug", "name", "slug", "type", "text", "value", ["subexpr", "@mut", [["get", "scratchSlug", ["loc", [null, [22, 71], [22, 82]]]]], [], []], "focus-out", ["subexpr", "action", ["setProperty", "slug"], [], ["loc", [null, [22, 93], [22, 122]]]]], ["loc", [null, [22, 16], [22, 124]]]], ["inline", "gh-url-preview", [], ["prefix", "tag", "slug", ["subexpr", "@mut", [["get", "scratchSlug", ["loc", [null, [23, 51], [23, 62]]]]], [], []], "tagName", "p", "classNames", "description"], ["loc", [null, [23, 16], [23, 101]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "activeTag.errors", ["loc", [null, [24, 42], [24, 58]]]]], [], []], "property", "slug"], ["loc", [null, [24, 16], [24, 76]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 27,
              "column": 12
            },
            "end": {
              "line": 32,
              "column": 12
            }
          },
          "moduleName": "ghost/templates/components/gh-tag-settings-form.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "for", "tag-description");
          var el2 = dom.createTextNode("Description");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Maximum: ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("b");
          var el3 = dom.createTextNode("200");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" characters. You’ve used ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [7]), 3, 3);
          return morphs;
        },
        statements: [["inline", "gh-textarea", [], ["id", "tag-description", "name", "description", "value", ["subexpr", "@mut", [["get", "scratchDescription", ["loc", [null, [29, 76], [29, 94]]]]], [], []], "focus-out", ["subexpr", "action", ["setProperty", "description"], [], ["loc", [null, [29, 105], [29, 141]]]]], ["loc", [null, [29, 16], [29, 143]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "tag.errors", ["loc", [null, [30, 42], [30, 52]]]]], [], []], "property", "description"], ["loc", [null, [30, 16], [30, 77]]]], ["inline", "gh-count-down-characters", [["get", "scratchDescription", ["loc", [null, [31, 90], [31, 108]]]], 200], [], ["loc", [null, [31, 63], [31, 114]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 44,
              "column": 12
            },
            "end": {
              "line": 46,
              "column": 12
            }
          },
          "moduleName": "ghost/templates/components/gh-tag-settings-form.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "btn btn-link btn-sm tag-delete-button");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "icon-trash");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" Delete Tag");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["element", "action", ["deleteTag"], [], ["loc", [null, [45, 84], [45, 106]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 60,
              "column": 12
            },
            "end": {
              "line": 65,
              "column": 12
            }
          },
          "moduleName": "ghost/templates/components/gh-tag-settings-form.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "for", "meta-title");
          var el2 = dom.createTextNode("Meta Title");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Recommended: ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("b");
          var el3 = dom.createTextNode("70");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" characters. You’ve used ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [7]), 3, 3);
          return morphs;
        },
        statements: [["inline", "gh-input", [], ["id", "meta-title", "name", "meta_title", "type", "text", "value", ["subexpr", "@mut", [["get", "scratchMetaTitle", ["loc", [null, [62, 79], [62, 95]]]]], [], []], "focus-out", ["subexpr", "action", ["setProperty", "meta_title"], [], ["loc", [null, [62, 106], [62, 141]]]]], ["loc", [null, [62, 16], [62, 143]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "tag.errors", ["loc", [null, [63, 42], [63, 52]]]]], [], []], "property", "meta_title"], ["loc", [null, [63, 16], [63, 76]]]], ["inline", "gh-count-down-characters", [["get", "scratchMetaTitle", ["loc", [null, [64, 93], [64, 109]]]], 70], [], ["loc", [null, [64, 66], [64, 114]]]]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 67,
              "column": 12
            },
            "end": {
              "line": 72,
              "column": 12
            }
          },
          "moduleName": "ghost/templates/components/gh-tag-settings-form.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "for", "meta-description");
          var el2 = dom.createTextNode("Meta Description");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Recommended: ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("b");
          var el3 = dom.createTextNode("156");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" characters. You’ve used ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [7]), 3, 3);
          return morphs;
        },
        statements: [["inline", "gh-textarea", [], ["id", "meta-description", "name", "meta_description", "value", ["subexpr", "@mut", [["get", "scratchMetaDescription", ["loc", [null, [69, 82], [69, 104]]]]], [], []], "focus-out", ["subexpr", "action", ["setProperty", "meta_description"], [], ["loc", [null, [69, 115], [69, 156]]]]], ["loc", [null, [69, 16], [69, 158]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "tag.errors", ["loc", [null, [70, 42], [70, 52]]]]], [], []], "property", "meta_description"], ["loc", [null, [70, 16], [70, 82]]]], ["inline", "gh-count-down-characters", [["get", "scratchMetaDescription", ["loc", [null, [71, 94], [71, 116]]]], 156], [], ["loc", [null, [71, 67], [71, 122]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 85,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-tag-settings-form.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "settings-menu-content");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("ul");
        dom.setAttribute(el4, "class", "nav-list nav-list-block");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        dom.setAttribute(el5, "class", "nav-list-item");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("button");
        dom.setAttribute(el6, "type", "button");
        dom.setAttribute(el6, "class", "meta-data-button");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("b");
        var el8 = dom.createTextNode("Meta Data");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        var el8 = dom.createTextNode("Extra content for SEO and social media.");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "icon-arrow-right");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "settings-menu-header subview");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "class", "back icon-arrow-left settings-menu-header-action");
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "hidden");
        var el5 = dom.createTextNode("Back");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        var el4 = dom.createTextNode("Meta Data");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "style", "width:23px;");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "settings-menu-content");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "form-group");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Search Engine Result Preview");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "seo-preview");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "seo-preview-title");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "seo-preview-link");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "seo-preview-description");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element4, [7, 1]);
        var element6 = dom.childAt(fragment, [2]);
        var element7 = dom.childAt(element6, [1, 1]);
        var element8 = dom.childAt(element6, [3, 1]);
        var element9 = dom.childAt(element8, [5, 3]);
        var morphs = new Array(16);
        morphs[0] = dom.createAttrMorph(element1, 'class');
        morphs[1] = dom.createAttrMorph(element2, 'class');
        morphs[2] = dom.createMorphAt(element2, 1, 1);
        morphs[3] = dom.createMorphAt(element3, 1, 1);
        morphs[4] = dom.createMorphAt(element4, 1, 1);
        morphs[5] = dom.createMorphAt(element4, 3, 3);
        morphs[6] = dom.createMorphAt(element4, 5, 5);
        morphs[7] = dom.createElementMorph(element5);
        morphs[8] = dom.createMorphAt(element4, 9, 9);
        morphs[9] = dom.createAttrMorph(element6, 'class');
        morphs[10] = dom.createElementMorph(element7);
        morphs[11] = dom.createMorphAt(element8, 1, 1);
        morphs[12] = dom.createMorphAt(element8, 3, 3);
        morphs[13] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
        morphs[14] = dom.createMorphAt(dom.childAt(element9, [3]), 0, 0);
        morphs[15] = dom.createMorphAt(dom.childAt(element9, [5]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "isViewingSubview", ["loc", [null, [1, 17], [1, 33]]]], "settings-menu-pane-out-left", "settings-menu-pane-in"], [], ["loc", [null, [1, 12], [1, 89]]]], " settings-menu settings-menu-pane tag-settings-pane"]]], ["attribute", "class", ["concat", ["settings-menu-header ", ["subexpr", "if", [["get", "isMobile", ["loc", [null, [2, 42], [2, 50]]]], "subview"], [], ["loc", [null, [2, 37], [2, 62]]]]]]], ["block", "if", [["get", "isMobile", ["loc", [null, [3, 14], [3, 22]]]]], [], 0, 1, ["loc", [null, [3, 8], [9, 15]]]], ["inline", "gh-uploader", [], ["uploaded", "setCoverImage", "canceled", "clearCoverImage", "description", "Add tag image", "image", ["subexpr", "@mut", [["get", "tag.image", ["loc", [null, [12, 108], [12, 117]]]]], [], []], "initUploader", "setUploaderReference", "tagName", "section"], ["loc", [null, [12, 8], [12, 173]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "tag.errors", ["loc", [null, [14, 36], [14, 46]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "tag.hasValidated", ["loc", [null, [14, 60], [14, 76]]]]], [], []], "property", "name"], 2, null, ["loc", [null, [14, 12], [18, 30]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "tag.errors", ["loc", [null, [20, 36], [20, 46]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "tag.hasValidated", ["loc", [null, [20, 60], [20, 76]]]]], [], []], "property", "slug"], 3, null, ["loc", [null, [20, 12], [25, 30]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "tag.errors", ["loc", [null, [27, 36], [27, 46]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "tag.hasValidated", ["loc", [null, [27, 60], [27, 76]]]]], [], []], "property", "description"], 4, null, ["loc", [null, [27, 12], [32, 30]]]], ["element", "action", ["openMeta"], [], ["loc", [null, [35, 42], [35, 63]]]], ["block", "unless", [["get", "tag.isNew", ["loc", [null, [44, 22], [44, 31]]]]], [], 5, null, ["loc", [null, [44, 12], [46, 23]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "isViewingSubview", ["loc", [null, [51, 17], [51, 33]]]], "settings-menu-pane-in", "settings-menu-pane-out-right"], [], ["loc", [null, [51, 12], [51, 90]]]], " settings-menu settings-menu-pane tag-meta-settings-pane"]]], ["element", "action", ["closeMeta"], [], ["loc", [null, [53, 16], [53, 38]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "tag.errors", ["loc", [null, [60, 36], [60, 46]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "tag.hasValidated", ["loc", [null, [60, 60], [60, 76]]]]], [], []], "property", "meta_title"], 6, null, ["loc", [null, [60, 12], [65, 30]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "tag.errors", ["loc", [null, [67, 36], [67, 46]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "tag.hasValidated", ["loc", [null, [67, 60], [67, 76]]]]], [], []], "property", "meta_description"], 7, null, ["loc", [null, [67, 12], [72, 30]]]], ["content", "seoTitle", ["loc", [null, [77, 51], [77, 63]]]], ["content", "seoURL", ["loc", [null, [78, 50], [78, 60]]]], ["content", "seoDescription", ["loc", [null, [79, 57], [79, 75]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  })());
});
define("ghost/templates/components/gh-tags-management-container", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-tags-management-container.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "yield", [["get", "this", ["loc", [null, [1, 8], [1, 12]]]]], [], ["loc", [null, [1, 0], [1, 14]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/components/gh-uploader", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-uploader.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("img");
        dom.setAttribute(el1, "class", "js-upload-target");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "description");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("strong");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("input");
        dom.setAttribute(el1, "data-url", "upload");
        dom.setAttribute(el1, "class", "gh-input js-fileupload main fileupload");
        dom.setAttribute(el1, "type", "file");
        dom.setAttribute(el1, "name", "uploadimage");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'src');
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "src", ["concat", [["get", "imageSource", ["loc", [null, [1, 37], [1, 48]]]]]]], ["content", "description", ["loc", [null, [2, 25], [2, 40]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/components/gh-url-preview", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-url-preview.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "url", ["loc", [null, [1, 0], [1, 7]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/components/gh-user-active", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-user-active.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "yield", [["get", "this", ["loc", [null, [1, 8], [1, 12]]]]], [], ["loc", [null, [1, 0], [1, 14]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/components/gh-user-invited", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-user-invited.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "yield", [["get", "this", ["loc", [null, [1, 8], [1, 12]]]]], [], ["loc", [null, [1, 0], [1, 14]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/components/gh-view-title", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/components/gh-view-title.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("button");
        dom.setAttribute(el1, "class", "gh-mobilemenu-button");
        dom.setAttribute(el1, "role", "presentation");
        var el2 = dom.createElement("i");
        dom.setAttribute(el2, "class", "icon-gh");
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "sr-only");
        var el4 = dom.createTextNode("Menu");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" \n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        return morphs;
      },
      statements: [["element", "action", ["openMobileMenu"], [], ["loc", [null, [1, 8], [1, 35]]]], ["content", "yield", ["loc", [null, [2, 0], [2, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/editor/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 8
              },
              "end": {
                "line": 5,
                "column": 8
              }
            },
            "moduleName": "ghost/templates/editor/edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "gh-trim-focus-input", [], ["type", "text", "id", "entry-title", "placeholder", "Your Post Title", "value", ["subexpr", "@mut", [["get", "model.titleScratch", ["loc", [null, [4, 99], [4, 117]]]]], [], []], "tabindex", "1", "focus", ["subexpr", "@mut", [["get", "shouldFocusTitle", ["loc", [null, [4, 137], [4, 153]]]]], [], []]], ["loc", [null, [4, 12], [4, 155]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes"]
          },
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 54,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/editor/edit.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("header");
          dom.setAttribute(el1, "class", "view-header");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("section");
          dom.setAttribute(el2, "class", "view-actions");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "type", "button");
          dom.setAttribute(el3, "class", "post-settings");
          dom.setAttribute(el3, "title", "Post Settings");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "icon-settings");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("section");
          dom.setAttribute(el1, "class", "view-container view-editor");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("section");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("header");
          dom.setAttribute(el3, "class", "floatingheader");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "desktop-tabs");
          var el5 = dom.createTextNode("Markdown");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "mobile-tabs");
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("a");
          dom.setAttribute(el5, "href", "#");
          var el6 = dom.createTextNode("Markdown");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("a");
          dom.setAttribute(el5, "href", "#");
          var el6 = dom.createTextNode("Preview");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          dom.setAttribute(el4, "class", "markdown-help");
          dom.setAttribute(el4, "href", "");
          dom.setAttribute(el4, "title", "Markdown Help");
          var el5 = dom.createElement("i");
          dom.setAttribute(el5, "class", "icon-markdown");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("section");
          dom.setAttribute(el3, "id", "entry-markdown-content");
          dom.setAttribute(el3, "class", "entry-markdown-content");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("section");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("header");
          dom.setAttribute(el3, "class", "floatingheader");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "desktop-tabs");
          var el5 = dom.createTextNode("Preview");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "mobile-tabs");
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("a");
          dom.setAttribute(el5, "href", "#");
          var el6 = dom.createTextNode("Markdown");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                    ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("a");
          dom.setAttribute(el5, "href", "#");
          var el6 = dom.createTextNode("Preview");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "entry-word-count");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("section");
          dom.setAttribute(el3, "class", "entry-preview-content js-entry-preview-content");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [3]);
          var element2 = dom.childAt(element1, [1]);
          var element3 = dom.childAt(fragment, [3]);
          var element4 = dom.childAt(element3, [1]);
          var element5 = dom.childAt(element4, [1]);
          var element6 = dom.childAt(element5, [3]);
          var element7 = dom.childAt(element6, [1]);
          var element8 = dom.childAt(element6, [3]);
          var element9 = dom.childAt(element5, [5]);
          var element10 = dom.childAt(element3, [3]);
          var element11 = dom.childAt(element10, [1]);
          var element12 = dom.childAt(element11, [3]);
          var element13 = dom.childAt(element12, [1]);
          var element14 = dom.childAt(element12, [3]);
          var morphs = new Array(17);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createElementMorph(element2);
          morphs[2] = dom.createMorphAt(element1, 3, 3);
          morphs[3] = dom.createAttrMorph(element4, 'class');
          morphs[4] = dom.createAttrMorph(element7, 'class');
          morphs[5] = dom.createElementMorph(element7);
          morphs[6] = dom.createAttrMorph(element8, 'class');
          morphs[7] = dom.createElementMorph(element8);
          morphs[8] = dom.createElementMorph(element9);
          morphs[9] = dom.createMorphAt(dom.childAt(element4, [3]), 1, 1);
          morphs[10] = dom.createAttrMorph(element10, 'class');
          morphs[11] = dom.createAttrMorph(element13, 'class');
          morphs[12] = dom.createElementMorph(element13);
          morphs[13] = dom.createAttrMorph(element14, 'class');
          morphs[14] = dom.createElementMorph(element14);
          morphs[15] = dom.createMorphAt(dom.childAt(element11, [5]), 0, 0);
          morphs[16] = dom.createMorphAt(dom.childAt(element10, [3]), 1, 1);
          return morphs;
        },
        statements: [["block", "gh-view-title", [], ["classNames", "gh-editor-title", "openMobileMenu", "openMobileMenu"], 0, null, ["loc", [null, [3, 8], [5, 26]]]], ["element", "action", ["openSettingsMenu"], [], ["loc", [null, [7, 78], [7, 107]]]], ["inline", "gh-editor-save-button", [], ["isPublished", ["subexpr", "@mut", [["get", "model.isPublished", ["loc", [null, [11, 28], [11, 45]]]]], [], []], "willPublish", ["subexpr", "@mut", [["get", "willPublish", ["loc", [null, [12, 28], [12, 39]]]]], [], []], "postOrPage", ["subexpr", "@mut", [["get", "postOrPage", ["loc", [null, [13, 27], [13, 37]]]]], [], []], "isNew", ["subexpr", "@mut", [["get", "model.isNew", ["loc", [null, [14, 22], [14, 33]]]]], [], []], "save", "save", "setSaveType", "setSaveType", "delete", "openDeleteModal", "submitting", ["subexpr", "@mut", [["get", "submitting", ["loc", [null, [18, 27], [18, 37]]]]], [], []]], ["loc", [null, [10, 12], [19, 14]]]], ["attribute", "class", ["concat", ["entry-markdown js-entry-markdown ", ["subexpr", "if", [["get", "ghEditor.markdownActive", ["loc", [null, [24, 62], [24, 85]]]], "active"], [], ["loc", [null, [24, 57], [24, 96]]]]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "ghEditor.markdownActive", ["loc", [null, [28, 94], [28, 117]]]], "active"], [], ["loc", [null, [28, 89], [28, 128]]]]]]], ["element", "action", ["selectTab", "markdown"], ["target", ["get", "ghEditor", ["loc", [null, [28, 71], [28, 79]]]]], ["loc", [null, [28, 32], [28, 81]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "ghEditor.previewActive", ["loc", [null, [29, 93], [29, 115]]]], "active"], [], ["loc", [null, [29, 88], [29, 126]]]]]]], ["element", "action", ["selectTab", "preview"], ["target", ["get", "ghEditor", ["loc", [null, [29, 70], [29, 78]]]]], ["loc", [null, [29, 32], [29, 80]]]], ["element", "action", ["openModal", "markdown"], [], ["loc", [null, [31, 71], [31, 104]]]], ["inline", "gh-ed-editor", [], ["classNames", "markdown-editor js-markdown-editor", "tabindex", "1", "spellcheck", "true", "value", ["subexpr", "@mut", [["get", "model.scratch", ["loc", [null, [34, 116], [34, 129]]]]], [], []], "setEditor", "setEditor", "updateScrollInfo", "updateEditorScrollInfo", "openModal", "openModal", "onFocusIn", "autoSaveNew", "height", ["subexpr", "@mut", [["get", "height", ["loc", [null, [34, 247], [34, 253]]]]], [], []], "focus", ["subexpr", "@mut", [["get", "shouldFocusEditor", ["loc", [null, [34, 260], [34, 277]]]]], [], []]], ["loc", [null, [34, 16], [34, 279]]]], ["attribute", "class", ["concat", ["entry-preview js-entry-preview ", ["subexpr", "if", [["get", "ghEditor.previewActive", ["loc", [null, [38, 60], [38, 82]]]], "active"], [], ["loc", [null, [38, 55], [38, 93]]]]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "ghEditor.markdownActive", ["loc", [null, [42, 94], [42, 117]]]], "active"], [], ["loc", [null, [42, 89], [42, 128]]]]]]], ["element", "action", ["selectTab", "markdown"], ["target", ["get", "ghEditor", ["loc", [null, [42, 71], [42, 79]]]]], ["loc", [null, [42, 32], [42, 81]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "ghEditor.previewActive", ["loc", [null, [43, 93], [43, 115]]]], "active"], [], ["loc", [null, [43, 88], [43, 126]]]]]]], ["element", "action", ["selectTab", "preview"], ["target", ["get", "ghEditor", ["loc", [null, [43, 70], [43, 78]]]]], ["loc", [null, [43, 32], [43, 80]]]], ["inline", "gh-count-words", [["get", "model.scratch", ["loc", [null, [45, 64], [45, 77]]]]], [], ["loc", [null, [45, 47], [45, 79]]]], ["inline", "gh-ed-preview", [], ["classNames", "rendered-markdown js-rendered-markdown", "markdown", ["subexpr", "@mut", [["get", "model.scratch", ["loc", [null, [49, 29], [49, 42]]]]], [], []], "scrollPosition", ["subexpr", "@mut", [["get", "ghEditor.scrollPosition", ["loc", [null, [49, 58], [49, 81]]]]], [], []], "updateHeight", "updateHeight", "uploadStarted", "disableEditor", "uploadFinished", "enableEditor", "uploadSuccess", "handleImgUpload"], ["loc", [null, [48, 16], [50, 113]]]]],
        locals: ["ghEditor"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 55,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/editor/edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "gh-editor", [], ["editorScrollInfo", ["subexpr", "@mut", [["get", "editorScrollInfo", ["loc", [null, [1, 30], [1, 46]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [54, 14]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/error", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.2.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 20,
                  "column": 24
                },
                "end": {
                  "line": 20,
                  "column": 100
                }
              },
              "moduleName": "ghost/templates/error.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("em");
              dom.setAttribute(el1, "class", "error-stack-function");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "item.function", ["loc", [null, [20, 78], [20, 95]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 16
              },
              "end": {
                "line": 23,
                "column": 16
              }
            },
            "moduleName": "ghost/templates/error.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createTextNode("\n                        at\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "error-stack-file");
            var el3 = dom.createTextNode("(");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(")");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(element0, 1, 1);
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["get", "item.function", ["loc", [null, [20, 30], [20, 43]]]]], [], 0, null, ["loc", [null, [20, 24], [20, 107]]]], ["content", "item.at", ["loc", [null, [21, 56], [21, 67]]]]],
          locals: ["item"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 4
            },
            "end": {
              "line": 26,
              "column": 4
            }
          },
          "moduleName": "ghost/templates/error.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("section");
          dom.setAttribute(el1, "class", "error-stack");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h3");
          var el3 = dom.createTextNode("Stack Trace");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          var el3 = dom.createElement("strong");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          dom.setAttribute(el2, "class", "error-stack-list");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element1, [3, 0]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element1, [5]), 1, 1);
          return morphs;
        },
        statements: [["content", "message", ["loc", [null, [15, 23], [15, 34]]]], ["block", "each", [["get", "stack", ["loc", [null, [17, 24], [17, 29]]]]], [], 0, null, ["loc", [null, [17, 16], [23, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/error.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "gh-view");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2, "class", "error-content error-404 js-error-container");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("section");
        dom.setAttribute(el3, "class", "error-details");
        var el4 = dom.createTextNode("\n             ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("img");
        dom.setAttribute(el4, "class", "error-ghost");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n             ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("section");
        dom.setAttribute(el4, "class", "error-message");
        var el5 = dom.createTextNode("\n                 ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h1");
        dom.setAttribute(el5, "class", "error-code");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                 ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h2");
        dom.setAttribute(el5, "class", "error-description");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n             ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var element3 = dom.childAt(element2, [1, 1]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element3, [3]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element4, 'src');
        morphs[1] = dom.createAttrMorph(element4, 'srcset');
        morphs[2] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element5, [3]), 0, 0);
        morphs[4] = dom.createMorphAt(element2, 3, 3);
        return morphs;
      },
      statements: [["attribute", "src", ["concat", [["subexpr", "gh-path", ["admin", "/img/404-ghost@2x.png"], [], ["loc", [null, [4, 43], [4, 86]]]]]]], ["attribute", "srcset", ["concat", [["subexpr", "gh-path", ["admin", "/img/404-ghost.png"], [], ["loc", [null, [4, 96], [4, 136]]]], " 1x, ", ["subexpr", "gh-path", ["admin", "/img/404-ghost@2x.png"], [], ["loc", [null, [4, 141], [4, 184]]]], " 2x"]]], ["content", "code", ["loc", [null, [6, 40], [6, 48]]]], ["content", "message", ["loc", [null, [7, 47], [7, 58]]]], ["block", "if", [["get", "stack", ["loc", [null, [12, 10], [12, 15]]]]], [], 0, null, ["loc", [null, [12, 4], [26, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/modals/copy-html", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/modals/copy-html.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "textarea", [], ["value", ["subexpr", "@mut", [["get", "generatedHTML", ["loc", [null, [4, 21], [4, 34]]]]], [], []], "rows", "6"], ["loc", [null, [4, 4], [4, 45]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/modals/copy-html.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "gh-modal-dialog", [], ["action", "closeModal", "showClose", true, "type", "action", "title", "Generated HTML", "confirm", ["subexpr", "@mut", [["get", "confirm", ["loc", [null, [2, 35], [2, 42]]]]], [], []], "class", "copy-html"], 0, null, ["loc", [null, [1, 0], [6, 20]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/modals/delete-all", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/modals/delete-all.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("This is permanent! No backups, no restores, no magic undo button. ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("br");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" We warned you, ok?");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/modals/delete-all.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "gh-modal-dialog", [], ["action", "closeModal", "type", "action", "style", "wide", "title", "Would you really like to delete all content from your blog?", "confirm", ["subexpr", "@mut", [["get", "confirm", ["loc", [null, [2, 80], [2, 87]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [6, 20]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/modals/delete-post", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/modals/delete-post.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("You're about to delete \"");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("strong");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\".");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("br");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("This is permanent! No backups, no restores, no magic undo button. ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("br");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" We warned you, ok?");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.title", ["loc", [null, [4, 39], [4, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/modals/delete-post.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "gh-modal-dialog", [], ["action", "closeModal", "showClose", true, "type", "action", "style", "wide", "title", "Are you sure you want to delete this post?", "confirm", ["subexpr", "@mut", [["get", "confirm", ["loc", [null, [2, 63], [2, 70]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [6, 20]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/modals/delete-tag", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 6,
                "column": 4
              }
            },
            "moduleName": "ghost/templates/modals/delete-tag.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("strong");
            var el2 = dom.createTextNode("WARNING:");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "red");
            var el2 = dom.createTextNode("This tag is attached to ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(".");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" You're about to delete \"");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("strong");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\". This is permanent! No backups, no restores, no magic undo button. We warned you, ok?\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [3]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(element0, 1, 1);
            morphs[1] = dom.createMorphAt(element0, 3, 3);
            morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5]), 0, 0);
            return morphs;
          },
          statements: [["content", "model.count.posts", ["loc", [null, [5, 76], [5, 97]]]], ["content", "postInflection", ["loc", [null, [5, 98], [5, 116]]]], ["content", "model.name", ["loc", [null, [5, 157], [5, 171]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 4
              },
              "end": {
                "line": 8,
                "column": 4
              }
            },
            "moduleName": "ghost/templates/modals/delete-tag.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("strong");
            var el2 = dom.createTextNode("WARNING:");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" You're about to delete \"");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("strong");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\". This is permanent! No backups, no restores, no magic undo button. We warned you, ok?\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
            return morphs;
          },
          statements: [["content", "model.name", ["loc", [null, [7, 66], [7, 80]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/modals/delete-tag.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "model.count.posts", ["loc", [null, [4, 10], [4, 27]]]]], [], 0, 1, ["loc", [null, [4, 4], [8, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/modals/delete-tag.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "gh-modal-dialog", [], ["action", "closeModal", "showClose", true, "type", "action", "style", "wide", "title", "Are you sure you want to delete this tag?", "confirm", ["subexpr", "@mut", [["get", "confirm", ["loc", [null, [2, 62], [2, 69]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [9, 20]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/modals/delete-user", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.2.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 8
                },
                "end": {
                  "line": 7,
                  "column": 8
                }
              },
              "moduleName": "ghost/templates/modals/delete-user.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("strong");
              var el2 = dom.createTextNode("WARNING:");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "red");
              var el2 = dom.createTextNode("This user is the author of ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(".");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" All posts and user data will be deleted. There is no way to recover this.\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [3]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(element0, 1, 1);
              morphs[1] = dom.createMorphAt(element0, 3, 3);
              return morphs;
            },
            statements: [["content", "userPostCount.count", ["loc", [null, [6, 83], [6, 106]]]], ["content", "userPostCount.inflection", ["loc", [null, [6, 107], [6, 135]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.2.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 7,
                  "column": 8
                },
                "end": {
                  "line": 9,
                  "column": 8
                }
              },
              "moduleName": "ghost/templates/modals/delete-user.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("strong");
              var el2 = dom.createTextNode("WARNING:");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" All user data will be deleted. There is no way to recover this.\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 10,
                "column": 4
              }
            },
            "moduleName": "ghost/templates/modals/delete-user.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "userPostCount.count", ["loc", [null, [5, 14], [5, 33]]]]], [], 0, 1, ["loc", [null, [5, 8], [9, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/modals/delete-user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "unless", [["get", "userPostCount.isPending", ["loc", [null, [4, 14], [4, 37]]]]], [], 0, null, ["loc", [null, [4, 4], [10, 15]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/modals/delete-user.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "gh-modal-dialog", [], ["action", "closeModal", "showClose", true, "type", "action", "style", "wide", "title", "Are you sure you want to delete this user?", "confirm", ["subexpr", "@mut", [["get", "confirm", ["loc", [null, [2, 63], [2, 70]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [12, 20]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/modals/invite-new-user", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 8
              },
              "end": {
                "line": 10,
                "column": 8
              }
            },
            "moduleName": "ghost/templates/modals/invite-new-user.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            dom.setAttribute(el1, "for", "new-user-email");
            var el2 = dom.createTextNode("Email Address");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            return morphs;
          },
          statements: [["inline", "gh-input", [], ["enter", "confirmAccept", "class", "email", "id", "new-user-email", "type", "email", "placeholder", "Email Address", "name", "email", "autofocus", "autofocus", "autocapitalize", "off", "autocorrect", "off", "value", ["subexpr", "@mut", [["get", "email", ["loc", [null, [8, 57], [8, 62]]]]], [], []], "focusOut", ["subexpr", "action", ["validate", "email"], [], ["loc", [null, [8, 72], [8, 99]]]]], ["loc", [null, [7, 12], [8, 101]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [9, 38], [9, 44]]]]], [], []], "property", "email"], ["loc", [null, [9, 12], [9, 63]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 26,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/modals/invite-new-user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("fieldset");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "form-group for-select");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "for", "new-user-role");
          var el4 = dom.createTextNode("Role");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "gh-select");
          dom.setAttribute(el3, "tabindex", "0");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3, 3]), 1, 1);
          return morphs;
        },
        statements: [["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [5, 32], [5, 38]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "hasValidated", ["loc", [null, [5, 52], [5, 64]]]]], [], []], "property", "email"], 0, null, ["loc", [null, [5, 8], [10, 26]]]], ["inline", "gh-select-native", [], ["id", "new-user-role", "content", ["subexpr", "@mut", [["get", "roles", ["loc", [null, [16, 28], [16, 33]]]]], [], []], "optionValuePath", "id", "optionLabelPath", "name", "selection", ["subexpr", "@mut", [["get", "role", ["loc", [null, [19, 30], [19, 34]]]]], [], []], "action", "setRole"], ["loc", [null, [15, 16], [21, 18]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 27,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/modals/invite-new-user.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "gh-modal-dialog", [], ["action", "closeModal", "showClose", true, "type", "action", "title", "Invite a New User", "confirm", ["subexpr", "@mut", [["get", "confirm", ["loc", [null, [2, 38], [2, 45]]]]], [], []], "class", "invite-new-user"], 0, null, ["loc", [null, [1, 0], [26, 20]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/modals/leave-editor", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes"]
          },
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/modals/leave-editor.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Hey there! It looks like you're in the middle of writing something and you haven't saved all of your\n    content.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Save before you go!");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/modals/leave-editor.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "gh-modal-dialog", [], ["action", "closeModal", "showClose", true, "type", "action", "style", "wide", "title", "Are you sure you want to leave this page?", "confirm", ["subexpr", "@mut", [["get", "confirm", ["loc", [null, [2, 62], [2, 69]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [9, 20]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/modals/markdown", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 77,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/modals/markdown.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("section");
          dom.setAttribute(el1, "class", "markdown-help-container");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("table");
          dom.setAttribute(el2, "class", "modal-markdown-help-table");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("thead");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createTextNode("Markdown");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createTextNode("Result");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("th");
          var el6 = dom.createTextNode("Shortcut");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tbody");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("**text**");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createElement("strong");
          var el7 = dom.createTextNode("Bold");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("Ctrl/⌘ + B ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("*text*");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createElement("em");
          var el7 = dom.createTextNode("Emphasize");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("Ctrl/⌘ + I");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("~~text~~");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createElement("del");
          var el7 = dom.createTextNode("Strike-through");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("Ctrl + Alt + U");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("[title](http://)");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createElement("a");
          dom.setAttribute(el6, "href", "#");
          var el7 = dom.createTextNode("Link");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("Ctrl/⌘ + K");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("`code`");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createElement("code");
          var el7 = dom.createTextNode("Inline Code");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("Ctrl/⌘ + Shift + K");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("![alt](http://)");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("Image");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("Ctrl/⌘ + Shift + I");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("* item");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("List");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("Ctrl + L");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("> quote");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("Blockquote");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("Ctrl + Q");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("==Highlight==");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createElement("mark");
          var el7 = dom.createTextNode("Highlight");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("# Heading");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("H1");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("## Heading");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("H2");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("Ctrl/⌘ + H");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("tr");
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("### Heading");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("H3");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n                ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("td");
          var el6 = dom.createTextNode("Ctrl/⌘ + H (x2)");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        For further Markdown syntax reference: ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2, "href", "http://support.ghost.org/markdown-guide/");
          dom.setAttribute(el2, "target", "_blank");
          var el3 = dom.createTextNode("Markdown Documentation");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 78,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/modals/markdown.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "gh-modal-dialog", [], ["action", "closeModal", "showClose", true, "style", "wide", "title", "Markdown Help"], 0, null, ["loc", [null, [1, 0], [77, 20]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/modals/signin", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 12
              },
              "end": {
                "line": 8,
                "column": 127
              }
            },
            "moduleName": "ghost/templates/modals/signin.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Log in");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "modifiers",
            "modifiers": ["action"]
          },
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/modals/signin.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("form");
          dom.setAttribute(el1, "id", "login");
          dom.setAttribute(el1, "class", "login-form");
          dom.setAttribute(el1, "method", "post");
          dom.setAttribute(el1, "novalidate", "novalidate");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "password-wrap");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n       ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
          morphs[2] = dom.createMorphAt(element0, 3, 3);
          return morphs;
        },
        statements: [["element", "action", ["validateAndAuthenticate"], ["on", "submit"], ["loc", [null, [4, 82], [4, 130]]]], ["inline", "input", [], ["class", "gh-input password", "type", "password", "placeholder", "Password", "name", "password", "value", ["subexpr", "@mut", [["get", "password", ["loc", [null, [6, 111], [6, 119]]]]], [], []]], ["loc", [null, [6, 16], [6, 121]]]], ["block", "gh-spin-button", [], ["class", "btn btn-blue", "type", "submit", "action", "validateAndAuthenticate", "submitting", ["subexpr", "@mut", [["get", "submitting", ["loc", [null, [8, 109], [8, 119]]]]], [], []]], 0, null, ["loc", [null, [8, 12], [8, 146]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/modals/signin.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "gh-modal-dialog", [], ["action", "closeModal", "showClose", true, "type", "action", "style", "wide", "animation", "fade", "title", "Please re-authenticate", "confirm", ["subexpr", "@mut", [["get", "confirm", ["loc", [null, [2, 43], [2, 50]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [11, 20]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/modals/transfer-owner", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/modals/transfer-owner.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Are you sure you want to transfer the ownership of this blog? You will not be able to undo this action.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/modals/transfer-owner.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "gh-modal-dialog", [], ["action", "closeModal", "showClose", true, "type", "action", "style", "wide", "title", "Transfer Ownership", "confirm", ["subexpr", "@mut", [["get", "confirm", ["loc", [null, [2, 39], [2, 46]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [6, 20]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/modals/upload", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/modals/upload.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("section");
          dom.setAttribute(el1, "class", "js-drop-zone");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("img");
          dom.setAttribute(el2, "class", "js-upload-target");
          dom.setAttribute(el2, "alt", "logo");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("input");
          dom.setAttribute(el2, "data-url", "upload");
          dom.setAttribute(el2, "class", "js-fileupload main");
          dom.setAttribute(el2, "type", "file");
          dom.setAttribute(el2, "name", "uploadimage");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element0, [3]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'src');
          morphs[1] = dom.createAttrMorph(element2, 'accept');
          return morphs;
        },
        statements: [["attribute", "src", ["concat", [["get", "src", ["loc", [null, [3, 43], [3, 46]]]]]]], ["attribute", "accept", ["concat", [["get", "acceptEncoding", ["loc", [null, [4, 99], [4, 113]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/modals/upload.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "gh-upload-modal", [], ["action", "closeModal", "close", true, "type", "action", "style", "wide", "model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 83], [1, 88]]]]], [], []], "imageType", ["subexpr", "@mut", [["get", "imageType", ["loc", [null, [1, 99], [1, 108]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [7, 20]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/post-settings-menu", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 16
              },
              "end": {
                "line": 17,
                "column": 16
              }
            },
            "moduleName": "ghost/templates/post-settings-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "class", "post-view-link");
            dom.setAttribute(el1, "target", "_blank");
            var el2 = dom.createTextNode("\n                    View post ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "icon-external");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element4, 'href');
            return morphs;
          },
          statements: [["attribute", "href", ["concat", [["get", "model.absoluteUrl", ["loc", [null, [14, 66], [14, 83]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 16
              },
              "end": {
                "line": 21,
                "column": 16
              }
            },
            "moduleName": "ghost/templates/post-settings-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "class", "post-view-link");
            dom.setAttribute(el1, "target", "_blank");
            var el2 = dom.createTextNode("\n                    Preview ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "icon-external");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element3, 'href');
            return morphs;
          },
          statements: [["attribute", "href", ["concat", [["get", "model.previewUrl", ["loc", [null, [18, 66], [18, 82]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 12
              },
              "end": {
                "line": 37,
                "column": 12
              }
            },
            "moduleName": "ghost/templates/post-settings-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            dom.setAttribute(el1, "for", "post-setting-date");
            var el2 = dom.createTextNode("Publish Date");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            return morphs;
          },
          statements: [["inline", "gh-datetime-input", [], ["value", ["subexpr", "@mut", [["get", "model.published_at", ["loc", [null, [31, 42], [31, 60]]]]], [], []], "update", ["subexpr", "action", ["setPublishedAt"], [], ["loc", [null, [32, 43], [32, 68]]]], "inputClass", "post-setting-date", "inputId", "post-setting-date", "inputName", "post-setting-date"], ["loc", [null, [31, 16], [35, 67]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [36, 42], [36, 54]]]]], [], []], "property", "post-setting-date"], ["loc", [null, [36, 16], [36, 85]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 54,
                "column": 12
              },
              "end": {
                "line": 71,
                "column": 12
              }
            },
            "moduleName": "ghost/templates/post-settings-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "form-group for-select");
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "for", "author-list");
            var el3 = dom.createTextNode("Author");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "input-icon icon-user");
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "gh-select");
            dom.setAttribute(el3, "tabindex", "0");
            var el4 = dom.createTextNode("\n                    ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n                    ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3, 1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "gh-select-native", [], ["name", "post-setting-author", "id", "author-list", "content", ["subexpr", "@mut", [["get", "authors", ["loc", [null, [62, 32], [62, 39]]]]], [], []], "optionValuePath", "id", "optionLabelPath", "name", "selection", ["subexpr", "@mut", [["get", "selectedAuthor", ["loc", [null, [65, 34], [65, 48]]]]], [], []], "action", "changeAuthor"], ["loc", [null, [59, 20], [67, 22]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 74,
                "column": 16
              },
              "end": {
                "line": 80,
                "column": 16
              }
            },
            "moduleName": "ghost/templates/post-settings-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("b");
            var el3 = dom.createTextNode("Meta Data");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            var el3 = dom.createTextNode("Extra content for SEO and social media.");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "icon-arrow-right");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child5 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.2.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 112,
                    "column": 12
                  },
                  "end": {
                    "line": 117,
                    "column": 12
                  }
                },
                "moduleName": "ghost/templates/post-settings-menu.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("label");
                dom.setAttribute(el1, "for", "meta-title");
                var el2 = dom.createTextNode("Meta Title");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("p");
                var el2 = dom.createTextNode("Recommended: ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("b");
                var el3 = dom.createTextNode("70");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" characters. You’ve used ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[1] = dom.createMorphAt(dom.childAt(fragment, [5]), 3, 3);
                morphs[2] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                return morphs;
              },
              statements: [["inline", "gh-input", [], ["class", "post-setting-meta-title", "id", "meta-title", "value", ["subexpr", "@mut", [["get", "metaTitleScratch", ["loc", [null, [114, 81], [114, 97]]]]], [], []], "name", "post-setting-meta-title", "focus-out", "setMetaTitle", "stopEnterKeyDownPropagation", "true"], ["loc", [null, [114, 16], [114, 190]]]], ["inline", "gh-count-down-characters", [["get", "metaTitleScratch", ["loc", [null, [115, 93], [115, 109]]]], 70], [], ["loc", [null, [115, 66], [115, 114]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [116, 42], [116, 54]]]]], [], []], "property", "meta_title"], ["loc", [null, [116, 16], [116, 78]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.2.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 119,
                    "column": 12
                  },
                  "end": {
                    "line": 124,
                    "column": 12
                  }
                },
                "moduleName": "ghost/templates/post-settings-menu.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("label");
                dom.setAttribute(el1, "for", "meta-description");
                var el2 = dom.createTextNode("Meta Description");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("p");
                var el2 = dom.createTextNode("Recommended: ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("b");
                var el3 = dom.createTextNode("156");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" characters. You’ve used ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[1] = dom.createMorphAt(dom.childAt(fragment, [5]), 3, 3);
                morphs[2] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                return morphs;
              },
              statements: [["inline", "gh-textarea", [], ["class", "gh-input post-setting-meta-description", "id", "meta-description", "value", ["subexpr", "@mut", [["get", "metaDescriptionScratch", ["loc", [null, [121, 105], [121, 127]]]]], [], []], "name", "post-setting-meta-description", "focus-out", "setMetaDescription", "stopEnterKeyDownPropagation", "true"], ["loc", [null, [121, 16], [121, 232]]]], ["inline", "gh-count-down-characters", [["get", "metaDescriptionScratch", ["loc", [null, [122, 94], [122, 116]]]], 156], [], ["loc", [null, [122, 67], [122, 122]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [123, 42], [123, 54]]]]], [], []], "property", "meta_description"], ["loc", [null, [123, 16], [123, 84]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.2.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 103,
                  "column": 8
                },
                "end": {
                  "line": 136,
                  "column": 8
                }
              },
              "moduleName": "ghost/templates/post-settings-menu.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "settings-menu-header subview");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("button");
              dom.setAttribute(el2, "class", "back icon-arrow-left settings-menu-header-action");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "hidden");
              var el4 = dom.createTextNode("Back");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("h4");
              var el3 = dom.createTextNode("Meta Data");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "style", "width:23px;");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "settings-menu-content");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("form");
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "form-group");
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("label");
              var el5 = dom.createTextNode("Search Engine Result Preview");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("div");
              dom.setAttribute(el4, "class", "seo-preview");
              var el5 = dom.createTextNode("\n                    ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("div");
              dom.setAttribute(el5, "class", "seo-preview-title");
              var el6 = dom.createComment("");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                    ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("div");
              dom.setAttribute(el5, "class", "seo-preview-link");
              var el6 = dom.createComment("");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                    ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("div");
              dom.setAttribute(el5, "class", "seo-preview-description");
              var el6 = dom.createComment("");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n            ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1, 1]);
              var element1 = dom.childAt(fragment, [3, 1]);
              var element2 = dom.childAt(element1, [5, 3]);
              var morphs = new Array(7);
              morphs[0] = dom.createElementMorph(element0);
              morphs[1] = dom.createElementMorph(element1);
              morphs[2] = dom.createMorphAt(element1, 1, 1);
              morphs[3] = dom.createMorphAt(element1, 3, 3);
              morphs[4] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
              morphs[5] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
              morphs[6] = dom.createMorphAt(dom.childAt(element2, [5]), 0, 0);
              return morphs;
            },
            statements: [["element", "action", ["closeSubview"], [], ["loc", [null, [105, 20], [105, 45]]]], ["element", "action", ["discardEnter"], ["on", "submit"], ["loc", [null, [111, 18], [111, 55]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [112, 36], [112, 48]]]]], [], []], "property", "meta_title"], 0, null, ["loc", [null, [112, 12], [117, 30]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [119, 36], [119, 48]]]]], [], []], "property", "meta_description"], 1, null, ["loc", [null, [119, 12], [124, 30]]]], ["content", "seoTitle", ["loc", [null, [129, 51], [129, 63]]]], ["content", "seoURL", ["loc", [null, [130, 50], [130, 60]]]], ["content", "seoDescription", ["loc", [null, [131, 57], [131, 75]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 102,
                "column": 4
              },
              "end": {
                "line": 137,
                "column": 4
              }
            },
            "moduleName": "ghost/templates/post-settings-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isViewingSubview", ["loc", [null, [103, 14], [103, 30]]]]], [], 0, null, ["loc", [null, [103, 8], [136, 15]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 140,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/post-settings-menu.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "id", "entry-controls");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "settings-menu-header");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("h4");
          var el5 = dom.createTextNode("Post Settings");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4, "class", "close icon-x settings-menu-header-action");
          var el5 = dom.createElement("span");
          dom.setAttribute(el5, "class", "hidden");
          var el6 = dom.createTextNode("Close");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "settings-menu-content");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("form");
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "form-group");
          var el6 = dom.createTextNode("\n                ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("label");
          dom.setAttribute(el6, "for", "url");
          var el7 = dom.createTextNode("Post URL");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("span");
          dom.setAttribute(el6, "class", "input-icon icon-link");
          var el7 = dom.createTextNode("\n                    ");
          dom.appendChild(el6, el7);
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "form-group");
          var el6 = dom.createTextNode("\n                ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("label");
          dom.setAttribute(el6, "for", "tag-input");
          var el7 = dom.createTextNode("Tags");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n                ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("ul");
          dom.setAttribute(el5, "class", "nav-list nav-list-block");
          var el6 = dom.createTextNode("\n");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("            ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "form-group for-checkbox");
          var el6 = dom.createTextNode("\n                ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("label");
          dom.setAttribute(el6, "class", "checkbox");
          dom.setAttribute(el6, "for", "static-page");
          var el7 = dom.createTextNode("\n                    ");
          dom.appendChild(el6, el7);
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                    ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("span");
          dom.setAttribute(el7, "class", "input-toggle-component");
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                    ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("p");
          var el8 = dom.createTextNode("Turn this post into a static page");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n\n                ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("label");
          dom.setAttribute(el6, "class", "checkbox");
          dom.setAttribute(el6, "for", "featured");
          var el7 = dom.createTextNode("\n                    ");
          dom.appendChild(el6, el7);
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                    ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("span");
          dom.setAttribute(el7, "class", "input-toggle-component");
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                    ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("p");
          var el8 = dom.createTextNode("Feature this post");
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n                ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n            ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element5 = dom.childAt(fragment, [0]);
          var element6 = dom.childAt(element5, [1]);
          var element7 = dom.childAt(element6, [1, 3]);
          var element8 = dom.childAt(element6, [3]);
          var element9 = dom.childAt(element8, [3]);
          var element10 = dom.childAt(element9, [1]);
          var element11 = dom.childAt(element9, [11]);
          var element12 = dom.childAt(element11, [1]);
          var element13 = dom.childAt(element11, [3]);
          var element14 = dom.childAt(element5, [3]);
          var morphs = new Array(16);
          morphs[0] = dom.createAttrMorph(element6, 'class');
          morphs[1] = dom.createElementMorph(element7);
          morphs[2] = dom.createMorphAt(element8, 1, 1);
          morphs[3] = dom.createMorphAt(element10, 3, 3);
          morphs[4] = dom.createMorphAt(dom.childAt(element10, [5]), 1, 1);
          morphs[5] = dom.createMorphAt(element10, 7, 7);
          morphs[6] = dom.createMorphAt(element9, 3, 3);
          morphs[7] = dom.createMorphAt(dom.childAt(element9, [5]), 3, 3);
          morphs[8] = dom.createMorphAt(element9, 7, 7);
          morphs[9] = dom.createMorphAt(dom.childAt(element9, [9]), 1, 1);
          morphs[10] = dom.createElementMorph(element12);
          morphs[11] = dom.createMorphAt(element12, 1, 1);
          morphs[12] = dom.createElementMorph(element13);
          morphs[13] = dom.createMorphAt(element13, 1, 1);
          morphs[14] = dom.createAttrMorph(element14, 'class');
          morphs[15] = dom.createMorphAt(element14, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "isViewingSubview", ["loc", [null, [3, 21], [3, 37]]]], "settings-menu-pane-out-left", "settings-menu-pane-in"], [], ["loc", [null, [3, 16], [3, 93]]]], " settings-menu settings-menu-pane"]]], ["element", "action", ["closeMenus"], [], ["loc", [null, [6, 69], [6, 92]]]], ["inline", "gh-uploader", [], ["uploaded", "setCoverImage", "canceled", "clearCoverImage", "description", "Add post image", "image", ["subexpr", "@mut", [["get", "model.image", ["loc", [null, [9, 113], [9, 124]]]]], [], []], "uploaderReference", ["subexpr", "@mut", [["get", "uploaderReference", ["loc", [null, [9, 143], [9, 160]]]]], [], []], "tagName", "section"], ["loc", [null, [9, 12], [9, 180]]]], ["block", "if", [["get", "model.isPublished", ["loc", [null, [13, 22], [13, 39]]]]], [], 0, 1, ["loc", [null, [13, 16], [21, 23]]]], ["inline", "gh-input", [], ["class", "post-setting-slug", "id", "url", "value", ["subexpr", "@mut", [["get", "slugValue", ["loc", [null, [24, 72], [24, 81]]]]], [], []], "name", "post-setting-slug", "focus-out", "updateSlug", "selectOnClick", "true", "stopEnterKeyDownPropagation", "true"], ["loc", [null, [24, 20], [24, 187]]]], ["inline", "gh-url-preview", [], ["slug", ["subexpr", "@mut", [["get", "slugValue", ["loc", [null, [26, 38], [26, 47]]]]], [], []], "tagName", "p", "classNames", "description"], ["loc", [null, [26, 16], [26, 86]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [29, 36], [29, 48]]]]], [], []], "property", "post-setting-date"], 2, null, ["loc", [null, [29, 12], [37, 30]]]], ["inline", "gh-selectize", [], ["id", "tag-input", "multiple", true, "selection", ["subexpr", "@mut", [["get", "model.tags", ["loc", [null, [44, 30], [44, 40]]]]], [], []], "content", ["subexpr", "@mut", [["get", "availableTags", ["loc", [null, [45, 28], [45, 41]]]]], [], []], "optionValuePath", "content.uuid", "optionLabelPath", "content.name", "openOnFocus", false, "create-item", "addTag", "remove-item", "removeTag", "plugins", "remove_button, drag_drop"], ["loc", [null, [41, 16], [51, 56]]]], ["block", "unless", [["get", "session.user.isAuthor", ["loc", [null, [54, 22], [54, 43]]]]], [], 3, null, ["loc", [null, [54, 12], [71, 23]]]], ["block", "gh-tab", [], ["tagName", "li", "classNames", "nav-list-item"], 4, null, ["loc", [null, [74, 16], [80, 27]]]], ["element", "action", ["togglePage"], ["bubbles", "false"], ["loc", [null, [84, 58], [84, 97]]]], ["inline", "input", [], ["type", "checkbox", "name", "static-page", "id", "static-page", "class", "gh-input post-setting-static-page", "checked", ["subexpr", "@mut", [["get", "model.page", ["loc", [null, [85, 130], [85, 140]]]]], [], []]], ["loc", [null, [85, 20], [85, 142]]]], ["element", "action", ["toggleFeatured"], ["bubbles", "false"], ["loc", [null, [90, 55], [90, 98]]]], ["inline", "input", [], ["type", "checkbox", "name", "featured", "id", "featured", "class", "gh-input post-setting-featured", "checked", ["subexpr", "@mut", [["get", "model.featured", ["loc", [null, [91, 121], [91, 135]]]]], [], []]], ["loc", [null, [91, 20], [91, 137]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "isViewingSubview", ["loc", [null, [101, 21], [101, 37]]]], "settings-menu-pane-in", "settings-menu-pane-out-right"], [], ["loc", [null, [101, 16], [101, 94]]]], " settings-menu settings-menu-pane"]]], ["block", "gh-tab-pane", [], [], 5, null, ["loc", [null, [102, 4], [137, 20]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4, child5]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 141,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/post-settings-menu.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "gh-tabs-manager", [], ["selected", "showSubview", "id", "entry-controls", "class", "settings-menu-container"], 0, null, ["loc", [null, [1, 0], [140, 20]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/posts/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 12
              },
              "end": {
                "line": 5,
                "column": 130
              }
            },
            "moduleName": "ghost/templates/posts/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "class", "btn btn-green btn-lg");
            dom.setAttribute(el1, "title", "New Post");
            var el2 = dom.createTextNode("Write a new Post");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 4
            },
            "end": {
              "line": 7,
              "column": 4
            }
          },
          "moduleName": "ghost/templates/posts/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "no-posts");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h3");
          var el3 = dom.createTextNode("You Haven't Written Any Posts Yet!");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          return morphs;
        },
        statements: [["block", "link-to", ["editor.new"], [], 0, null, ["loc", [null, [5, 12], [5, 142]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/posts/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "no-posts-box");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["block", "if", [["get", "noPosts", ["loc", [null, [2, 10], [2, 17]]]]], [], 0, null, ["loc", [null, [2, 4], [7, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/posts/post", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 4
            },
            "end": {
              "line": 2,
              "column": 119
            }
          },
          "moduleName": "ghost/templates/posts/post.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "icon-edit");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 12
              },
              "end": {
                "line": 10,
                "column": 12
              }
            },
            "moduleName": "ghost/templates/posts/post.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "model.title", ["loc", [null, [9, 16], [9, 31]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/posts/post.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "wrapper");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h1");
          dom.setAttribute(el2, "class", "content-preview-title");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(element0, 3, 3);
          return morphs;
        },
        statements: [["block", "link-to", ["editor.edit", ["get", "model.id", ["loc", [null, [8, 37], [8, 45]]]]], [], 0, null, ["loc", [null, [8, 12], [10, 24]]]], ["inline", "gh-format-html", [["get", "model.html", ["loc", [null, [12, 25], [12, 35]]]]], [], ["loc", [null, [12, 8], [12, 37]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/posts/post.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "post-controls");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "link-to", ["editor.edit", ["get", "model.id", ["loc", [null, [2, 29], [2, 37]]]]], ["class", "btn btn-minor post-edit", "title", "Edit this post"], 0, null, ["loc", [null, [2, 4], [2, 131]]]], ["block", "gh-content-preview-content", [], ["tagName", "section", "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [5, 56], [5, 61]]]]], [], []]], 1, null, ["loc", [null, [5, 0], [14, 31]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("ghost/templates/posts", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 3,
                "column": 74
              }
            },
            "moduleName": "ghost/templates/posts.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("Content");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 8
              },
              "end": {
                "line": 5,
                "column": 80
              }
            },
            "moduleName": "ghost/templates/posts.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("New Post");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.2.0",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 24,
                          "column": 40
                        },
                        "end": {
                          "line": 26,
                          "column": 40
                        }
                      },
                      "moduleName": "ghost/templates/posts.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                                            ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("span");
                      dom.setAttribute(el1, "class", "page");
                      var el2 = dom.createTextNode("Page");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes() {
                      return [];
                    },
                    statements: [],
                    locals: [],
                    templates: []
                  };
                })();
                var child1 = (function () {
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.2.0",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 26,
                          "column": 40
                        },
                        "end": {
                          "line": 30,
                          "column": 40
                        }
                      },
                      "moduleName": "ghost/templates/posts.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                                            ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("time");
                      dom.setAttribute(el1, "class", "date published");
                      var el2 = dom.createTextNode("\n                                                Published ");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createTextNode("\n                                            ");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var element0 = dom.childAt(fragment, [1]);
                      var morphs = new Array(2);
                      morphs[0] = dom.createAttrMorph(element0, 'datetime');
                      morphs[1] = dom.createMorphAt(element0, 1, 1);
                      return morphs;
                    },
                    statements: [["attribute", "datetime", ["concat", [["get", "post.published_at", ["loc", [null, [27, 62], [27, 79]]]]]]], ["inline", "gh-format-timeago", [["get", "post.published_at", ["loc", [null, [28, 78], [28, 95]]]]], [], ["loc", [null, [28, 58], [28, 97]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.2.0",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 23,
                        "column": 36
                      },
                      "end": {
                        "line": 31,
                        "column": 36
                      }
                    },
                    "moduleName": "ghost/templates/posts.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "if", [["get", "post.page", ["loc", [null, [24, 46], [24, 55]]]]], [], 0, 1, ["loc", [null, [24, 40], [30, 47]]]]],
                  locals: [],
                  templates: [child0, child1]
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.2.0",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 31,
                        "column": 36
                      },
                      "end": {
                        "line": 33,
                        "column": 36
                      }
                    },
                    "moduleName": "ghost/templates/posts.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                        ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "draft");
                    var el2 = dom.createTextNode("Draft");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() {
                    return [];
                  },
                  statements: [],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.2.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 15,
                      "column": 24
                    },
                    "end": {
                      "line": 36,
                      "column": 24
                    }
                  },
                  "moduleName": "ghost/templates/posts.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("h3");
                  dom.setAttribute(el1, "class", "entry-title");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n                            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("section");
                  dom.setAttribute(el1, "class", "entry-meta");
                  var el2 = dom.createTextNode("\n                                ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "avatar");
                  var el3 = dom.createTextNode("\n                                    ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("img");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n                                ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                                ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "author");
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                                ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "status");
                  var el3 = dom.createTextNode("\n");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("                                ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                            ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element1 = dom.childAt(fragment, [3]);
                  var element2 = dom.childAt(element1, [1]);
                  var element3 = dom.childAt(element2, [1]);
                  var morphs = new Array(6);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  morphs[1] = dom.createAttrMorph(element2, 'style');
                  morphs[2] = dom.createAttrMorph(element3, 'src');
                  morphs[3] = dom.createAttrMorph(element3, 'title');
                  morphs[4] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
                  morphs[5] = dom.createMorphAt(dom.childAt(element1, [5]), 1, 1);
                  return morphs;
                },
                statements: [["content", "post.title", ["loc", [null, [16, 52], [16, 66]]]], ["attribute", "style", ["get", "component.authorAvatarBackground", ["loc", [null, [18, 61], [18, 93]]]]], ["attribute", "src", ["concat", [["get", "component.authorAvatar", ["loc", [null, [19, 48], [19, 70]]]]]]], ["attribute", "title", ["concat", [["get", "component.authorName", ["loc", [null, [19, 83], [19, 103]]]]]]], ["content", "component.authorName", ["loc", [null, [21, 53], [21, 77]]]], ["block", "if", [["get", "component.isPublished", ["loc", [null, [23, 42], [23, 63]]]]], [], 0, 1, ["loc", [null, [23, 36], [33, 43]]]]],
                locals: [],
                templates: [child0, child1]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.2.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 14,
                    "column": 20
                  },
                  "end": {
                    "line": 37,
                    "column": 20
                  }
                },
                "moduleName": "ghost/templates/posts.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "link-to", [["get", "component.viewOrEdit", ["loc", [null, [15, 35], [15, 55]]]], ["get", "post.id", ["loc", [null, [15, 56], [15, 63]]]]], ["class", "permalink", "title", "Edit this post"], 0, null, ["loc", [null, [15, 24], [36, 36]]]]],
              locals: ["component"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.2.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 16
                },
                "end": {
                  "line": 38,
                  "column": 16
                }
              },
              "moduleName": "ghost/templates/posts.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "gh-posts-list-item", [], ["post", ["subexpr", "@mut", [["get", "post", ["loc", [null, [14, 47], [14, 51]]]]], [], []], "active", ["subexpr", "is-equal", [["get", "post", ["loc", [null, [14, 69], [14, 73]]]], ["get", "currentPost", ["loc", [null, [14, 74], [14, 85]]]]], [], ["loc", [null, [14, 59], [14, 86]]]], "onDoubleClick", "openEditor", "previewIsHidden", ["subexpr", "@mut", [["get", "container.previewIsHidden", ["loc", [null, [14, 130], [14, 155]]]]], [], []]], 0, null, ["loc", [null, [14, 20], [37, 43]]]]],
            locals: ["post"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 8
              },
              "end": {
                "line": 40,
                "column": 8
              }
            },
            "moduleName": "ghost/templates/posts.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("ol");
            dom.setAttribute(el1, "class", "posts-list");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "sortedPosts", ["loc", [null, [13, 24], [13, 35]]]]], ["key", "id"], 0, null, ["loc", [null, [13, 16], [38, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes"]
          },
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 46,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/posts.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("header");
          dom.setAttribute(el1, "class", "view-header");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("section");
          dom.setAttribute(el2, "class", "view-actions");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "view-container");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("section");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("section");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [0]);
          var element5 = dom.childAt(fragment, [2]);
          var element6 = dom.childAt(element5, [1]);
          var element7 = dom.childAt(element5, [3]);
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(element4, 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element4, [3]), 1, 1);
          morphs[2] = dom.createAttrMorph(element6, 'class');
          morphs[3] = dom.createMorphAt(element6, 1, 1);
          morphs[4] = dom.createAttrMorph(element7, 'class');
          morphs[5] = dom.createMorphAt(element7, 1, 1);
          return morphs;
        },
        statements: [["block", "gh-view-title", [], ["openMobileMenu", "openMobileMenu"], 0, null, ["loc", [null, [3, 4], [3, 92]]]], ["block", "link-to", ["editor.new"], ["class", "btn btn-green", "title", "New Post"], 1, null, ["loc", [null, [5, 8], [5, 92]]]], ["attribute", "class", ["concat", ["content-list js-content-list ", ["subexpr", "if", [["get", "postListFocused", ["loc", [null, [10, 54], [10, 69]]]], "keyboard-focused"], [], ["loc", [null, [10, 49], [10, 90]]]]]]], ["block", "gh-infinite-scroll-box", [], ["tagName", "section", "classNames", "content-list-content js-content-scrollbox", "fetch", "loadNextPage"], 2, null, ["loc", [null, [11, 8], [40, 35]]]], ["attribute", "class", ["concat", ["content-preview js-content-preview ", ["subexpr", "if", [["get", "postContentFocused", ["loc", [null, [42, 60], [42, 78]]]], "keyboard-focused"], [], ["loc", [null, [42, 55], [42, 99]]]]]]], ["content", "outlet", ["loc", [null, [43, 8], [43, 18]]]]],
        locals: ["container"],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 47,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/posts.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "gh-content-view-container", [], [], 0, null, ["loc", [null, [1, 0], [46, 30]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/reset", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 16
            },
            "end": {
              "line": 7,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/reset.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "gh-input", [], ["type", "password", "name", "newpassword", "placeholder", "Password", "class", "password", "autocorrect", "off", "autofocus", "autofocus", "value", ["subexpr", "@mut", [["get", "newPassword", ["loc", [null, [6, 153], [6, 164]]]]], [], []]], ["loc", [null, [6, 20], [6, 166]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 16
            },
            "end": {
              "line": 10,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/reset.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "gh-input", [], ["type", "password", "name", "ne2password", "placeholder", "Confirm Password", "class", "password", "autocorrect", "off", "autofocus", "autofocus", "value", ["subexpr", "@mut", [["get", "ne2Password", ["loc", [null, [9, 160], [9, 171]]]]], [], []]], ["loc", [null, [9, 20], [9, 173]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 16
            },
            "end": {
              "line": 12,
              "column": 134
            }
          },
          "moduleName": "ghost/templates/reset.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Reset Password");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/reset.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "gh-flow");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "gh-flow-content-wrap");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("section");
        dom.setAttribute(el3, "class", "gh-flow-content fade-in");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("form");
        dom.setAttribute(el4, "id", "reset");
        dom.setAttribute(el4, "class", "gh-signin");
        dom.setAttribute(el4, "method", "post");
        dom.setAttribute(el4, "novalidate", "novalidate");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        dom.setAttribute(el4, "class", "main-error");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 1]);
        var element1 = dom.childAt(element0, [1]);
        var morphs = new Array(5);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createMorphAt(element1, 1, 1);
        morphs[2] = dom.createMorphAt(element1, 2, 2);
        morphs[3] = dom.createMorphAt(element1, 4, 4);
        morphs[4] = dom.createUnsafeMorphAt(dom.childAt(element0, [3]), 0, 0);
        return morphs;
      },
      statements: [["element", "action", ["submit"], ["on", "submit"], ["loc", [null, [4, 85], [4, 116]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [5, 40], [5, 46]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "hasValidated", ["loc", [null, [5, 60], [5, 72]]]]], [], []], "property", "newPassword"], 0, null, ["loc", [null, [5, 16], [7, 34]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [8, 40], [8, 46]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "hasValidated", ["loc", [null, [8, 60], [8, 72]]]]], [], []], "property", "ne2Password"], 1, null, ["loc", [null, [8, 16], [10, 34]]]], ["block", "gh-spin-button", [], ["class", "btn btn-blue btn-block", "type", "submit", "submitting", ["subexpr", "@mut", [["get", "submitting", ["loc", [null, [12, 90], [12, 100]]]]], [], []], "autoWidth", "false"], 2, null, ["loc", [null, [12, 16], [12, 153]]]], ["content", "flowErrors", ["loc", [null, [15, 34], [15, 50]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("ghost/templates/settings/code-injection", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 8
            },
            "end": {
              "line": 3,
              "column": 85
            }
          },
          "moduleName": "ghost/templates/settings/code-injection.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("Code Injection");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 12
            },
            "end": {
              "line": 5,
              "column": 92
            }
          },
          "moduleName": "ghost/templates/settings/code-injection.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Save");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 31,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/settings/code-injection.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "gh-view");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("header");
        dom.setAttribute(el2, "class", "view-header");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("section");
        dom.setAttribute(el3, "class", "view-actions");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2, "class", "view-content");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "id", "settings-code");
        dom.setAttribute(el3, "novalidate", "novalidate");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("fieldset");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("\n                    Ghost allows you to inject code into the top and bottom of your theme files without editing them. This allows for quick modifications to insert useful things like tracking codes and meta tags.\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "form-group settings-code");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        dom.setAttribute(el6, "for", "ghost-head");
        var el7 = dom.createTextNode("Blog Header");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("p");
        var el7 = dom.createTextNode("Code here will be injected into the ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("code");
        var el8 = dom.createTextNode("{{ghost_head}}");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode(" tag on every page of your blog");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "form-group settings-code");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        dom.setAttribute(el6, "for", "ghost-foot");
        var el7 = dom.createTextNode("Blog Footer");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("p");
        var el7 = dom.createTextNode("Code here will be injected into the ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("code");
        var el8 = dom.createTextNode("{{ghost_foot}}");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode(" tag on every page of your blog");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [3, 1, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(element1, 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [3]), 5, 5);
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [5]), 5, 5);
        return morphs;
      },
      statements: [["block", "gh-view-title", [], ["openMobileMenu", "openMobileMenu"], 0, null, ["loc", [null, [3, 8], [3, 103]]]], ["block", "gh-spin-button", [], ["class", "btn btn-blue", "action", "save", "submitting", ["subexpr", "@mut", [["get", "submitting", ["loc", [null, [5, 76], [5, 86]]]]], [], []]], 1, null, ["loc", [null, [5, 12], [5, 111]]]], ["inline", "gh-cm-editor", [], ["id", "ghost-head", "class", "gh-input settings-code-editor", "name", "codeInjection[ghost_head]", "type", "text", "value", ["subexpr", "@mut", [["get", "model.ghost_head", ["loc", [null, [19, 140], [19, 156]]]]], [], []]], ["loc", [null, [19, 20], [19, 158]]]], ["inline", "gh-cm-editor", [], ["id", "ghost-foot", "class", "gh-input settings-code-editor", "name", "codeInjection[ghost_foot]", "type", "text", "value", ["subexpr", "@mut", [["get", "model.ghost_foot", ["loc", [null, [25, 140], [25, 156]]]]], [], []]], ["loc", [null, [25, 20], [25, 158]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("ghost/templates/settings/general", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 8
            },
            "end": {
              "line": 3,
              "column": 78
            }
          },
          "moduleName": "ghost/templates/settings/general.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("General");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 12
            },
            "end": {
              "line": 5,
              "column": 92
            }
          },
          "moduleName": "ghost/templates/settings/general.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Save");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 16
            },
            "end": {
              "line": 18,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/settings/general.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "for", "blog-title");
          var el2 = dom.createTextNode("Blog Title");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("The name of your blog");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["inline", "gh-input", [], ["id", "blog-title", "class", "gh-input", "name", "general[title]", "type", "text", "value", ["subexpr", "@mut", [["get", "model.title", ["loc", [null, [15, 104], [15, 115]]]]], [], []], "focusOut", ["subexpr", "action", ["validate", "title"], [], ["loc", [null, [15, 125], [15, 152]]]]], ["loc", [null, [15, 20], [15, 154]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [16, 46], [16, 58]]]]], [], []], "property", "title"], ["loc", [null, [16, 20], [16, 77]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 16
            },
            "end": {
              "line": 28,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/settings/general.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "for", "blog-description");
          var el2 = dom.createTextNode("Blog Description");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n                        Describe what your blog is about\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [7]), 1, 1);
          return morphs;
        },
        statements: [["inline", "gh-textarea", [], ["id", "blog-description", "class", "gh-input", "name", "general[description]", "value", ["subexpr", "@mut", [["get", "model.description", ["loc", [null, [22, 107], [22, 124]]]]], [], []], "focusOut", ["subexpr", "action", ["validate", "description"], [], ["loc", [null, [22, 134], [22, 167]]]]], ["loc", [null, [22, 20], [22, 169]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [23, 46], [23, 58]]]]], [], []], "property", "description"], ["loc", [null, [23, 20], [23, 83]]]], ["inline", "gh-count-characters", [["get", "model.description", ["loc", [null, [26, 46], [26, 63]]]]], [], ["loc", [null, [26, 24], [26, 65]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 16
            },
            "end": {
              "line": 35,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/settings/general.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("img");
          dom.setAttribute(el1, "class", "blog-logo");
          dom.setAttribute(el1, "alt", "logo");
          dom.setAttribute(el1, "role", "button");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element3, 'src');
          morphs[1] = dom.createElementMorph(element3);
          return morphs;
        },
        statements: [["attribute", "src", ["concat", [["get", "model.logo", ["loc", [null, [34, 50], [34, 60]]]]]]], ["element", "action", ["openModal", "upload", ["get", "this", ["loc", [null, [34, 119], [34, 123]]]], "logo"], [], ["loc", [null, [34, 89], [34, 132]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 16
            },
            "end": {
              "line": 37,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/settings/general.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "btn btn-green js-modal-logo");
          var el2 = dom.createTextNode("Upload Image");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element2);
          return morphs;
        },
        statements: [["element", "action", ["openModal", "upload", ["get", "this", ["loc", [null, [36, 108], [36, 112]]]], "logo"], [], ["loc", [null, [36, 78], [36, 121]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 43,
              "column": 16
            },
            "end": {
              "line": 45,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/settings/general.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("img");
          dom.setAttribute(el1, "class", "blog-cover");
          dom.setAttribute(el1, "alt", "cover photo");
          dom.setAttribute(el1, "role", "button");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'src');
          morphs[1] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [["attribute", "src", ["concat", [["get", "model.cover", ["loc", [null, [44, 51], [44, 62]]]]]]], ["element", "action", ["openModal", "upload", ["get", "this", ["loc", [null, [44, 128], [44, 132]]]], "cover"], [], ["loc", [null, [44, 98], [44, 142]]]]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 45,
              "column": 16
            },
            "end": {
              "line": 47,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/settings/general.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "btn btn-green js-modal-cover");
          var el2 = dom.createTextNode("Upload Image");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["element", "action", ["openModal", "upload", ["get", "this", ["loc", [null, [46, 109], [46, 113]]]], "cover"], [], ["loc", [null, [46, 79], [46, 123]]]]],
        locals: [],
        templates: []
      };
    })();
    var child8 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 96,
                "column": 16
              },
              "end": {
                "line": 100,
                "column": 16
              }
            },
            "moduleName": "ghost/templates/settings/general.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("This password will be needed to access your blog. All search engine optimization and social features are now disabled. This password is stored in plaintext.");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["inline", "gh-input", [], ["name", "general[password]", "type", "text", "value", ["subexpr", "@mut", [["get", "model.password", ["loc", [null, [97, 74], [97, 88]]]]], [], []], "focusOut", ["subexpr", "action", ["validate", "password"], [], ["loc", [null, [97, 98], [97, 128]]]]], ["loc", [null, [97, 20], [97, 130]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [98, 46], [98, 58]]]]], [], []], "property", "password"], ["loc", [null, [98, 20], [98, 80]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 95,
              "column": 16
            },
            "end": {
              "line": 101,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/settings/general.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [96, 40], [96, 52]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "model.hasValidated", ["loc", [null, [96, 66], [96, 84]]]]], [], []], "property", "password"], 0, null, ["loc", [null, [96, 16], [100, 34]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 106,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/settings/general.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "gh-view");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("header");
        dom.setAttribute(el2, "class", "view-header");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("section");
        dom.setAttribute(el3, "class", "view-actions");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2, "class", "view-content");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "id", "settings-general");
        dom.setAttribute(el3, "novalidate", "novalidate");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("fieldset");
        var el5 = dom.createTextNode("\n\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "form-group");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Blog Logo");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("Display a sexy logo for your publication");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "form-group");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        var el6 = dom.createTextNode("Blog Cover");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("p");
        var el6 = dom.createTextNode("Display a cover image on your site");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("fieldset");
        var el5 = dom.createTextNode("\n\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "form-group");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        dom.setAttribute(el6, "for", "postsPerPage");
        var el7 = dom.createTextNode("Posts per page");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("p");
        var el7 = dom.createTextNode("How many posts should be displayed on each page");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "form-group for-checkbox");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        dom.setAttribute(el6, "for", "permalinks");
        var el7 = dom.createTextNode("Dated Permalinks");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        dom.setAttribute(el6, "class", "checkbox");
        dom.setAttribute(el6, "for", "permalinks");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "input-toggle-component");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("p");
        var el8 = dom.createTextNode("Include the date in your post URLs");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "form-group for-select");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        dom.setAttribute(el6, "for", "activeTheme");
        var el7 = dom.createTextNode("Theme");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "gh-select");
        dom.setAttribute(el6, "tabindex", "0");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                   ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("p");
        var el7 = dom.createTextNode("Select a theme for your blog");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "form-group for-checkbox");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        dom.setAttribute(el6, "for", "isPrivate");
        var el7 = dom.createTextNode("Make this blog private");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        dom.setAttribute(el6, "class", "checkbox");
        dom.setAttribute(el6, "for", "isPrivate");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "input-toggle-component");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("p");
        var el8 = dom.createTextNode("Enable password protection");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [0]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element4, [3, 1]);
        var element7 = dom.childAt(element6, [1]);
        var element8 = dom.childAt(element6, [7]);
        var element9 = dom.childAt(element8, [5, 3]);
        var morphs = new Array(12);
        morphs[0] = dom.createMorphAt(element5, 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element5, [3]), 1, 1);
        morphs[2] = dom.createMorphAt(element7, 1, 1);
        morphs[3] = dom.createMorphAt(element7, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element6, [3]), 3, 3);
        morphs[5] = dom.createMorphAt(dom.childAt(element6, [5]), 3, 3);
        morphs[6] = dom.createMorphAt(dom.childAt(element8, [1]), 4, 4);
        morphs[7] = dom.createMorphAt(dom.childAt(element8, [3, 3]), 1, 1);
        morphs[8] = dom.createAttrMorph(element9, 'data-select-text');
        morphs[9] = dom.createMorphAt(element9, 1, 1);
        morphs[10] = dom.createMorphAt(dom.childAt(element8, [7, 3]), 1, 1);
        morphs[11] = dom.createMorphAt(element8, 9, 9);
        return morphs;
      },
      statements: [["block", "gh-view-title", [], ["openMobileMenu", "openMobileMenu"], 0, null, ["loc", [null, [3, 8], [3, 96]]]], ["block", "gh-spin-button", [], ["class", "btn btn-blue", "action", "save", "submitting", ["subexpr", "@mut", [["get", "submitting", ["loc", [null, [5, 76], [5, 86]]]]], [], []]], 1, null, ["loc", [null, [5, 12], [5, 111]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [13, 40], [13, 52]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "model.hasValidated", ["loc", [null, [13, 66], [13, 84]]]]], [], []], "property", "title"], 2, null, ["loc", [null, [13, 16], [18, 34]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [20, 40], [20, 52]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "model.hasValidated", ["loc", [null, [20, 66], [20, 84]]]]], [], []], "property", "description", "class", "description-container"], 3, null, ["loc", [null, [20, 16], [28, 34]]]], ["block", "if", [["get", "model.logo", ["loc", [null, [33, 22], [33, 32]]]]], [], 4, 5, ["loc", [null, [33, 16], [37, 23]]]], ["block", "if", [["get", "model.cover", ["loc", [null, [43, 22], [43, 33]]]]], [], 6, 7, ["loc", [null, [43, 16], [47, 23]]]], ["inline", "gh-input", [], ["id", "postsPerPage", "class", "gh-input", "name", "general[postsPerPage]", "focus-out", "checkPostsPerPage", "value", ["subexpr", "@mut", [["get", "model.postsPerPage", ["loc", [null, [56, 131], [56, 149]]]]], [], []], "min", "1", "max", "1000", "type", "number", "pattern", "[0-9]*"], ["loc", [null, [56, 20], [56, 201]]]], ["inline", "input", [], ["id", "permalinks", "class", "gh-input", "name", "general[permalinks]", "type", "checkbox", "checked", ["subexpr", "@mut", [["get", "isDatedPermalinks", ["loc", [null, [63, 116], [63, 133]]]]], [], []]], ["loc", [null, [63, 24], [63, 135]]]], ["attribute", "data-select-text", ["concat", [["get", "selectedTheme.label", ["loc", [null, [71, 64], [71, 83]]]]]]], ["inline", "gh-select-native", [], ["id", "activeTheme", "name", "general[activeTheme]", "content", ["subexpr", "@mut", [["get", "themes", ["loc", [null, [75, 36], [75, 42]]]]], [], []], "optionValuePath", "name", "optionLabelPath", "label", "selection", ["subexpr", "@mut", [["get", "selectedTheme", ["loc", [null, [78, 38], [78, 51]]]]], [], []], "action", "setTheme"], ["loc", [null, [72, 24], [80, 26]]]], ["inline", "input", [], ["id", "isPrivate", "name", "general[isPrivate]", "type", "checkbox", "checked", ["subexpr", "@mut", [["get", "model.isPrivate", ["loc", [null, [89, 32], [89, 47]]]]], [], []]], ["loc", [null, [88, 24], [89, 49]]]], ["block", "if", [["get", "model.isPrivate", ["loc", [null, [95, 22], [95, 37]]]]], [], 8, null, ["loc", [null, [95, 16], [101, 23]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8]
    };
  })());
});
define("ghost/templates/settings/labs", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 8
            },
            "end": {
              "line": 3,
              "column": 75
            }
          },
          "moduleName": "ghost/templates/settings/labs.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("Labs");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 40,
              "column": 20
            },
            "end": {
              "line": 40,
              "column": 128
            }
          },
          "moduleName": "ghost/templates/settings/labs.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Send");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 60,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/settings/labs.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "gh-view");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("header");
        dom.setAttribute(el2, "class", "view-header");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2, "class", "view-content settings-debug");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createElement("strong");
        var el5 = dom.createTextNode("Important note:");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" Labs is a testing ground for experimental features which aren't quite ready for primetime. They may change, break or inexplicably disappear at any time.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "id", "settings-export");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("fieldset");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "form-group");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Export");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("button");
        dom.setAttribute(el6, "type", "button");
        dom.setAttribute(el6, "class", "btn btn-blue");
        var el7 = dom.createTextNode("Export");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("p");
        var el7 = dom.createTextNode("Export the blog settings and data.");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "id", "settings-import");
        dom.setAttribute(el3, "enctype", "multipart/form-data");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("fieldset");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "form-group");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Import");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("p");
        var el7 = dom.createTextNode("Import from another Ghost installation. If you import a user, this will replace the current user & log you out.");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "id", "settings-resetdb");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("fieldset");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "form-group");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Delete all Content");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("button");
        dom.setAttribute(el6, "type", "button");
        dom.setAttribute(el6, "class", "btn btn-red js-delete");
        var el7 = dom.createTextNode("Delete");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("p");
        var el7 = dom.createTextNode("Delete all posts and tags from the database.");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "id", "settings-testmail");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("fieldset");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "form-group");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        var el7 = dom.createTextNode("Send a test email");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("p");
        var el7 = dom.createTextNode("Sends a test email to your address.");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("hr");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("fieldset");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "form-group for-checkbox");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("h3");
        var el7 = dom.createTextNode("Enable Beta Features");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        dom.setAttribute(el6, "class", "checkbox");
        dom.setAttribute(el6, "for", "labs-publicAPI");
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "input-toggle-component");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                        ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("p");
        var el8 = dom.createTextNode("Public API - For full instructions, read the ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("a");
        dom.setAttribute(el8, "href", "http://support.ghost.org/public-api-beta/");
        var el9 = dom.createTextNode("developer guide");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode(".");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                    ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [3]);
        var element2 = dom.childAt(element1, [3, 1, 1, 3]);
        var element3 = dom.childAt(element1, [5, 1, 1]);
        var element4 = dom.childAt(element1, [7, 1, 1, 3]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[1] = dom.createElementMorph(element2);
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createMorphAt(element3, 5, 5);
        morphs[4] = dom.createElementMorph(element4);
        morphs[5] = dom.createMorphAt(dom.childAt(element1, [9, 1, 1]), 3, 3);
        morphs[6] = dom.createMorphAt(dom.childAt(element1, [13, 1, 1, 3]), 1, 1);
        return morphs;
      },
      statements: [["block", "gh-view-title", [], ["openMobileMenu", "openMobileMenu"], 0, null, ["loc", [null, [3, 8], [3, 93]]]], ["element", "action", ["exportData"], [], ["loc", [null, [12, 63], [12, 86]]]], ["inline", "partial", ["import-errors"], [], ["loc", [null, [21, 20], [21, 47]]]], ["inline", "gh-file-upload", [], ["id", "importfile", "classNames", "flex", "uploadButtonText", ["subexpr", "@mut", [["get", "uploadButtonText", ["loc", [null, [22, 88], [22, 104]]]]], [], []], "onUpload", "onUpload"], ["loc", [null, [22, 20], [22, 126]]]], ["element", "action", ["openModal", "deleteAll"], [], ["loc", [null, [31, 72], [31, 106]]]], ["block", "gh-spin-button", [], ["id", "sendtestemail", "class", "btn btn-blue", "action", "sendTestEmail", "submitting", ["subexpr", "@mut", [["get", "submitting", ["loc", [null, [40, 112], [40, 122]]]]], [], []]], 1, null, ["loc", [null, [40, 20], [40, 147]]]], ["inline", "input", [], ["id", "labs-publicAPI", "name", "labs[publicAPI]", "type", "checkbox", "checked", ["subexpr", "@mut", [["get", "usePublicAPI", ["loc", [null, [51, 99], [51, 111]]]]], [], []]], ["loc", [null, [51, 24], [51, 113]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("ghost/templates/settings/navigation", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 8
              },
              "end": {
                "line": 3,
                "column": 81
              }
            },
            "moduleName": "ghost/templates/settings/navigation.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("Navigation");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 12
              },
              "end": {
                "line": 5,
                "column": 92
              }
            },
            "moduleName": "ghost/templates/settings/navigation.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Save");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 12
              },
              "end": {
                "line": 13,
                "column": 12
              }
            },
            "moduleName": "ghost/templates/settings/navigation.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "gh-navitem", [], ["navItem", ["subexpr", "@mut", [["get", "navItem", ["loc", [null, [12, 37], [12, 44]]]]], [], []], "baseUrl", ["subexpr", "@mut", [["get", "blogUrl", ["loc", [null, [12, 53], [12, 60]]]]], [], []], "addItem", "addItem", "deleteItem", "deleteItem", "updateUrl", "updateUrl"], ["loc", [null, [12, 16], [12, 126]]]]],
          locals: ["navItem"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes"]
          },
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/settings/navigation.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("header");
          dom.setAttribute(el1, "class", "view-header");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("section");
          dom.setAttribute(el2, "class", "view-actions");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("section");
          dom.setAttribute(el1, "class", "view-container");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("form");
          dom.setAttribute(el2, "id", "settings-navigation");
          dom.setAttribute(el2, "class", "gh-blognav js-gh-blognav");
          dom.setAttribute(el2, "novalidate", "novalidate");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [3, 1]), 1, 1);
          return morphs;
        },
        statements: [["block", "gh-view-title", [], ["openMobileMenu", "openMobileMenu"], 0, null, ["loc", [null, [3, 8], [3, 99]]]], ["block", "gh-spin-button", [], ["class", "btn btn-blue", "action", "save", "submitting", ["subexpr", "@mut", [["get", "submitting", ["loc", [null, [5, 76], [5, 86]]]]], [], []]], 1, null, ["loc", [null, [5, 12], [5, 111]]]], ["block", "each", [["get", "navigationItems", ["loc", [null, [11, 20], [11, 35]]]]], [], 2, null, ["loc", [null, [11, 12], [13, 21]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/settings/navigation.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "gh-navigation", [], ["moveItem", "moveItem"], 0, null, ["loc", [null, [1, 0], [16, 18]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/settings/tags/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 8
            },
            "end": {
              "line": 4,
              "column": 125
            }
          },
          "moduleName": "ghost/templates/settings/tags/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "btn btn-green btn-lg");
          dom.setAttribute(el1, "title", "New Tag");
          var el2 = dom.createTextNode("Add a Tag");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/settings/tags/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "no-posts-box");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "no-posts");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h3");
        var el4 = dom.createTextNode("You haven't added any Tags yet!");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 3, 3);
        return morphs;
      },
      statements: [["block", "link-to", ["settings.tags.new"], [], 0, null, ["loc", [null, [4, 8], [4, 137]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/settings/tags/settings-menu", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 20
              },
              "end": {
                "line": 17,
                "column": 20
              }
            },
            "moduleName": "ghost/templates/settings/tags/settings-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            dom.setAttribute(el1, "for", "tag-name");
            var el2 = dom.createTextNode("Name");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            return morphs;
          },
          statements: [["inline", "gh-input", [], ["id", "tag-name", "name", "name", "type", "text", "value", ["subexpr", "@mut", [["get", "activeTagNameScratch", ["loc", [null, [15, 79], [15, 99]]]]], [], []], "focus-out", "saveActiveTagName"], ["loc", [null, [15, 24], [15, 131]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "activeTag.errors", ["loc", [null, [16, 50], [16, 66]]]]], [], []], "property", "name"], ["loc", [null, [16, 24], [16, 84]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 20
              },
              "end": {
                "line": 24,
                "column": 20
              }
            },
            "moduleName": "ghost/templates/settings/tags/settings-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            dom.setAttribute(el1, "for", "tag-url");
            var el2 = dom.createTextNode("URL");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            return morphs;
          },
          statements: [["inline", "gh-input", [], ["id", "tag-url", "name", "url", "type", "text", "value", ["subexpr", "@mut", [["get", "activeTagSlugScratch", ["loc", [null, [21, 77], [21, 97]]]]], [], []], "focus-out", "saveActiveTagSlug"], ["loc", [null, [21, 24], [21, 129]]]], ["inline", "gh-url-preview", [], ["prefix", "tag", "slug", ["subexpr", "@mut", [["get", "activeTagSlugScratch", ["loc", [null, [22, 59], [22, 79]]]]], [], []], "tagName", "p", "classNames", "description"], ["loc", [null, [22, 24], [22, 118]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "activeTag.errors", ["loc", [null, [23, 50], [23, 66]]]]], [], []], "property", "slug"], ["loc", [null, [23, 24], [23, 84]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 20
              },
              "end": {
                "line": 30,
                "column": 20
              }
            },
            "moduleName": "ghost/templates/settings/tags/settings-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            dom.setAttribute(el1, "for", "tag-description");
            var el2 = dom.createTextNode("Description");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("Maximum: ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("b");
            var el3 = dom.createTextNode("200");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" characters. You’ve used ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [5]), 3, 3);
            return morphs;
          },
          statements: [["inline", "gh-textarea", [], ["id", "tag-description", "name", "description", "value", ["subexpr", "@mut", [["get", "activeTagDescriptionScratch", ["loc", [null, [28, 84], [28, 111]]]]], [], []], "focus-out", "saveActiveTagDescription"], ["loc", [null, [28, 24], [28, 150]]]], ["inline", "gh-count-down-characters", [["get", "activeTagDescriptionScratch", ["loc", [null, [29, 98], [29, 125]]]], 200], [], ["loc", [null, [29, 71], [29, 131]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 24
              },
              "end": {
                "line": 39,
                "column": 24
              }
            },
            "moduleName": "ghost/templates/settings/tags/settings-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "class", "meta-data-button");
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("b");
            var el3 = dom.createTextNode("Meta Data");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            var el3 = dom.createTextNode("Extra content for SEO and social media.");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "icon-arrow-right");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 42,
                "column": 20
              },
              "end": {
                "line": 44,
                "column": 20
              }
            },
            "moduleName": "ghost/templates/settings/tags/settings-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "class", "btn btn-link btn-sm tag-delete-button");
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "icon-trash");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" Delete Tag");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element3);
            return morphs;
          },
          statements: [["element", "action", ["openModal", "delete-tag", ["get", "activeTag", ["loc", [null, [43, 126], [43, 135]]]]], [], ["loc", [null, [43, 92], [43, 137]]]]],
          locals: [],
          templates: []
        };
      })();
      var child5 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.2.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 60,
                    "column": 20
                  },
                  "end": {
                    "line": 65,
                    "column": 20
                  }
                },
                "moduleName": "ghost/templates/settings/tags/settings-menu.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("label");
                dom.setAttribute(el1, "for", "meta-title");
                var el2 = dom.createTextNode("Meta Title");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("p");
                var el2 = dom.createTextNode("Recommended: ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("b");
                var el3 = dom.createTextNode("70");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" characters. You’ve used ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                morphs[2] = dom.createMorphAt(dom.childAt(fragment, [7]), 3, 3);
                return morphs;
              },
              statements: [["inline", "gh-input", [], ["id", "meta-title", "name", "meta_title", "type", "text", "value", ["subexpr", "@mut", [["get", "activeTagMetaTitleScratch", ["loc", [null, [62, 87], [62, 112]]]]], [], []], "focus-out", "saveActiveTagMetaTitle"], ["loc", [null, [62, 24], [62, 149]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "activeTag.errors", ["loc", [null, [63, 50], [63, 66]]]]], [], []], "property", "meta_title"], ["loc", [null, [63, 24], [63, 90]]]], ["inline", "gh-count-down-characters", [["get", "activeTagMetaTitleScratch", ["loc", [null, [64, 101], [64, 126]]]], 70], [], ["loc", [null, [64, 74], [64, 131]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.2.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 67,
                    "column": 20
                  },
                  "end": {
                    "line": 72,
                    "column": 20
                  }
                },
                "moduleName": "ghost/templates/settings/tags/settings-menu.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("label");
                dom.setAttribute(el1, "for", "meta-description");
                var el2 = dom.createTextNode("Meta Description");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("p");
                var el2 = dom.createTextNode("Recommended: ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("b");
                var el3 = dom.createTextNode("156");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" characters. You’ve used ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                morphs[2] = dom.createMorphAt(dom.childAt(fragment, [7]), 3, 3);
                return morphs;
              },
              statements: [["inline", "gh-textarea", [], ["id", "meta-description", "name", "meta_description", "value", ["subexpr", "@mut", [["get", "activeTagMetaDescriptionScratch", ["loc", [null, [69, 90], [69, 121]]]]], [], []], "focus-out", "saveActiveTagMetaDescription"], ["loc", [null, [69, 24], [69, 164]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "activeTag.errors", ["loc", [null, [70, 50], [70, 66]]]]], [], []], "property", "meta_description"], ["loc", [null, [70, 24], [70, 96]]]], ["inline", "gh-count-down-characters", [["get", "activeTagMetaDescriptionScratch", ["loc", [null, [71, 102], [71, 133]]]], 156], [], ["loc", [null, [71, 75], [71, 139]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.2.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 51,
                  "column": 16
                },
                "end": {
                  "line": 84,
                  "column": 16
                }
              },
              "moduleName": "ghost/templates/settings/tags/settings-menu.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "settings-menu-header subview");
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("button");
              dom.setAttribute(el2, "class", "back icon-arrow-left settings-menu-header-action");
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "hidden");
              var el4 = dom.createTextNode("Back");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("h4");
              var el3 = dom.createTextNode("Meta Data");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "style", "width:23px;");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "settings-menu-content");
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("form");
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "form-group");
              var el4 = dom.createTextNode("\n                        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("label");
              var el5 = dom.createTextNode("Search Engine Result Preview");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                        ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("div");
              dom.setAttribute(el4, "class", "seo-preview");
              var el5 = dom.createTextNode("\n                            ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("div");
              dom.setAttribute(el5, "class", "seo-preview-title");
              var el6 = dom.createComment("");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                            ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("div");
              dom.setAttribute(el5, "class", "seo-preview-link");
              var el6 = dom.createComment("");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                            ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("div");
              dom.setAttribute(el5, "class", "seo-preview-description");
              var el6 = dom.createComment("");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                        ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                    ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                    ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1, 1]);
              var element1 = dom.childAt(fragment, [3, 1]);
              var element2 = dom.childAt(element1, [5, 3]);
              var morphs = new Array(6);
              morphs[0] = dom.createElementMorph(element0);
              morphs[1] = dom.createMorphAt(element1, 1, 1);
              morphs[2] = dom.createMorphAt(element1, 3, 3);
              morphs[3] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
              morphs[4] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
              morphs[5] = dom.createMorphAt(dom.childAt(element2, [5]), 0, 0);
              return morphs;
            },
            statements: [["element", "action", ["closeSubview"], [], ["loc", [null, [53, 28], [53, 53]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "activeTag.errors", ["loc", [null, [60, 44], [60, 60]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "activeTag.hasValidated", ["loc", [null, [60, 74], [60, 96]]]]], [], []], "property", "meta_title"], 0, null, ["loc", [null, [60, 20], [65, 38]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "activeTag.errors", ["loc", [null, [67, 44], [67, 60]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "activeTag.hasValidated", ["loc", [null, [67, 74], [67, 96]]]]], [], []], "property", "meta_description"], 1, null, ["loc", [null, [67, 20], [72, 38]]]], ["content", "seoTitle", ["loc", [null, [77, 59], [77, 71]]]], ["content", "seoURL", ["loc", [null, [78, 58], [78, 68]]]], ["content", "seoDescription", ["loc", [null, [79, 65], [79, 83]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 50,
                "column": 12
              },
              "end": {
                "line": 85,
                "column": 12
              }
            },
            "moduleName": "ghost/templates/settings/tags/settings-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isViewingSubview", ["loc", [null, [51, 22], [51, 38]]]]], [], 0, null, ["loc", [null, [51, 16], [84, 23]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 4
            },
            "end": {
              "line": 87,
              "column": 4
            }
          },
          "moduleName": "ghost/templates/settings/tags/settings-menu.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "settings-menu-header");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h4");
          var el4 = dom.createTextNode("Tag Settings");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "close icon-x settings-menu-header-action");
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "hidden");
          var el5 = dom.createTextNode("Close");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "settings-menu-content");
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("form");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("ul");
          dom.setAttribute(el4, "class", "nav-list nav-list-block");
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("                    ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("                ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1]);
          var element5 = dom.childAt(element4, [1, 3]);
          var element6 = dom.childAt(element4, [3]);
          var element7 = dom.childAt(element6, [3]);
          var element8 = dom.childAt(fragment, [3]);
          var morphs = new Array(10);
          morphs[0] = dom.createAttrMorph(element4, 'class');
          morphs[1] = dom.createElementMorph(element5);
          morphs[2] = dom.createMorphAt(element6, 1, 1);
          morphs[3] = dom.createMorphAt(element7, 1, 1);
          morphs[4] = dom.createMorphAt(element7, 3, 3);
          morphs[5] = dom.createMorphAt(element7, 5, 5);
          morphs[6] = dom.createMorphAt(dom.childAt(element7, [7]), 1, 1);
          morphs[7] = dom.createMorphAt(element7, 9, 9);
          morphs[8] = dom.createAttrMorph(element8, 'class');
          morphs[9] = dom.createMorphAt(element8, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "isViewingSubview", ["loc", [null, [3, 25], [3, 41]]]], "settings-menu-pane-out-left", "settings-menu-pane-in"], [], ["loc", [null, [3, 20], [3, 97]]]], " settings-menu settings-menu-pane tag-settings-pane"]]], ["element", "action", ["closeMenus"], [], ["loc", [null, [6, 73], [6, 96]]]], ["inline", "gh-uploader", [], ["uploaded", "setCoverImage", "canceled", "clearCoverImage", "description", "Add tag image", "image", ["subexpr", "@mut", [["get", "activeTag.image", ["loc", [null, [11, 116], [11, 131]]]]], [], []], "initUploader", "setUploaderReference", "tagName", "section"], ["loc", [null, [11, 16], [11, 187]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "activeTag.errors", ["loc", [null, [13, 44], [13, 60]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "activeTag.hasValidated", ["loc", [null, [13, 74], [13, 96]]]]], [], []], "property", "name"], 0, null, ["loc", [null, [13, 20], [17, 38]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "activeTag.errors", ["loc", [null, [19, 44], [19, 60]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "activeTag.hasValidated", ["loc", [null, [19, 74], [19, 96]]]]], [], []], "property", "slug"], 1, null, ["loc", [null, [19, 20], [24, 38]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "activeTag.errors", ["loc", [null, [26, 44], [26, 60]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "activeTag.hasValidated", ["loc", [null, [26, 74], [26, 96]]]]], [], []], "property", "description"], 2, null, ["loc", [null, [26, 20], [30, 38]]]], ["block", "gh-tab", [], ["tagName", "li", "classNames", "nav-list-item"], 3, null, ["loc", [null, [33, 24], [39, 35]]]], ["block", "unless", [["get", "activeTag.isNew", ["loc", [null, [42, 30], [42, 45]]]]], [], 4, null, ["loc", [null, [42, 20], [44, 31]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "isViewingSubview", ["loc", [null, [49, 25], [49, 41]]]], "settings-menu-pane-in", "settings-menu-pane-out-right"], [], ["loc", [null, [49, 20], [49, 98]]]], " settings-menu settings-menu-pane tag-meta-settings-pane"]]], ["block", "gh-tab-pane", [], [], 5, null, ["loc", [null, [50, 12], [85, 28]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4, child5]
      };
    })();
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 89,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/settings/tags/settings-menu.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["block", "gh-tabs-manager", [], ["selected", "showSubview", "class", "settings-menu-container"], 0, null, ["loc", [null, [2, 4], [87, 24]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/settings/tags/tag", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/settings/tags/tag.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "gh-tag-settings-form", [], ["tag", ["subexpr", "@mut", [["get", "tag", ["loc", [null, [1, 27], [1, 30]]]]], [], []], "setProperty", ["subexpr", "action", ["setProperty"], [], ["loc", [null, [1, 43], [1, 65]]]], "openModal", "openModal"], ["loc", [null, [1, 0], [1, 89]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ghost/templates/settings/tags", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 8
            },
            "end": {
              "line": 3,
              "column": 75
            }
          },
          "moduleName": "ghost/templates/settings/tags.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("Tags");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 12
            },
            "end": {
              "line": 5,
              "column": 89
            }
          },
          "moduleName": "ghost/templates/settings/tags.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("New Tag");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.2.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 19,
                    "column": 24
                  },
                  "end": {
                    "line": 24,
                    "column": 24
                  }
                },
                "moduleName": "ghost/templates/settings/tags.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "tag-title");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "label label-default");
                var el2 = dom.createTextNode("/");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("p");
                dom.setAttribute(el1, "class", "tag-description");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "tags-count");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(4);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
                morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5]), 0, 0);
                morphs[3] = dom.createMorphAt(dom.childAt(fragment, [7]), 0, 0);
                return morphs;
              },
              statements: [["content", "tag.name", ["loc", [null, [20, 52], [20, 64]]]], ["content", "tag.slug", ["loc", [null, [21, 63], [21, 75]]]], ["content", "tag.description", ["loc", [null, [22, 55], [22, 74]]]], ["content", "tag.count.posts", ["loc", [null, [23, 53], [23, 72]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.2.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 17,
                  "column": 16
                },
                "end": {
                  "line": 26,
                  "column": 16
                }
              },
              "moduleName": "ghost/templates/settings/tags.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "settings-tag");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("                    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["block", "link-to", ["settings.tags.tag", ["get", "tag", ["loc", [null, [19, 55], [19, 58]]]]], ["class", "tag-edit-button"], 0, null, ["loc", [null, [19, 24], [24, 36]]]]],
            locals: ["tag"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 8
              },
              "end": {
                "line": 28,
                "column": 8
              }
            },
            "moduleName": "ghost/templates/settings/tags.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("section");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["tag-list-content settings-tags ", ["subexpr", "if", [["get", "tagListFocused", ["loc", [null, [16, 64], [16, 78]]]], "keyboard-focused"], [], ["loc", [null, [16, 59], [16, 99]]]]]]], ["block", "each", [["get", "tags", ["loc", [null, [17, 24], [17, 28]]]]], [], 0, null, ["loc", [null, [17, 16], [26, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 4
            }
          },
          "moduleName": "ghost/templates/settings/tags.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("section");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [2]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createAttrMorph(element1, 'class');
          morphs[2] = dom.createMorphAt(element1, 1, 1);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "gh-infinite-scroll", [], ["fetch", "loadNextPage", "isLoading", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [13, 22], [13, 31]]]]], [], []], "classNames", "tag-list"], 0, null, ["loc", [null, [11, 8], [28, 31]]]], ["attribute", "class", ["concat", ["settings-menu-container tag-settings ", ["subexpr", "if", [["get", "tagContentFocused", ["loc", [null, [29, 66], [29, 83]]]], "keyboard-focused"], [], ["loc", [null, [29, 61], [29, 104]]]], " ", ["subexpr", "if", [["get", "container.displaySettingsPane", ["loc", [null, [29, 110], [29, 139]]]], "tag-settings-in"], [], ["loc", [null, [29, 105], [29, 159]]]]]]], ["content", "outlet", ["loc", [null, [30, 12], [30, 22]]]]],
        locals: ["container"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 34,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/settings/tags.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "gh-view");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("header");
        dom.setAttribute(el2, "class", "view-header");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("section");
        dom.setAttribute(el3, "class", "view-actions");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var element3 = dom.childAt(element2, [1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(element3, 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element3, [3]), 1, 1);
        morphs[2] = dom.createMorphAt(element2, 3, 3);
        return morphs;
      },
      statements: [["block", "gh-view-title", [], ["openMobileMenu", "openMobileMenu"], 0, null, ["loc", [null, [3, 8], [3, 93]]]], ["block", "link-to", ["settings.tags.new"], ["class", "btn btn-green", "title", "New Tag"], 1, null, ["loc", [null, [5, 12], [5, 101]]]], ["block", "gh-tags-management-container", [], ["tags", ["subexpr", "@mut", [["get", "tags", ["loc", [null, [10, 41], [10, 45]]]]], [], []], "selectedTag", ["subexpr", "@mut", [["get", "selectedTag", ["loc", [null, [10, 58], [10, 69]]]]], [], []], "enteredMobile", "enteredMobile", "leftMobile", "leftMobile"], 2, null, ["loc", [null, [10, 4], [32, 37]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("ghost/templates/setup/one", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "ghost/templates/setup/one.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Create your account ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "icon-chevron");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/setup/one.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h1");
        var el3 = dom.createTextNode("Welcome to ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("strong");
        var el4 = dom.createTextNode("Ghost");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("!");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("All over the world, people have started ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("em");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" incredible blogs with Ghost. Today, we’re starting yours.");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("figure");
        dom.setAttribute(el1, "class", "gh-flow-screenshot");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("img");
        dom.setAttribute(el2, "alt", "Ghost screenshot");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2, 1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 3, 1]), 0, 0);
        morphs[1] = dom.createAttrMorph(element0, 'src');
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "model.count", ["loc", [null, [3, 51], [3, 66]]]], ["attribute", "src", ["concat", [["subexpr", "gh-path", ["admin", "img/install-welcome.png"], [], ["loc", [null, [7, 14], [7, 59]]]]]]], ["block", "link-to", ["setup.two"], ["classNames", "btn btn-green btn-lg"], 0, null, ["loc", [null, [10, 0], [12, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ghost/templates/setup/three", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 4
            },
            "end": {
              "line": 12,
              "column": 4
            }
          },
          "moduleName": "ghost/templates/setup/three.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "for", "users");
          var el2 = dom.createTextNode("Enter one email address per line, we’ll handle the rest! ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "icon-mail");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["inline", "gh-textarea", [], ["name", "users", "value", ["subexpr", "@mut", [["get", "users", ["loc", [null, [11, 41], [11, 46]]]]], [], []], "required", "required", "focusOut", ["subexpr", "action", ["validate"], [], ["loc", [null, [11, 76], [11, 95]]]]], ["loc", [null, [11, 8], [11, 97]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 4
            },
            "end": {
              "line": 14,
              "column": 176
            }
          },
          "moduleName": "ghost/templates/setup/three.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "buttonText", ["loc", [null, [14, 162], [14, 176]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/setup/three.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h1");
        var el3 = dom.createTextNode("Invite your team");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("Ghost works best when shared with others. Collaborate, get feedback on your posts & work together on ideas.");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("img");
        dom.setAttribute(el1, "class", "gh-flow-faces");
        dom.setAttribute(el1, "alt", "");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "gh-flow-invite");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("button");
        dom.setAttribute(el1, "class", "gh-flow-skip");
        var el2 = dom.createTextNode("\n    I'll do this later, take me to my blog!\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(fragment, [4]);
        var element2 = dom.childAt(fragment, [6]);
        var morphs = new Array(4);
        morphs[0] = dom.createAttrMorph(element0, 'src');
        morphs[1] = dom.createMorphAt(element1, 1, 1);
        morphs[2] = dom.createMorphAt(element1, 3, 3);
        morphs[3] = dom.createElementMorph(element2);
        return morphs;
      },
      statements: [["attribute", "src", ["concat", [["subexpr", "gh-path", ["admin", "img/users.png"], [], ["loc", [null, [6, 32], [6, 67]]]]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [9, 28], [9, 34]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "hasValidated", ["loc", [null, [9, 48], [9, 60]]]]], [], []], "property", "users"], 0, null, ["loc", [null, [9, 4], [12, 22]]]], ["block", "gh-spin-button", [], ["type", "submit", "action", "invite", "submitting", ["subexpr", "@mut", [["get", "submitting", ["loc", [null, [14, 132], [14, 142]]]]], [], []], "autoWidth", "false", "class", ["subexpr", "concat", ["btn", " ", "btn-default", " ", "btn-lg", " ", "btn-block", " ", ["subexpr", "if", [["get", "buttonClass", []], ["subexpr", "-normalize-class", ["buttonClass", ["get", "buttonClass", []]], [], []]], [], []], " "], [], []]], 1, null, ["loc", [null, [14, 4], [14, 195]]]], ["element", "action", ["skipInvite"], [], ["loc", [null, [17, 29], [17, 52]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("ghost/templates/setup/two", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 4
            },
            "end": {
              "line": 17,
              "column": 4
            }
          },
          "moduleName": "ghost/templates/setup/two.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "for", "email-address");
          var el2 = dom.createTextNode("Email address");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "input-icon icon-mail");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["inline", "gh-trim-focus-input", [], ["tabindex", "1", "type", "email", "name", "email", "placeholder", "Eg. john@example.com", "autocorrect", "off", "value", ["subexpr", "@mut", [["get", "email", ["loc", [null, [14, 132], [14, 137]]]]], [], []], "focusOut", ["subexpr", "action", ["preValidate", "email"], [], ["loc", [null, [14, 147], [14, 177]]]]], ["loc", [null, [14, 12], [14, 179]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [16, 34], [16, 40]]]]], [], []], "property", "email"], ["loc", [null, [16, 8], [16, 59]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 4
            },
            "end": {
              "line": 24,
              "column": 4
            }
          },
          "moduleName": "ghost/templates/setup/two.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "for", "full-name");
          var el2 = dom.createTextNode("Full name");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "input-icon icon-user");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["inline", "gh-input", [], ["tabindex", "2", "type", "text", "name", "name", "placeholder", "Eg. John H. Watson", "autocorrect", "off", "value", ["subexpr", "@mut", [["get", "name", ["loc", [null, [21, 118], [21, 122]]]]], [], []], "focusOut", ["subexpr", "action", ["preValidate", "name"], [], ["loc", [null, [21, 132], [21, 161]]]]], ["loc", [null, [21, 12], [21, 163]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [23, 34], [23, 40]]]]], [], []], "property", "name"], ["loc", [null, [23, 8], [23, 58]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 4
            },
            "end": {
              "line": 31,
              "column": 4
            }
          },
          "moduleName": "ghost/templates/setup/two.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "for", "password");
          var el2 = dom.createTextNode("Password");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "input-icon icon-lock");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["inline", "gh-input", [], ["tabindex", "3", "type", "password", "name", "password", "placeholder", "At least 8 characters", "autocorrect", "off", "value", ["subexpr", "@mut", [["get", "password", ["loc", [null, [28, 128], [28, 136]]]]], [], []], "focusOut", ["subexpr", "action", ["preValidate", "password"], [], ["loc", [null, [28, 146], [28, 179]]]]], ["loc", [null, [28, 12], [28, 181]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [30, 34], [30, 40]]]]], [], []], "property", "password"], ["loc", [null, [30, 8], [30, 62]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 32,
              "column": 4
            },
            "end": {
              "line": 38,
              "column": 4
            }
          },
          "moduleName": "ghost/templates/setup/two.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "for", "blog-title");
          var el2 = dom.createTextNode("Blog title");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "input-icon icon-content");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["inline", "gh-input", [], ["tabindex", "4", "type", "text", "name", "blog-title", "placeholder", "Eg. The Daily Awesome", "autocorrect", "off", "value", ["subexpr", "@mut", [["get", "blogTitle", ["loc", [null, [35, 126], [35, 135]]]]], [], []], "focusOut", ["subexpr", "action", ["preValidate", "blogTitle"], [], ["loc", [null, [35, 145], [35, 179]]]]], ["loc", [null, [35, 12], [35, 181]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [37, 34], [37, 40]]]]], [], []], "property", "blogTitle"], ["loc", [null, [37, 8], [37, 63]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 39,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 4
            }
          },
          "moduleName": "ghost/templates/setup/two.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Last step: Invite your team ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "icon-chevron");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/setup/two.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h1");
        var el3 = dom.createTextNode("Create your account");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "id", "setup");
        dom.setAttribute(el1, "class", "gh-flow-create");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("input");
        dom.setAttribute(el2, "style", "display:none;");
        dom.setAttribute(el2, "type", "text");
        dom.setAttribute(el2, "name", "fakeusernameremembered");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("input");
        dom.setAttribute(el2, "style", "display:none;");
        dom.setAttribute(el2, "type", "password");
        dom.setAttribute(el2, "name", "fakepasswordremembered");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        dom.setAttribute(el1, "class", "main-error");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(element0, 6, 6);
        morphs[1] = dom.createMorphAt(element0, 8, 8);
        morphs[2] = dom.createMorphAt(element0, 9, 9);
        morphs[3] = dom.createMorphAt(element0, 10, 10);
        morphs[4] = dom.createMorphAt(element0, 11, 11);
        morphs[5] = dom.createMorphAt(element0, 12, 12);
        morphs[6] = dom.createUnsafeMorphAt(dom.childAt(fragment, [4]), 0, 0);
        return morphs;
      },
      statements: [["inline", "gh-profile-image", [], ["fileStorage", ["subexpr", "@mut", [["get", "config.fileStorage", ["loc", [null, [10, 35], [10, 53]]]]], [], []], "email", ["subexpr", "@mut", [["get", "email", ["loc", [null, [10, 60], [10, 65]]]]], [], []], "setImage", "setImage"], ["loc", [null, [10, 4], [10, 87]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [11, 28], [11, 34]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "hasValidated", ["loc", [null, [11, 48], [11, 60]]]]], [], []], "property", "email"], 0, null, ["loc", [null, [11, 4], [17, 22]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [18, 28], [18, 34]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "hasValidated", ["loc", [null, [18, 48], [18, 60]]]]], [], []], "property", "name"], 1, null, ["loc", [null, [18, 4], [24, 22]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [25, 28], [25, 34]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "hasValidated", ["loc", [null, [25, 48], [25, 60]]]]], [], []], "property", "password"], 2, null, ["loc", [null, [25, 4], [31, 22]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "errors", ["loc", [null, [32, 28], [32, 34]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "hasValidated", ["loc", [null, [32, 48], [32, 60]]]]], [], []], "property", "blogTitle"], 3, null, ["loc", [null, [32, 4], [38, 22]]]], ["block", "gh-spin-button", [], ["type", "submit", "tabindex", "5", "class", "btn btn-green btn-lg btn-block", "action", "setup", "submitting", ["subexpr", "@mut", [["get", "submitting", ["loc", [null, [39, 114], [39, 124]]]]], [], []], "autoWidth", "false"], 4, null, ["loc", [null, [39, 4], [41, 23]]]], ["content", "flowErrors", ["loc", [null, [44, 22], [44, 38]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("ghost/templates/setup", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 16
              },
              "end": {
                "line": 5,
                "column": 100
              }
            },
            "moduleName": "ghost/templates/setup.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "icon-arrow-left");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" Back");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 12
            },
            "end": {
              "line": 6,
              "column": 12
            }
          },
          "moduleName": "ghost/templates/setup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", [["get", "backRoute", ["loc", [null, [5, 27], [5, 36]]]]], ["classNames", "gh-flow-back"], 0, null, ["loc", [null, [5, 16], [5, 112]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 16
            },
            "end": {
              "line": 10,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/setup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "icon-check");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "num");
          var el2 = dom.createTextNode("1");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 16
            },
            "end": {
              "line": 14,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/setup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "icon-check");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "num");
          var el2 = dom.createTextNode("2");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 16
            },
            "end": {
              "line": 18,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/setup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "icon-check");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "num");
          var el2 = dom.createTextNode("3");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/setup.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "gh-flow");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("header");
        dom.setAttribute(el2, "class", "gh-flow-head");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("nav");
        dom.setAttribute(el3, "class", "gh-flow-nav");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("ol");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        dom.setAttribute(el5, "class", "divider");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        dom.setAttribute(el5, "class", "divider");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "gh-flow-content-wrap");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("section");
        dom.setAttribute(el3, "class", "gh-flow-content");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1, 1]);
        var element2 = dom.childAt(element1, [3]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(element1, 1, 1);
        morphs[1] = dom.createMorphAt(element2, 1, 1);
        morphs[2] = dom.createMorphAt(element2, 5, 5);
        morphs[3] = dom.createMorphAt(element2, 9, 9);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [3, 1]), 1, 1);
        return morphs;
      },
      statements: [["block", "if", [["get", "showBackLink", ["loc", [null, [4, 18], [4, 30]]]]], [], 0, null, ["loc", [null, [4, 12], [6, 19]]]], ["block", "gh-activating-list-item", [], ["route", "setup.one", "linkClasses", "step"], 1, null, ["loc", [null, [8, 16], [10, 44]]]], ["block", "gh-activating-list-item", [], ["route", "setup.two", "linkClasses", "step"], 2, null, ["loc", [null, [12, 16], [14, 44]]]], ["block", "gh-activating-list-item", [], ["route", "setup.three", "linkClasses", "step"], 3, null, ["loc", [null, [16, 16], [18, 44]]]], ["content", "outlet", ["loc", [null, [24, 12], [24, 22]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("ghost/templates/signin", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 16
            },
            "end": {
              "line": 9,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/signin.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "input-icon icon-mail");
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "gh-trim-focus-input", [], ["class", "gh-input email", "type", "email", "placeholder", "Email Address", "name", "identification", "autocapitalize", "off", "autocorrect", "off", "tabindex", "1", "focusOut", ["subexpr", "action", ["validate", "identification"], [], ["loc", [null, [7, 193], [7, 229]]]], "value", ["subexpr", "@mut", [["get", "model.identification", ["loc", [null, [7, 236], [7, 256]]]]], [], []]], ["loc", [null, [7, 24], [7, 258]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 24
              },
              "end": {
                "line": 13,
                "column": 171
              }
            },
            "moduleName": "ghost/templates/signin.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Forgot?");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 16
            },
            "end": {
              "line": 15,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/signin.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "input-icon icon-lock forgotten-wrap");
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createMorphAt(element0, 3, 3);
          return morphs;
        },
        statements: [["inline", "gh-input", [], ["class", "password", "type", "password", "placeholder", "Password", "name", "password", "tabindex", "2", "value", ["subexpr", "@mut", [["get", "model.password", ["loc", [null, [12, 126], [12, 140]]]]], [], []], "autocorrect", "off"], ["loc", [null, [12, 24], [12, 160]]]], ["block", "gh-spin-button", [], ["class", "forgotten-link btn btn-link", "type", "button", "action", "forgotten", "tabindex", "4", "submitting", ["subexpr", "@mut", [["get", "submitting", ["loc", [null, [13, 135], [13, 145]]]]], [], []], "autoWidth", "true"], 0, null, ["loc", [null, [13, 24], [13, 190]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 16
            },
            "end": {
              "line": 16,
              "column": 178
            }
          },
          "moduleName": "ghost/templates/signin.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Sign in");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/signin.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "gh-flow");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "gh-flow-content-wrap");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("section");
        dom.setAttribute(el3, "class", "gh-flow-content");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("form");
        dom.setAttribute(el4, "id", "login");
        dom.setAttribute(el4, "class", "gh-signin");
        dom.setAttribute(el4, "method", "post");
        dom.setAttribute(el4, "novalidate", "novalidate");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        dom.setAttribute(el4, "class", "main-error");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0, 1, 1]);
        var element2 = dom.childAt(element1, [1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(element2, 1, 1);
        morphs[1] = dom.createMorphAt(element2, 2, 2);
        morphs[2] = dom.createMorphAt(element2, 4, 4);
        morphs[3] = dom.createUnsafeMorphAt(dom.childAt(element1, [3]), 0, 0);
        return morphs;
      },
      statements: [["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [5, 40], [5, 52]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "hasValidated", ["loc", [null, [5, 66], [5, 78]]]]], [], []], "property", "identification"], 0, null, ["loc", [null, [5, 16], [9, 34]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [10, 40], [10, 52]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "hasValidated", ["loc", [null, [10, 66], [10, 78]]]]], [], []], "property", "password"], 1, null, ["loc", [null, [10, 16], [15, 34]]]], ["block", "gh-spin-button", [], ["class", "login btn btn-blue btn-block", "type", "submit", "action", "validateAndAuthenticate", "tabindex", "3", "submitting", ["subexpr", "@mut", [["get", "loggingIn", ["loc", [null, [16, 142], [16, 151]]]]], [], []], "autoWidth", "false"], 2, null, ["loc", [null, [16, 16], [16, 197]]]], ["content", "flowErrors", ["loc", [null, [19, 34], [19, 50]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("ghost/templates/signup", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 16
            },
            "end": {
              "line": 21,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/signup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "for", "email-address");
          var el2 = dom.createTextNode("Email address");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "input-icon icon-mail");
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["inline", "gh-input", [], ["type", "email", "name", "email", "placeholder", "Eg. john@example.com", "enter", ["subexpr", "action", ["signup"], [], ["loc", [null, [18, 102], [18, 119]]]], "disabled", "disabled", "autocorrect", "off", "value", ["subexpr", "@mut", [["get", "model.email", ["loc", [null, [18, 164], [18, 175]]]]], [], []], "focusOut", ["subexpr", "action", ["validate", "email"], [], ["loc", [null, [18, 185], [18, 212]]]]], ["loc", [null, [18, 24], [18, 214]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [20, 46], [20, 58]]]]], [], []], "property", "email"], ["loc", [null, [20, 20], [20, 77]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 16
            },
            "end": {
              "line": 28,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/signup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "for", "full-name");
          var el2 = dom.createTextNode("Full name");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "input-icon icon-user");
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["inline", "gh-trim-focus-input", [], ["tabindex", "1", "type", "text", "name", "name", "placeholder", "Eg. John H. Watson", "enter", ["subexpr", "action", ["signup"], [], ["loc", [null, [25, 122], [25, 139]]]], "autocorrect", "off", "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [25, 164], [25, 174]]]]], [], []], "focusOut", ["subexpr", "action", ["validate", "name"], [], ["loc", [null, [25, 184], [25, 210]]]]], ["loc", [null, [25, 24], [25, 212]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [27, 46], [27, 58]]]]], [], []], "property", "name"], ["loc", [null, [27, 20], [27, 76]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 16
            },
            "end": {
              "line": 35,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/signup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "for", "password");
          var el2 = dom.createTextNode("Password");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "input-icon icon-lock");
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["inline", "gh-input", [], ["tabindex", "2", "type", "password", "name", "password", "enter", ["subexpr", "action", ["signup"], [], ["loc", [null, [32, 86], [32, 103]]]], "autocorrect", "off", "value", ["subexpr", "@mut", [["get", "model.password", ["loc", [null, [32, 128], [32, 142]]]]], [], []], "focusOut", ["subexpr", "action", ["validate", "password"], [], ["loc", [null, [32, 152], [32, 182]]]]], ["loc", [null, [32, 24], [32, 184]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [34, 46], [34, 58]]]]], [], []], "property", "password"], ["loc", [null, [34, 20], [34, 80]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 38,
              "column": 12
            },
            "end": {
              "line": 38,
              "column": 167
            }
          },
          "moduleName": "ghost/templates/signup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Create Account");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 44,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/signup.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "gh-flow");
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "gh-flow-content-wrap");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("section");
        dom.setAttribute(el3, "class", "gh-flow-content");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("header");
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("h1");
        var el6 = dom.createTextNode("Create your account");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("form");
        dom.setAttribute(el4, "id", "signup");
        dom.setAttribute(el4, "class", "gh-flow-create");
        dom.setAttribute(el4, "method", "post");
        dom.setAttribute(el4, "novalidate", "novalidate");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "style", "display:none;");
        dom.setAttribute(el5, "type", "text");
        dom.setAttribute(el5, "name", "fakeusernameremembered");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("input");
        dom.setAttribute(el5, "style", "display:none;");
        dom.setAttribute(el5, "type", "password");
        dom.setAttribute(el5, "name", "fakepasswordremembered");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        dom.setAttribute(el4, "class", "main-error");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 1]);
        var element1 = dom.childAt(element0, [3]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(element1, 6, 6);
        morphs[1] = dom.createMorphAt(element1, 8, 8);
        morphs[2] = dom.createMorphAt(element1, 9, 9);
        morphs[3] = dom.createMorphAt(element1, 10, 10);
        morphs[4] = dom.createMorphAt(element0, 5, 5);
        morphs[5] = dom.createUnsafeMorphAt(dom.childAt(element0, [7]), 0, 0);
        return morphs;
      },
      statements: [["inline", "gh-profile-image", [], ["fileStorage", ["subexpr", "@mut", [["get", "config.fileStorage", ["loc", [null, [14, 47], [14, 65]]]]], [], []], "email", ["subexpr", "@mut", [["get", "model.email", ["loc", [null, [14, 72], [14, 83]]]]], [], []], "setImage", "setImage"], ["loc", [null, [14, 16], [14, 105]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [15, 40], [15, 52]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "hasValidated", ["loc", [null, [15, 66], [15, 78]]]]], [], []], "property", "email"], 0, null, ["loc", [null, [15, 16], [21, 34]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [22, 40], [22, 52]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "hasValidated", ["loc", [null, [22, 66], [22, 78]]]]], [], []], "property", "name"], 1, null, ["loc", [null, [22, 16], [28, 34]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [29, 40], [29, 52]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "hasValidated", ["loc", [null, [29, 66], [29, 78]]]]], [], []], "property", "password"], 2, null, ["loc", [null, [29, 16], [35, 34]]]], ["block", "gh-spin-button", [], ["tabindex", "3", "type", "submit", "class", "btn btn-green btn-lg btn-block", "action", "signup", "submitting", ["subexpr", "@mut", [["get", "submitting", ["loc", [null, [38, 123], [38, 133]]]]], [], []], "autoWidth", "false"], 3, null, ["loc", [null, [38, 12], [38, 186]]]], ["content", "flowErrors", ["loc", [null, [39, 34], [39, 50]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("ghost/templates/team/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 8
            },
            "end": {
              "line": 3,
              "column": 75
            }
          },
          "moduleName": "ghost/templates/team/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("Team");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 8
            },
            "end": {
              "line": 9,
              "column": 8
            }
          },
          "moduleName": "ghost/templates/team/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("section");
          dom.setAttribute(el1, "class", "view-actions");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "class", "btn btn-green");
          var el3 = dom.createTextNode("Invite People");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element4);
          return morphs;
        },
        statements: [["element", "action", ["openModal", "invite-new-user"], [], ["loc", [null, [7, 46], [7, 86]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.2.0",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 29,
                        "column": 40
                      },
                      "end": {
                        "line": 33,
                        "column": 40
                      }
                    },
                    "moduleName": "ghost/templates/team/index.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "description-error");
                    var el2 = dom.createTextNode("\n                                                Invitation not sent - please try again\n                                            ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() {
                    return [];
                  },
                  statements: [],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.2.0",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 33,
                        "column": 40
                      },
                      "end": {
                        "line": 37,
                        "column": 40
                      }
                    },
                    "moduleName": "ghost/templates/team/index.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "description");
                    var el2 = dom.createTextNode("\n                                                Invitation sent: ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n                                            ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                    return morphs;
                  },
                  statements: [["content", "component.createdAt", ["loc", [null, [35, 65], [35, 88]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child2 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.2.0",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 40,
                        "column": 36
                      },
                      "end": {
                        "line": 42,
                        "column": 36
                      }
                    },
                    "moduleName": "ghost/templates/team/index.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                        ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("span");
                    var el2 = dom.createTextNode("Sending Invite...");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() {
                    return [];
                  },
                  statements: [],
                  locals: [],
                  templates: []
                };
              })();
              var child3 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.2.0",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 42,
                        "column": 36
                      },
                      "end": {
                        "line": 49,
                        "column": 36
                      }
                    },
                    "moduleName": "ghost/templates/team/index.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                                        ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("a");
                    dom.setAttribute(el1, "class", "user-list-action");
                    dom.setAttribute(el1, "href", "#");
                    var el2 = dom.createTextNode("\n                                            Revoke\n                                        ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n                                        ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("a");
                    dom.setAttribute(el1, "class", "user-list-action");
                    dom.setAttribute(el1, "href", "#");
                    var el2 = dom.createTextNode("\n                                            Resend\n                                        ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element0 = dom.childAt(fragment, [1]);
                    var element1 = dom.childAt(fragment, [3]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createElementMorph(element0);
                    morphs[1] = dom.createElementMorph(element1);
                    return morphs;
                  },
                  statements: [["element", "action", ["revoke"], ["target", ["get", "component", ["loc", [null, [43, 102], [43, 111]]]]], ["loc", [null, [43, 77], [43, 113]]]], ["element", "action", ["resend"], ["target", ["get", "component", ["loc", [null, [46, 102], [46, 111]]]]], ["loc", [null, [46, 77], [46, 113]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.2.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 24,
                      "column": 24
                    },
                    "end": {
                      "line": 52,
                      "column": 24
                    }
                  },
                  "moduleName": "ghost/templates/team/index.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "user-list-item");
                  var el2 = dom.createTextNode("\n                                ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "user-list-item-icon icon-mail");
                  var el3 = dom.createTextNode("ic");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                                ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "user-list-item-body");
                  var el3 = dom.createTextNode("\n                                    ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3, "class", "name");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("br");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("                                ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                                ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("aside");
                  dom.setAttribute(el2, "class", "user-list-item-aside");
                  var el3 = dom.createTextNode("\n");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("                                ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                            ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element2 = dom.childAt(fragment, [1]);
                  var element3 = dom.childAt(element2, [3]);
                  var morphs = new Array(3);
                  morphs[0] = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
                  morphs[1] = dom.createMorphAt(element3, 4, 4);
                  morphs[2] = dom.createMorphAt(dom.childAt(element2, [5]), 1, 1);
                  return morphs;
                },
                statements: [["content", "user.email", ["loc", [null, [28, 55], [28, 69]]]], ["block", "if", [["get", "user.pending", ["loc", [null, [29, 46], [29, 58]]]]], [], 0, 1, ["loc", [null, [29, 40], [37, 47]]]], ["block", "if", [["get", "component.isSending", ["loc", [null, [40, 42], [40, 61]]]]], [], 2, 3, ["loc", [null, [40, 36], [49, 43]]]]],
                locals: ["component"],
                templates: [child0, child1, child2, child3]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.2.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 23,
                    "column": 20
                  },
                  "end": {
                    "line": 53,
                    "column": 20
                  }
                },
                "moduleName": "ghost/templates/team/index.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "gh-user-invited", [], ["user", ["subexpr", "@mut", [["get", "user", ["loc", [null, [24, 48], [24, 52]]]]], [], []], "reload", "reload"], 0, null, ["loc", [null, [24, 24], [52, 44]]]]],
              locals: ["user"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.2.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 20,
                  "column": 12
                },
                "end": {
                  "line": 55,
                  "column": 12
                }
              },
              "moduleName": "ghost/templates/team/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("section");
              dom.setAttribute(el1, "class", "user-list invited-users");
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("h4");
              dom.setAttribute(el2, "class", "user-list-title");
              var el3 = dom.createTextNode("Invited users");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
              return morphs;
            },
            statements: [["block", "each", [["get", "invitedUsers", ["loc", [null, [23, 28], [23, 40]]]]], [], 0, null, ["loc", [null, [23, 20], [53, 29]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 8
              },
              "end": {
                "line": 56,
                "column": 8
              }
            },
            "moduleName": "ghost/templates/team/index.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "invitedUsers", ["loc", [null, [20, 18], [20, 30]]]]], [], 0, null, ["loc", [null, [20, 12], [55, 19]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.2.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 64,
                      "column": 24
                    },
                    "end": {
                      "line": 66,
                      "column": 24
                    }
                  },
                  "moduleName": "ghost/templates/team/index.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "partial", ["user-list-item"], [], ["loc", [null, [65, 28], [65, 56]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.2.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 63,
                    "column": 20
                  },
                  "end": {
                    "line": 67,
                    "column": 20
                  }
                },
                "moduleName": "ghost/templates/team/index.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "link-to", ["team.user", ["get", "user", ["loc", [null, [64, 47], [64, 51]]]]], ["class", "user-list-item"], 0, null, ["loc", [null, [64, 24], [66, 36]]]]],
              locals: ["component"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.2.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 62,
                  "column": 16
                },
                "end": {
                  "line": 68,
                  "column": 16
                }
              },
              "moduleName": "ghost/templates/team/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "gh-user-active", [], ["user", ["subexpr", "@mut", [["get", "user", ["loc", [null, [63, 43], [63, 47]]]]], [], []]], 0, null, ["loc", [null, [63, 20], [67, 39]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.2.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 69,
                    "column": 20
                  },
                  "end": {
                    "line": 71,
                    "column": 20
                  }
                },
                "moduleName": "ghost/templates/team/index.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "class", "ember-view active user-list-item");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["inline", "partial", ["user-list-item"], [], ["loc", [null, [70, 69], [70, 97]]]]],
              locals: ["component"],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.2.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 68,
                  "column": 16
                },
                "end": {
                  "line": 72,
                  "column": 16
                }
              },
              "moduleName": "ghost/templates/team/index.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "gh-user-active", [], ["user", ["subexpr", "@mut", [["get", "user", ["loc", [null, [69, 43], [69, 47]]]]], [], []]], 0, null, ["loc", [null, [69, 20], [71, 39]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 60,
                "column": 12
              },
              "end": {
                "line": 73,
                "column": 12
              }
            },
            "moduleName": "ghost/templates/team/index.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "unless", [["get", "session.user.isAuthor", ["loc", [null, [62, 26], [62, 47]]]]], [], 0, 1, ["loc", [null, [62, 16], [72, 27]]]]],
          locals: ["user"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 4
            }
          },
          "moduleName": "ghost/templates/team/index.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("section");
          dom.setAttribute(el1, "class", "user-list active-users");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h4");
          dom.setAttribute(el2, "class", "user-list-title");
          var el3 = dom.createTextNode("Active users");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 3, 3);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "unless", [["get", "session.user.isAuthor", ["loc", [null, [19, 18], [19, 39]]]]], [], 0, null, ["loc", [null, [19, 8], [56, 19]]]], ["block", "each", [["get", "activeUsers", ["loc", [null, [60, 20], [60, 31]]]]], ["key", "id"], 1, null, ["loc", [null, [60, 12], [73, 21]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 77,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/team/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "gh-view");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("header");
        dom.setAttribute(el2, "class", "view-header");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element5 = dom.childAt(fragment, [0]);
        var element6 = dom.childAt(element5, [1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(element6, 1, 1);
        morphs[1] = dom.createMorphAt(element6, 3, 3);
        morphs[2] = dom.createMorphAt(element5, 3, 3);
        return morphs;
      },
      statements: [["block", "gh-view-title", [], ["openMobileMenu", "openMobileMenu"], 0, null, ["loc", [null, [3, 8], [3, 93]]]], ["block", "unless", [["get", "session.user.isAuthor", ["loc", [null, [5, 18], [5, 39]]]]], [], 1, null, ["loc", [null, [5, 8], [9, 19]]]], ["block", "gh-infinite-scroll", [], ["fetch", "loadNextPage", "isLoading", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [14, 18], [14, 27]]]]], [], []], "tagName", "section", "classNames", "view-content team"], 2, null, ["loc", [null, [12, 4], [75, 27]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("ghost/templates/team/user", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 8
            },
            "end": {
              "line": 6,
              "column": 8
            }
          },
          "moduleName": "ghost/templates/team/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "icon-arrow-right");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [5]), 0, 0);
          return morphs;
        },
        statements: [["inline", "link-to", ["Team", "team"], [], ["loc", [null, [4, 12], [4, 37]]]], ["content", "user.name", ["loc", [null, [5, 51], [5, 64]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 20
              },
              "end": {
                "line": 13,
                "column": 20
              }
            },
            "moduleName": "ghost/templates/team/user.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "icon-settings");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "hidden");
            var el2 = dom.createTextNode("User Settings");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.2.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 24
                },
                "end": {
                  "line": 21,
                  "column": 24
                }
              },
              "moduleName": "ghost/templates/team/user.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("button");
              var el3 = dom.createTextNode("\n                                    Make Owner\n                                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element4 = dom.childAt(fragment, [1, 1]);
              var morphs = new Array(1);
              morphs[0] = dom.createElementMorph(element4);
              return morphs;
            },
            statements: [["element", "action", ["openModal", "transfer-owner", ["get", "this", ["loc", [null, [17, 78], [17, 82]]]]], [], ["loc", [null, [17, 40], [17, 84]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.2.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 22,
                  "column": 24
                },
                "end": {
                  "line": 28,
                  "column": 24
                }
              },
              "moduleName": "ghost/templates/team/user.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createTextNode("\n                                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("button");
              dom.setAttribute(el2, "class", "delete");
              var el3 = dom.createTextNode("\n                                    Delete User\n                                ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1, 1]);
              var morphs = new Array(1);
              morphs[0] = dom.createElementMorph(element3);
              return morphs;
            },
            statements: [["element", "action", ["openModal", "delete-user", ["get", "this", ["loc", [null, [24, 75], [24, 79]]]]], [], ["loc", [null, [24, 40], [24, 81]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 20
              },
              "end": {
                "line": 29,
                "column": 20
              }
            },
            "moduleName": "ghost/templates/team/user.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "canMakeOwner", ["loc", [null, [15, 30], [15, 42]]]]], [], 0, null, ["loc", [null, [15, 24], [21, 31]]]], ["block", "if", [["get", "deleteUserActionIsVisible", ["loc", [null, [22, 30], [22, 55]]]]], [], 1, null, ["loc", [null, [22, 24], [28, 31]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 12
            },
            "end": {
              "line": 31,
              "column": 12
            }
          },
          "moduleName": "ghost/templates/team/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "dropdown");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element5 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element5, 1, 1);
          morphs[1] = dom.createMorphAt(element5, 2, 2);
          return morphs;
        },
        statements: [["block", "gh-dropdown-button", [], ["dropdownName", "user-actions-menu", "classNames", "btn btn-default only-has-icon user-actions-cog", "title", "User Actions"], 0, null, ["loc", [null, [10, 20], [13, 43]]]], ["block", "gh-dropdown", [], ["name", "user-actions-menu", "tagName", "ul", "classNames", "user-actions-menu dropdown-menu dropdown-triangle-top-right"], 1, null, ["loc", [null, [14, 20], [29, 36]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 12
            },
            "end": {
              "line": 33,
              "column": 92
            }
          },
          "moduleName": "ghost/templates/team/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Save");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 59,
                "column": 20
              },
              "end": {
                "line": 61,
                "column": 20
              }
            },
            "moduleName": "ghost/templates/team/user.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "user.errors", ["loc", [null, [60, 50], [60, 61]]]]], [], []], "property", "name"], ["loc", [null, [60, 24], [60, 79]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 61,
                "column": 20
              },
              "end": {
                "line": 63,
                "column": 20
              }
            },
            "moduleName": "ghost/templates/team/user.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("Use your real name so people can recognise you");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 56,
              "column": 16
            },
            "end": {
              "line": 64,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/team/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "for", "user-name");
          var el2 = dom.createTextNode("Full Name");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "user.name", ["loc", [null, [58, 34], [58, 43]]]]], [], []], "id", "user-name", "class", "gh-input user-name", "placeholder", "Full Name", "autocorrect", "off", "focusOut", ["subexpr", "action", ["validate", "name"], [], ["loc", [null, [58, 137], [58, 163]]]]], ["loc", [null, [58, 20], [58, 165]]]], ["block", "if", [["get", "user.errors.name", ["loc", [null, [59, 26], [59, 42]]]]], [], 0, 1, ["loc", [null, [59, 20], [63, 27]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 70,
              "column": 16
            },
            "end": {
              "line": 75,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/team/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "for", "user-slug");
          var el2 = dom.createTextNode("Slug");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("/author/");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [5]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[1] = dom.createMorphAt(element2, 0, 0);
          morphs[2] = dom.createMorphAt(element2, 2, 2);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          return morphs;
        },
        statements: [["inline", "gh-input", [], ["class", "gh-input user-name", "id", "user-slug", "value", ["subexpr", "@mut", [["get", "slugValue", ["loc", [null, [72, 79], [72, 88]]]]], [], []], "name", "user", "focus-out", "updateSlug", "placeholder", "Slug", "selectOnClick", "true", "autocorrect", "off"], ["loc", [null, [72, 20], [72, 183]]]], ["content", "gh-blog-url", ["loc", [null, [73, 23], [73, 38]]]], ["content", "slugValue", ["loc", [null, [73, 46], [73, 59]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "user.errors", ["loc", [null, [74, 46], [74, 57]]]]], [], []], "property", "slug"], ["loc", [null, [74, 20], [74, 75]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 80,
                "column": 20
              },
              "end": {
                "line": 83,
                "column": 20
              }
            },
            "moduleName": "ghost/templates/team/user.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["inline", "input", [], ["type", "email", "value", ["subexpr", "@mut", [["get", "user.email", ["loc", [null, [81, 51], [81, 61]]]]], [], []], "id", "user-email", "name", "email", "class", "gh-input", "placeholder", "Email Address", "autocapitalize", "off", "autocorrect", "off", "autocomplete", "off", "focusOut", ["subexpr", "action", ["validate", "email"], [], ["loc", [null, [81, 203], [81, 230]]]]], ["loc", [null, [81, 24], [81, 232]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "user.errors", ["loc", [null, [82, 50], [82, 61]]]]], [], []], "property", "email"], ["loc", [null, [82, 24], [82, 80]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 83,
                "column": 20
              },
              "end": {
                "line": 85,
                "column": 20
              }
            },
            "moduleName": "ghost/templates/team/user.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "user.email", ["loc", [null, [84, 30], [84, 44]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 77,
              "column": 16
            },
            "end": {
              "line": 87,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/team/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "for", "user-email");
          var el2 = dom.createTextNode("Email");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Used for notifications");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "unless", [["get", "isAdminUserOnOwnerProfile", ["loc", [null, [80, 30], [80, 55]]]]], [], 0, 1, ["loc", [null, [80, 20], [85, 31]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 89,
              "column": 16
            },
            "end": {
              "line": 103,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/team/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "form-group");
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          dom.setAttribute(el2, "for", "user-role");
          var el3 = dom.createTextNode("Role");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "gh-select");
          dom.setAttribute(el2, "tabindex", "0");
          var el3 = dom.createTextNode("\n                            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          var el3 = dom.createTextNode("What permissions should this user have?");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]), 1, 1);
          return morphs;
        },
        statements: [["inline", "gh-select-native", [], ["id", "new-user-role", "content", ["subexpr", "@mut", [["get", "roles", ["loc", [null, [94, 40], [94, 45]]]]], [], []], "optionValuePath", "id", "optionLabelPath", "name", "selection", ["subexpr", "@mut", [["get", "model.role", ["loc", [null, [97, 42], [97, 52]]]]], [], []], "action", "changeRole"], ["loc", [null, [93, 28], [99, 30]]]]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 105,
              "column": 16
            },
            "end": {
              "line": 110,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/team/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "for", "user-location");
          var el2 = dom.createTextNode("Location");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Where in the world do you live?");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "text", "value", ["subexpr", "@mut", [["get", "user.location", ["loc", [null, [107, 46], [107, 59]]]]], [], []], "id", "user-location", "class", "gh-input", "focusOut", ["subexpr", "action", ["validate", "location"], [], ["loc", [null, [107, 105], [107, 135]]]]], ["loc", [null, [107, 20], [107, 137]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "user.errors", ["loc", [null, [108, 46], [108, 57]]]]], [], []], "property", "location"], ["loc", [null, [108, 20], [108, 79]]]]],
        locals: [],
        templates: []
      };
    })();
    var child8 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 112,
              "column": 16
            },
            "end": {
              "line": 117,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/team/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "for", "user-website");
          var el2 = dom.createTextNode("Website");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Have a website or blog other than this one? Link it!");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "url", "value", ["subexpr", "@mut", [["get", "user.website", ["loc", [null, [114, 45], [114, 57]]]]], [], []], "id", "user-website", "class", "gh-input", "autocapitalize", "off", "autocorrect", "off", "autocomplete", "off", "focusOut", ["subexpr", "action", ["validate", "website"], [], ["loc", [null, [114, 160], [114, 189]]]]], ["loc", [null, [114, 20], [114, 191]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "user.errors", ["loc", [null, [115, 46], [115, 57]]]]], [], []], "property", "website"], ["loc", [null, [115, 20], [115, 78]]]]],
        locals: [],
        templates: []
      };
    })();
    var child9 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 119,
              "column": 16
            },
            "end": {
              "line": 127,
              "column": 16
            }
          },
          "moduleName": "ghost/templates/team/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          dom.setAttribute(el1, "for", "user-bio");
          var el2 = dom.createTextNode("Bio");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n                    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n                        Write about you, in 200 characters or less.\n                        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [7]), 1, 1);
          return morphs;
        },
        statements: [["inline", "textarea", [], ["id", "user-bio", "class", "gh-input", "value", ["subexpr", "@mut", [["get", "user.bio", ["loc", [null, [121, 68], [121, 76]]]]], [], []], "focusOut", ["subexpr", "action", ["validate", "bio"], [], ["loc", [null, [121, 86], [121, 111]]]]], ["loc", [null, [121, 20], [121, 113]]]], ["inline", "gh-error-message", [], ["errors", ["subexpr", "@mut", [["get", "user.errors", ["loc", [null, [122, 46], [122, 57]]]]], [], []], "property", "bio"], ["loc", [null, [122, 20], [122, 74]]]], ["inline", "gh-count-characters", [["get", "user.bio", ["loc", [null, [125, 46], [125, 54]]]]], [], ["loc", [null, [125, 24], [125, 56]]]]],
        locals: [],
        templates: []
      };
    })();
    var child10 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.2.0",
            "loc": {
              "source": null,
              "start": {
                "line": 135,
                "column": 20
              },
              "end": {
                "line": 140,
                "column": 20
              }
            },
            "moduleName": "ghost/templates/team/user.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "form-group");
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "for", "user-password-old");
            var el3 = dom.createTextNode("Old Password");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
            return morphs;
          },
          statements: [["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "user.password", ["loc", [null, [138, 38], [138, 51]]]]], [], []], "type", "password", "id", "user-password-old", "class", "gh-input"], ["loc", [null, [138, 24], [138, 109]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.2.0",
          "loc": {
            "source": null,
            "start": {
              "line": 133,
              "column": 12
            },
            "end": {
              "line": 156,
              "column": 12
            }
          },
          "moduleName": "ghost/templates/team/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("fieldset");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "form-group");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "for", "user-password-new");
          var el4 = dom.createTextNode("New Password");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "form-group");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("label");
          dom.setAttribute(el3, "for", "user-new-password-verification");
          var el4 = dom.createTextNode("Verify Password");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "form-group");
          var el3 = dom.createTextNode("\n                        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "type", "button");
          dom.setAttribute(el3, "class", "btn btn-red button-change-password");
          var el4 = dom.createTextNode("Change Password");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n                    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [7, 1]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 3, 3);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [5]), 3, 3);
          morphs[3] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [["block", "unless", [["get", "isNotOwnProfile", ["loc", [null, [135, 30], [135, 45]]]]], [], 0, null, ["loc", [null, [135, 20], [140, 31]]]], ["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "user.newPassword", ["loc", [null, [144, 38], [144, 54]]]]], [], []], "type", "password", "id", "user-password-new", "class", "gh-input"], ["loc", [null, [144, 24], [144, 112]]]], ["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "user.ne2Password", ["loc", [null, [149, 38], [149, 54]]]]], [], []], "type", "password", "id", "user-new-password-verification", "class", "gh-input"], ["loc", [null, [149, 24], [149, 125]]]], ["element", "action", ["password"], [], ["loc", [null, [152, 89], [152, 110]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.2.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 160,
            "column": 0
          }
        },
        "moduleName": "ghost/templates/team/user.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "gh-view");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("header");
        dom.setAttribute(el2, "class", "view-header");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("section");
        dom.setAttribute(el3, "class", "view-actions");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "view-container settings-user");
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("figure");
        dom.setAttribute(el3, "class", "user-cover");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "class", "btn btn-default user-cover-edit js-modal-cover");
        var el5 = dom.createTextNode("Change Cover");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("form");
        dom.setAttribute(el3, "class", "user-profile");
        dom.setAttribute(el3, "novalidate", "novalidate");
        dom.setAttribute(el3, "autocomplete", "off");
        var el4 = dom.createTextNode("\n\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("input");
        dom.setAttribute(el4, "style", "display:none;");
        dom.setAttribute(el4, "type", "text");
        dom.setAttribute(el4, "name", "fakeusernameremembered");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("input");
        dom.setAttribute(el4, "style", "display:none;");
        dom.setAttribute(el4, "type", "password");
        dom.setAttribute(el4, "name", "fakepasswordremembered");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("fieldset");
        dom.setAttribute(el4, "class", "user-details-top");
        var el5 = dom.createTextNode("\n\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("figure");
        dom.setAttribute(el5, "class", "user-image");
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "id", "user-image");
        dom.setAttribute(el6, "class", "img");
        var el7 = dom.createElement("span");
        dom.setAttribute(el7, "class", "hidden");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\"s Picture");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                    ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("button");
        dom.setAttribute(el6, "type", "button");
        dom.setAttribute(el6, "class", "edit-user-image js-modal-image");
        var el7 = dom.createTextNode("Edit Picture");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("fieldset");
        dom.setAttribute(el4, "class", "user-details-bottom");
        var el5 = dom.createTextNode("\n\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n                ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("hr");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element6 = dom.childAt(fragment, [0]);
        var element7 = dom.childAt(element6, [1]);
        var element8 = dom.childAt(element7, [3]);
        var element9 = dom.childAt(element6, [3]);
        var element10 = dom.childAt(element9, [1]);
        var element11 = dom.childAt(element10, [1]);
        var element12 = dom.childAt(element9, [3]);
        var element13 = dom.childAt(element12, [6]);
        var element14 = dom.childAt(element13, [1]);
        var element15 = dom.childAt(element14, [1]);
        var element16 = dom.childAt(element14, [3]);
        var element17 = dom.childAt(element12, [8]);
        var morphs = new Array(16);
        morphs[0] = dom.createMorphAt(element7, 1, 1);
        morphs[1] = dom.createMorphAt(element8, 1, 1);
        morphs[2] = dom.createMorphAt(element8, 3, 3);
        morphs[3] = dom.createAttrMorph(element10, 'style');
        morphs[4] = dom.createElementMorph(element11);
        morphs[5] = dom.createAttrMorph(element15, 'style');
        morphs[6] = dom.createMorphAt(dom.childAt(element15, [0]), 0, 0);
        morphs[7] = dom.createElementMorph(element16);
        morphs[8] = dom.createMorphAt(element13, 3, 3);
        morphs[9] = dom.createMorphAt(element17, 1, 1);
        morphs[10] = dom.createMorphAt(element17, 3, 3);
        morphs[11] = dom.createMorphAt(element17, 5, 5);
        morphs[12] = dom.createMorphAt(element17, 7, 7);
        morphs[13] = dom.createMorphAt(element17, 9, 9);
        morphs[14] = dom.createMorphAt(element17, 11, 11);
        morphs[15] = dom.createMorphAt(element12, 10, 10);
        return morphs;
      },
      statements: [["block", "gh-view-title", [], ["openMobileMenu", "openMobileMenu"], 0, null, ["loc", [null, [3, 8], [6, 26]]]], ["block", "if", [["get", "userActionsAreVisible", ["loc", [null, [8, 18], [8, 39]]]]], [], 1, null, ["loc", [null, [8, 12], [31, 19]]]], ["block", "gh-spin-button", [], ["class", "btn btn-blue", "action", "save", "submitting", ["subexpr", "@mut", [["get", "submitting", ["loc", [null, [33, 76], [33, 86]]]]], [], []]], 2, null, ["loc", [null, [33, 12], [33, 111]]]], ["attribute", "style", ["get", "coverImageBackground", ["loc", [null, [39, 43], [39, 63]]]]], ["element", "action", ["openModal", "upload", ["get", "user", ["loc", [null, [40, 105], [40, 109]]]], "cover"], [], ["loc", [null, [40, 75], [40, 119]]]], ["attribute", "style", ["get", "userImageBackground", ["loc", [null, [52, 61], [52, 80]]]]], ["content", "user.name", ["loc", [null, [52, 104], [52, 117]]]], ["element", "action", ["openModal", "upload", ["get", "user", ["loc", [null, [53, 72], [53, 76]]]], "image"], [], ["loc", [null, [53, 42], [53, 86]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "user.errors", ["loc", [null, [56, 40], [56, 51]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "user.hasValidated", ["loc", [null, [56, 65], [56, 82]]]]], [], []], "property", "name", "class", "first-form-group"], 3, null, ["loc", [null, [56, 16], [64, 34]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "user.errors", ["loc", [null, [70, 40], [70, 51]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "user.hasValidated", ["loc", [null, [70, 65], [70, 82]]]]], [], []], "property", "slug"], 4, null, ["loc", [null, [70, 16], [75, 34]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "user.errors", ["loc", [null, [77, 40], [77, 51]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "user.hasValidated", ["loc", [null, [77, 65], [77, 82]]]]], [], []], "property", "email"], 5, null, ["loc", [null, [77, 16], [87, 34]]]], ["block", "if", [["get", "rolesDropdownIsVisible", ["loc", [null, [89, 22], [89, 44]]]]], [], 6, null, ["loc", [null, [89, 16], [103, 23]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "user.errors", ["loc", [null, [105, 40], [105, 51]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "user.hasValidated", ["loc", [null, [105, 65], [105, 82]]]]], [], []], "property", "location"], 7, null, ["loc", [null, [105, 16], [110, 34]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "user.errors", ["loc", [null, [112, 40], [112, 51]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "user.hasValidated", ["loc", [null, [112, 65], [112, 82]]]]], [], []], "property", "website"], 8, null, ["loc", [null, [112, 16], [117, 34]]]], ["block", "gh-form-group", [], ["errors", ["subexpr", "@mut", [["get", "user.errors", ["loc", [null, [119, 40], [119, 51]]]]], [], []], "hasValidated", ["subexpr", "@mut", [["get", "user.hasValidated", ["loc", [null, [119, 65], [119, 82]]]]], [], []], "property", "bio", "class", "bio-container"], 9, null, ["loc", [null, [119, 16], [127, 34]]]], ["block", "unless", [["get", "isAdminUserOnOwnerProfile", ["loc", [null, [133, 22], [133, 47]]]]], [], 10, null, ["loc", [null, [133, 12], [156, 23]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10]
    };
  })());
});
define('ghost/transforms/moment-date', ['exports', 'ember-data'], function (exports, _emberData) {
    var Transform = _emberData['default'].Transform;
    exports['default'] = Transform.extend({
        deserialize: function deserialize(serialized) {
            if (serialized) {
                return moment(serialized);
            }
            return serialized;
        },

        serialize: function serialize(deserialized) {
            if (deserialized) {
                return moment(deserialized).toDate();
            }
            return deserialized;
        }
    });
});
/* global moment */
define('ghost/transforms/raw', ['exports', 'ember-data'], function (exports, _emberData) {
    var Transform = _emberData['default'].Transform;
    exports['default'] = Transform.extend({
        deserialize: function deserialize(serialized) {
            return serialized;
        },

        serialize: function serialize(deserialized) {
            return deserialized;
        }
    });
});
define('ghost/utils/ajax', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = getRequestErrorMessage;
    var isArray = _ember['default'].isArray;

    // Used in API request fail handlers to parse a standard api error
    // response json for the message to display

    function getRequestErrorMessage(request, performConcat) {
        var message = undefined,
            msgDetail = undefined;

        // Can't really continue without a request
        if (!request) {
            return null;
        }

        // Seems like a sensible default
        message = request.statusText;

        // If a non 200 response
        if (request.status !== 200) {
            try {
                // Try to parse out the error, or default to 'Unknown'
                if (request.responseJSON.errors && isArray(request.responseJSON.errors)) {
                    message = request.responseJSON.errors.map(function (errorItem) {
                        return errorItem.message;
                    });
                } else {
                    message = request.responseJSON.error || 'Unknown Error';
                }
            } catch (e) {
                msgDetail = request.status ? request.status + ' - ' + request.statusText : 'Server was not available';
                message = 'The server returned an error (' + msgDetail + ').';
            }
        }

        if (performConcat && isArray(message)) {
            message = message.join('<br />');
        }

        // return an array of errors by default
        if (!performConcat && typeof message === 'string') {
            message = [message];
        }

        return message;
    }
});
define("ghost/utils/bind", ["exports"], function (exports) {
    var slice = Array.prototype.slice;

    exports["default"] = function () /* func, args, thisArg */{
        var args = slice.call(arguments);
        var func = args.shift();
        var thisArg = args.pop();

        function bound() {
            return func.apply(thisArg, args);
        }

        return bound;
    };
});
define('ghost/utils/bound-one-way', ['exports', 'ember'], function (exports, _ember) {
    var computed = _ember['default'].computed;

    /**
     * Defines a property similarly to `Ember.computed.oneway`,
     * save that while a `oneway` loses its binding upon being set,
     * the `BoundOneWay` will continue to listen for upstream changes.
     *
     * This is an ideal tool for working with values inside of {{input}}
     * elements.
     * @param {*} upstream
     * @param {function} transform a function to transform the **upstream** value.
     */

    exports['default'] = function (upstream, transform) {
        if (typeof transform !== 'function') {
            // default to the identity function
            transform = function (value) {
                return value;
            };
        }

        return computed(upstream, {
            get: function get() {
                return transform(this.get(upstream));
            },
            set: function set(key, value) {
                return value;
            }
        });
    };
});
define('ghost/utils/caja-sanitizers', ['exports'], function (exports) {
    /**
     * google-caja uses url() and id() to verify if the values are allowed.
     */
    /**
     * Check if URL is allowed
     * URLs are allowed if they start with http://, https://, or /.
     */
    var url = function url(_url) {
        _url = _url.toString().replace(/['"]+/g, '');
        if (/^https?:\/\//.test(_url) || /^\//.test(_url)) {
            return _url;
        }
    };

    /**
     * Check if ID is allowed
     * All ids are allowed at the moment.
     */
    var id = function id(_id) {
        return _id;
    };

    exports['default'] = {
        url: url,
        id: id
    };
});
define('ghost/utils/ctrl-or-cmd', ['exports'], function (exports) {
  exports['default'] = navigator.userAgent.indexOf('Mac') !== -1 ? 'command' : 'ctrl';
});
define('ghost/utils/date-formatting', ['exports'], function (exports) {
    /* global moment */
    // jscs: disable disallowSpacesInsideParentheses

    var parseDateFormats = ['DD MMM YY @ HH:mm', 'DD MMM YY HH:mm', 'D MMM YY @ HH:mm', 'D MMM YY HH:mm', 'DD MMM YYYY @ HH:mm', 'DD MMM YYYY HH:mm', 'D MMM YYYY @ HH:mm', 'D MMM YYYY HH:mm', 'DD/MM/YY @ HH:mm', 'DD/MM/YY HH:mm', 'DD/MM/YYYY @ HH:mm', 'DD/MM/YYYY HH:mm', 'DD-MM-YY @ HH:mm', 'DD-MM-YY HH:mm', 'DD-MM-YYYY @ HH:mm', 'DD-MM-YYYY HH:mm', 'YYYY-MM-DD @ HH:mm', 'YYYY-MM-DD HH:mm', 'DD MMM @ HH:mm', 'DD MMM HH:mm', 'D MMM @ HH:mm', 'D MMM HH:mm'];

    var displayDateFormat = 'DD MMM YY @ HH:mm';

    // Add missing timestamps
    function verifyTimeStamp(dateString) {
        if (dateString && !dateString.slice(-5).match(/\d+:\d\d/)) {
            dateString += ' 12:00';
        }
        return dateString;
    }

    // Parses a string to a Moment
    function parseDateString(value) {
        return value ? moment(verifyTimeStamp(value), parseDateFormats, true) : undefined;
    }

    // Formats a Date or Moment
    function formatDate(value) {
        return verifyTimeStamp(value ? moment(value).format(displayDateFormat) : '');
    }

    exports.parseDateString = parseDateString;
    exports.formatDate = formatDate;
});
define('ghost/utils/document-title', ['exports', 'ember'], function (exports, _ember) {
    var Route = _ember['default'].Route;
    var Router = _ember['default'].Router;
    var isArray = _ember['default'].isArray;
    var on = _ember['default'].on;

    exports['default'] = function () {
        Route.reopen({
            // `titleToken` can either be a static string or a function
            // that accepts a model object and returns a string (or array
            // of strings if there are multiple tokens).
            titleToken: null,

            // `title` can either be a static string or a function
            // that accepts an array of tokens and returns a string
            // that will be the document title. The `collectTitleTokens` action
            // stops bubbling once a route is encountered that has a `title`
            // defined.
            title: null,

            actions: {
                collectTitleTokens: function collectTitleTokens(tokens) {
                    var titleToken = this.titleToken;

                    var finalTitle = undefined;

                    if (typeof this.titleToken === 'function') {
                        titleToken = this.titleToken(this.currentModel);
                    }

                    if (isArray(titleToken)) {
                        tokens.unshift.apply(this, titleToken);
                    } else if (titleToken) {
                        tokens.unshift(titleToken);
                    }

                    if (this.title) {
                        if (typeof this.title === 'function') {
                            finalTitle = this.title(tokens);
                        } else {
                            finalTitle = this.title;
                        }

                        this.router.setTitle(finalTitle);
                    } else {
                        return true;
                    }
                }
            }
        });

        Router.reopen({
            updateTitle: on('didTransition', function () {
                this.send('collectTitleTokens', []);
            }),

            setTitle: function setTitle(title) {
                window.document.title = title;
            }
        });
    };
});
define('ghost/utils/ed-image-manager', ['exports'], function (exports) {
    var imageMarkdownRegex = /^!(?:\[([^\n\]]*)\])(?:\(([^\n\]]*)\))?$/gim;

    // Process the markdown content and find all of the locations where there is an image markdown block
    function parse(stringToParse) {
        var images = [];
        var m = undefined;

        while ((m = imageMarkdownRegex.exec(stringToParse)) !== null) {
            images.push(m);
        }

        return images;
    }

    // Loop through all dropzones in the preview and find which one was the target of the upload
    function getZoneIndex(element) {
        var zones = document.querySelectorAll('.js-entry-preview .js-drop-zone');

        for (var i = 0; i < zones.length; i += 1) {
            if (zones.item(i) === element) {
                return i;
            }
        }

        return -1;
    }

    // Figure out the start and end of the selection range for the src in the markdown, so we know what to replace
    function getSrcRange(content, element) {
        var images = parse(content);
        var index = getZoneIndex(element);
        var replacement = {};

        if (index > -1) {
            // [1] matches the alt test, and 2 matches the url between the ()
            // if the () are missing entirely, which is valid, [2] will be undefined and we'll need to treat this case
            // a little differently
            if (images[index][2] === undefined) {
                replacement.needsParens = true;
                replacement.start = content.indexOf(']', images[index].index) + 1;
                replacement.end = replacement.start;
            } else {
                replacement.start = content.indexOf('(', images[index].index) + 1;
                replacement.end = replacement.start + images[index][2].length;
            }
            return replacement;
        }

        return false;
    }

    exports['default'] = {
        getSrcRange: getSrcRange
    };
});
define('ghost/utils/editor-shortcuts', ['exports', 'ghost/utils/ctrl-or-cmd'], function (exports, _ghostUtilsCtrlOrCmd) {

  var shortcuts = {};

  // General editor shortcuts
  shortcuts[_ghostUtilsCtrlOrCmd['default'] + '+alt+p'] = 'publish';
  shortcuts['alt+shift+z'] = 'toggleZenMode';

  // Markdown Shortcuts

  // Text
  shortcuts['ctrl+alt+u'] = { action: 'editorShortcut', options: { type: 'strike' } };
  shortcuts[_ghostUtilsCtrlOrCmd['default'] + '+b'] = { action: 'editorShortcut', options: { type: 'bold' } };
  shortcuts[_ghostUtilsCtrlOrCmd['default'] + '+i'] = { action: 'editorShortcut', options: { type: 'italic' } };

  shortcuts['ctrl+u'] = { action: 'editorShortcut', options: { type: 'uppercase' } };
  shortcuts['ctrl+shift+u'] = { action: 'editorShortcut', options: { type: 'lowercase' } };
  shortcuts['ctrl+alt+shift+u'] = { action: 'editorShortcut', options: { type: 'titlecase' } };
  shortcuts[_ghostUtilsCtrlOrCmd['default'] + '+shift+c'] = { action: 'editorShortcut', options: { type: 'copyHTML' } };
  shortcuts[_ghostUtilsCtrlOrCmd['default'] + '+h'] = { action: 'editorShortcut', options: { type: 'cycleHeaderLevel' } };

  // Formatting
  shortcuts['ctrl+q'] = { action: 'editorShortcut', options: { type: 'blockquote' } };
  shortcuts['ctrl+l'] = { action: 'editorShortcut', options: { type: 'list' } };

  // Insert content
  shortcuts['ctrl+shift+1'] = { action: 'editorShortcut', options: { type: 'currentDate' } };
  shortcuts[_ghostUtilsCtrlOrCmd['default'] + '+k'] = { action: 'editorShortcut', options: { type: 'link' } };
  shortcuts[_ghostUtilsCtrlOrCmd['default'] + '+shift+i'] = { action: 'editorShortcut', options: { type: 'image' } };
  shortcuts[_ghostUtilsCtrlOrCmd['default'] + '+shift+k'] = { action: 'editorShortcut', options: { type: 'code' } };

  exports['default'] = shortcuts;
});
// # Editor shortcuts
// Loaded by EditorBaseRoute, which is a shortcuts route
// This map is used to ensure the right action is called by each shortcut
define('ghost/utils/ghost-paths', ['exports'], function (exports) {
    var _slice = Array.prototype.slice;
    var makeRoute = function makeRoute(root, args) {
        var slashAtStart = /^\//;
        var slashAtEnd = /\/$/;
        var parts = Array.prototype.slice.call(args, 0);
        var route = root.replace(slashAtEnd, '');

        parts.forEach(function (part) {
            if (part) {
                route = [route, part.replace(slashAtStart, '').replace(slashAtEnd, '')].join('/');
            }
        });

        return route += '/';
    };

    exports['default'] = function () {
        var path = window.location.pathname;
        var subdir = path.substr(0, path.search('/ghost/'));
        var adminRoot = subdir + '/ghost';
        var apiRoot = subdir + '/ghost/api/v0.1';

        function assetUrl(src) {
            return subdir + src;
        }

        return {
            adminRoot: adminRoot,
            apiRoot: apiRoot,
            subdir: subdir,
            blogRoot: subdir + '/',
            count: 'https://ghost.org/count/',

            url: {
                admin: function admin() {
                    return makeRoute(adminRoot, arguments);
                },

                api: function api() {
                    return makeRoute(apiRoot, arguments);
                },

                join: function join() {
                    if (arguments.length > 1) {
                        return makeRoute(arguments[0], Array.prototype.slice.call(arguments, 1));
                    } else if (arguments.length === 1) {
                        var _arguments = _slice.call(arguments);

                        var arg = _arguments[0];

                        return arg.slice(-1) === '/' ? arg : arg + '/';
                    }
                    return '/';
                },

                asset: assetUrl
            }
        };
    };
});
define("ghost/utils/isFinite", ["exports"], function (exports) {
    /* globals window */

    // isFinite function from lodash

    exports["default"] = function (value) {
        return window.isFinite(value) && !window.isNaN(parseFloat(value));
    };
});
define('ghost/utils/isNumber', ['exports'], function (exports) {
  // isNumber function from lodash

  var toString = Object.prototype.toString;

  exports['default'] = function (value) {
    return typeof value === 'number' || value && typeof value === 'object' && toString.call(value) === '[object Number]' || false;
  };
});
define('ghost/utils/link-component', ['exports', 'ember'], function (exports, _ember) {
    var LinkComponent = _ember['default'].LinkComponent;
    var computed = _ember['default'].computed;

    LinkComponent.reopen({
        active: computed('attrs.params', '_routing.currentState', function () {
            var isActive = this._super.apply(this, arguments);

            if (typeof this.attrs.alternateActive === 'function') {
                this.attrs.alternateActive(isActive);
            }

            return isActive;
        }),

        activeClass: computed('tagName', function () {
            return this.get('tagName') === 'button' ? '' : 'active';
        })
    });
});
define("ghost/utils/random-password", ["exports"], function (exports) {
    /* global generatePassword */

    exports["default"] = function () {
        var word = generatePassword(6);
        var randomN = Math.floor(Math.random() * 1000);

        return word + randomN;
    };
});
define('ghost/utils/text-field', ['exports', 'ember'], function (exports, _ember) {
    var TextField = _ember['default'].TextField;

    TextField.reopen({
        attributeBindings: ['autofocus']
    });
});
define('ghost/utils/titleize', ['exports', 'ember'], function (exports, _ember) {
    var lowerWords = ['of', 'a', 'the', 'and', 'an', 'or', 'nor', 'but', 'is', 'if', 'then', 'else', 'when', 'at', 'from', 'by', 'on', 'off', 'for', 'in', 'out', 'over', 'to', 'into', 'with'];

    exports['default'] = function (input) {
        var words = input.split(' ').map(function (word, index) {
            if (index === 0 || lowerWords.indexOf(word) === -1) {
                word = _ember['default'].String.capitalize(word);
            }

            return word;
        });

        return words.join(' ');
    };
});
define('ghost/utils/validator-extensions', ['exports', 'ember'], function (exports, _ember) {
    var isBlank = _ember['default'].isBlank;

    function init() {
        // Provide a few custom validators
        //
        validator.extend('empty', function (str) {
            return isBlank(str);
        });

        validator.extend('notContains', function (str, badString) {
            return str.indexOf(badString) === -1;
        });
    }

    exports['default'] = {
        init: init
    };
});
define("ghost/utils/window-proxy", ["exports"], function (exports) {
    exports["default"] = {
        changeLocation: function changeLocation(url) {
            window.location = url;
        },

        replaceLocation: function replaceLocation(url) {
            window.location.replace(url);
        }
    };
});
define('ghost/utils/word-count', ['exports'], function (exports) {
    // jscs: disable
    /* global XRegExp */

    exports['default'] = function (s) {
        var nonANumLetters = new XRegExp("[^\\s\\d\\p{L}]", 'g'); // all non-alphanumeric letters regexp

        s = s.replace(/<(.|\n)*?>/g, ' '); // strip tags
        s = s.replace(nonANumLetters, ''); // ignore non-alphanumeric letters
        s = s.replace(/(^\s*)|(\s*$)/gi, ''); // exclude starting and ending white-space
        s = s.replace(/\n /gi, ' '); // convert newlines to spaces
        s = s.replace(/\n+/gi, ' ');
        s = s.replace(/[ ]{2,}/gi, ' '); // convert 2 or more spaces to 1

        return s.split(' ').length;
    };
});
define('ghost/validators/base', ['exports', 'ember'], function (exports, _ember) {

    /**
     * Base validator that all validators should extend
     * Handles checking of individual properties or the entire model
     */
    exports['default'] = _ember['default'].Object.extend({
        properties: [],
        passed: false,

        /**
         * When passed a model and (optionally) a property name,
         * checks it against a list of validation functions
         * @param  {Ember.Object} model Model to validate
         * @param  {string} prop  Property name to check
         * @return {boolean}      True if the model passed all (or one) validation(s),
         *                        false if not
         */
        check: function check(model, prop) {
            var _this = this;

            this.set('passed', true);

            if (prop && this[prop]) {
                this[prop](model);
            } else {
                this.get('properties').forEach(function (property) {
                    if (_this[property]) {
                        _this[property](model);
                    }
                });
            }
            return this.get('passed');
        },

        invalidate: function invalidate() {
            this.set('passed', false);
        }
    });
});
define('ghost/validators/nav-item', ['exports', 'ghost/validators/base'], function (exports, _ghostValidatorsBase) {
    exports['default'] = _ghostValidatorsBase['default'].create({
        properties: ['label', 'url'],

        label: function label(model) {
            var label = model.get('label');
            var hasValidated = model.get('hasValidated');

            if (this.canBeIgnored(model)) {
                return;
            }

            if (validator.empty(label)) {
                model.get('errors').add('label', 'You must specify a label');
                this.invalidate();
            }

            hasValidated.addObject('label');
        },

        url: function url(model) {
            var url = model.get('url');
            var hasValidated = model.get('hasValidated');
            /* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
            var validatorOptions = { require_protocol: true };
            /* jscs:enable requireCamelCaseOrUpperCaseIdentifiers */
            var urlRegex = new RegExp(/^(\/|#|[a-zA-Z0-9\-]+:)/);

            if (this.canBeIgnored(model)) {
                return;
            }

            if (validator.empty(url)) {
                model.get('errors').add('url', 'You must specify a URL or relative path');
                this.invalidate();
            } else if (url.match(/\s/) || !validator.isURL(url, validatorOptions) && !url.match(urlRegex)) {
                model.get('errors').add('url', 'You must specify a valid URL or relative path');
                this.invalidate();
            }

            hasValidated.addObject('url');
        },

        canBeIgnored: function canBeIgnored(model) {
            var label = model.get('label');
            var url = model.get('url');
            var isLast = model.get('last');

            // if nav item is last and completely blank, mark it valid and skip
            if (isLast && (validator.empty(url) || url === '/') && validator.empty(label)) {
                model.get('errors').clear();
                return true;
            }

            return false;
        }
    });
});
define('ghost/validators/new-user', ['exports', 'ghost/validators/base'], function (exports, _ghostValidatorsBase) {
    exports['default'] = _ghostValidatorsBase['default'].extend({
        properties: ['name', 'email', 'password'],

        name: function name(model) {
            var name = model.get('name');

            if (!validator.isLength(name, 1)) {
                model.get('errors').add('name', 'Please enter a name.');
                this.invalidate();
            }
        },

        email: function email(model) {
            var email = model.get('email');

            if (validator.empty(email)) {
                model.get('errors').add('email', 'Please enter an email.');
                this.invalidate();
            } else if (!validator.isEmail(email)) {
                model.get('errors').add('email', 'Invalid Email.');
                this.invalidate();
            }
        },

        password: function password(model) {
            var password = model.get('password');

            if (!validator.isLength(password, 8)) {
                model.get('errors').add('password', 'Password must be at least 8 characters long');
                this.invalidate();
            }
        }
    });
});
define('ghost/validators/post', ['exports', 'ghost/validators/base'], function (exports, _ghostValidatorsBase) {
    exports['default'] = _ghostValidatorsBase['default'].create({
        properties: ['title', 'metaTitle', 'metaDescription'],

        title: function title(model) {
            var title = model.get('title');

            if (validator.empty(title)) {
                model.get('errors').add('title', 'You must specify a title for the post.');
                this.invalidate();
            }

            if (!validator.isLength(title, 0, 150)) {
                model.get('errors').add('title', 'Title cannot be longer than 150 characters.');
                this.invalidate();
            }
        },

        metaTitle: function metaTitle(model) {
            var metaTitle = model.get('meta_title');

            if (!validator.isLength(metaTitle, 0, 150)) {
                model.get('errors').add('meta_title', 'Meta Title cannot be longer than 150 characters.');
                this.invalidate();
            }
        },

        metaDescription: function metaDescription(model) {
            var metaDescription = model.get('meta_description');

            if (!validator.isLength(metaDescription, 0, 200)) {
                model.get('errors').add('meta_description', 'Meta Description cannot be longer than 200 characters.');
                this.invalidate();
            }
        }
    });
});
define('ghost/validators/reset', ['exports', 'ghost/validators/base'], function (exports, _ghostValidatorsBase) {
    exports['default'] = _ghostValidatorsBase['default'].create({
        properties: ['newPassword'],

        newPassword: function newPassword(model) {
            var p1 = model.get('newPassword');
            var p2 = model.get('ne2Password');

            if (validator.empty(p1)) {
                model.get('errors').add('newPassword', 'Please enter a password.');
                this.invalidate();
            } else if (!validator.isLength(p1, 8)) {
                model.get('errors').add('newPassword', 'The password is not long enough.');
                this.invalidate();
            } else if (!validator.equals(p1, p2)) {
                model.get('errors').add('ne2Password', 'The two new passwords don\'t match.');
                this.invalidate();
            }
        }
    });
});
define('ghost/validators/setting', ['exports', 'ghost/validators/base'], function (exports, _ghostValidatorsBase) {
    exports['default'] = _ghostValidatorsBase['default'].create({
        properties: ['title', 'description', 'password', 'postsPerPage'],
        title: function title(model) {
            var title = model.get('title');

            if (!validator.isLength(title, 0, 150)) {
                model.get('errors').add('title', 'Title is too long');
                this.invalidate();
            }
        },

        description: function description(model) {
            var desc = model.get('description');

            if (!validator.isLength(desc, 0, 200)) {
                model.get('errors').add('description', 'Description is too long');
                this.invalidate();
            }
        },

        password: function password(model) {
            var isPrivate = model.get('isPrivate');
            var password = model.get('password');

            if (isPrivate && password === '') {
                model.get('errors').add('password', 'Password must be supplied');
                this.invalidate();
            }
        },

        postsPerPage: function postsPerPage(model) {
            var postsPerPage = model.get('postsPerPage');

            if (!validator.isInt(postsPerPage)) {
                model.get('errors').add('postsPerPage', 'Posts per page must be a number');
                this.invalidate();
            } else if (postsPerPage > 1000) {
                model.get('errors').add('postsPerPage', 'The maximum number of posts per page is 1000');
                this.invalidate();
            } else if (postsPerPage < 1) {
                model.get('errors').add('postsPerPage', 'The minimum number of posts per page is 1');
                this.invalidate();
            }
        }
    });
});
define('ghost/validators/setup', ['exports', 'ghost/validators/new-user'], function (exports, _ghostValidatorsNewUser) {
    exports['default'] = _ghostValidatorsNewUser['default'].create({
        properties: ['name', 'email', 'password', 'blogTitle'],

        blogTitle: function blogTitle(model) {
            var blogTitle = model.get('blogTitle');

            if (!validator.isLength(blogTitle, 1)) {
                model.get('errors').add('blogTitle', 'Please enter a blog title.');
                this.invalidate();
            }
        }
    });
});
define('ghost/validators/signin', ['exports', 'ghost/validators/base'], function (exports, _ghostValidatorsBase) {
    exports['default'] = _ghostValidatorsBase['default'].create({
        properties: ['identification', 'signin', 'forgotPassword'],
        invalidMessage: 'Email address is not valid',

        identification: function identification(model) {
            var id = model.get('identification');

            if (!validator.empty(id) && !validator.isEmail(id)) {
                model.get('errors').add('identification', this.get('invalidMessage'));
                this.invalidate();
            }
        },

        signin: function signin(model) {
            var id = model.get('identification');
            var password = model.get('password');

            model.get('errors').clear();

            if (validator.empty(id)) {
                model.get('errors').add('identification', 'Please enter an email');
                this.invalidate();
            }

            if (!validator.empty(id) && !validator.isEmail(id)) {
                model.get('errors').add('identification', this.get('invalidMessage'));
                this.invalidate();
            }

            if (validator.empty(password)) {
                model.get('errors').add('password', 'Please enter a password');
                this.invalidate();
            }
        },

        forgotPassword: function forgotPassword(model) {
            var id = model.get('identification');

            model.get('errors').clear();

            if (validator.empty(id) || !validator.isEmail(id)) {
                model.get('errors').add('identification', this.get('invalidMessage'));
                this.invalidate();
            }
        }
    });
});
define('ghost/validators/signup', ['exports', 'ghost/validators/new-user'], function (exports, _ghostValidatorsNewUser) {
  exports['default'] = _ghostValidatorsNewUser['default'].create();
});
define('ghost/validators/tag-settings', ['exports', 'ghost/validators/base'], function (exports, _ghostValidatorsBase) {
    exports['default'] = _ghostValidatorsBase['default'].create({
        properties: ['name', 'slug', 'description', 'metaTitle', 'metaDescription'],

        name: function name(model) {
            var name = model.get('name');

            if (validator.empty(name)) {
                model.get('errors').add('name', 'You must specify a name for the tag.');
                this.invalidate();
            } else if (name.match(/^,/)) {
                model.get('errors').add('name', 'Tag names can\'t start with commas.');
                this.invalidate();
            } else if (!validator.isLength(name, 0, 150)) {
                model.get('errors').add('name', 'Tag names cannot be longer than 150 characters.');
                this.invalidate();
            }
        },

        slug: function slug(model) {
            var slug = model.get('slug');

            if (!validator.isLength(slug, 0, 150)) {
                model.get('errors').add('slug', 'URL cannot be longer than 150 characters.');
                this.invalidate();
            }
        },

        description: function description(model) {
            var description = model.get('description');

            if (!validator.isLength(description, 0, 200)) {
                model.get('errors').add('description', 'Description cannot be longer than 200 characters.');
                this.invalidate();
            }
        },

        metaTitle: function metaTitle(model) {
            var metaTitle = model.get('meta_title');

            if (!validator.isLength(metaTitle, 0, 150)) {
                model.get('errors').add('meta_title', 'Meta Title cannot be longer than 150 characters.');
                this.invalidate();
            }
        },

        metaDescription: function metaDescription(model) {
            var metaDescription = model.get('meta_description');

            if (!validator.isLength(metaDescription, 0, 200)) {
                model.get('errors').add('meta_description', 'Meta Description cannot be longer than 200 characters.');
                this.invalidate();
            }
        }
    });
});
define('ghost/validators/user', ['exports', 'ghost/validators/base'], function (exports, _ghostValidatorsBase) {
    exports['default'] = _ghostValidatorsBase['default'].create({
        properties: ['name', 'bio', 'email', 'location', 'website', 'roles'],

        isActive: function isActive(model) {
            return model.get('status') === 'active';
        },

        name: function name(model) {
            var name = model.get('name');

            if (this.isActive(model)) {
                if (validator.empty(name)) {
                    model.get('errors').add('name', 'Please enter a name.');
                    this.invalidate();
                } else if (!validator.isLength(name, 0, 150)) {
                    model.get('errors').add('name', 'Name is too long');
                    this.invalidate();
                }
            }
        },

        bio: function bio(model) {
            var bio = model.get('bio');

            if (this.isActive(model)) {
                if (!validator.isLength(bio, 0, 200)) {
                    model.get('errors').add('bio', 'Bio is too long');
                    this.invalidate();
                }
            }
        },

        email: function email(model) {
            var email = model.get('email');

            if (!validator.isEmail(email)) {
                model.get('errors').add('email', 'Please supply a valid email address');
                this.invalidate();
            }
        },

        location: function location(model) {
            var location = model.get('location');

            if (this.isActive(model)) {
                if (!validator.isLength(location, 0, 150)) {
                    model.get('errors').add('location', 'Location is too long');
                    this.invalidate();
                }
            }
        },

        website: function website(model) {
            var website = model.get('website');

            /* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */
            if (this.isActive(model)) {
                if (!validator.empty(website) && (!validator.isURL(website, { require_protocol: false }) || !validator.isLength(website, 0, 2000))) {

                    model.get('errors').add('website', 'Website is not a valid url');
                    this.invalidate();
                }
            }
            /* jscs:enable requireCamelCaseOrUpperCaseIdentifiers */
        },

        roles: function roles(model) {
            if (!this.isActive(model)) {
                var roles = model.get('roles');

                if (roles.length < 1) {
                    model.get('errors').add('role', 'Please select a role');
                    this.invalidate();
                }
            }
        }
    });
});
/* jshint ignore:start */

/* jshint ignore:end */

/* jshint ignore:start */

define('ghost/config/environment', ['ember'], function(Ember) {
  var prefix = 'ghost';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

if (!runningTests) {
  require("ghost/app")["default"].create({"LOG_ACTIVE_GENERATION":true,"LOG_TRANSITIONS":true,"LOG_TRANSITIONS_INTERNAL":true,"LOG_VIEW_LOOKUPS":true,"name":"ghost","version":"0.7.4"});
}

/* jshint ignore:end */
//# sourceMappingURL=ghost.map